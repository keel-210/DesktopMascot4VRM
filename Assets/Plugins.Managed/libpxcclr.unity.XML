<?xml version="1.0"?>
<doc>
    <assembly>
        <name>libpxcclr.unity</name>
    </assembly>
    <members>
        <member name="T:PXCMBase">
            <summary>
            This interface forms the base of all SDK interface definitions.
            The interface overrides the class delete operator to work with the SDK
            dispatching mechanism; and exposes a custom (RTTI-free) dynaimc casting
            mechanism with the QueryInstance method.  The application that implements
            any PXCMBase derived interface must derive from one of the PXCMBaseImpl
            class templates.
            </summary>
        </member>
        <member name="M:PXCMBase.Dispose">
            <summary>
            The function disposes the object instance. Certain objects are reference
            counted, in which case the function reduces the reference count by 1.
            </summary>
        </member>
        <member name="M:PXCMBase.QueryInstance(System.Int32)">
            <summary>
            The function checks if the object instance supports a specific interface.
            If so, return the instance of the interface. Otherwise, returns NULL.
            </summary>
            <param name="cuid"> The interface identifier.</param>
            <returns> The interface instance, or NULL.</returns>
        </member>
        <member name="M:PXCMBase.QueryInstance``1">
            <summary>
            The function checks if the object instance supports a specific interface.
            If so, return the instance of the interface. Otherwise, returns null.
            </summary>
            <returns> The interface instance, or null.</returns>
        </member>
        <member name="M:PXCM3DScan.QueryConfiguration">
            <summary>
            Query the current PXCM3DScan Configuration
            </summary>
            <returns> PXCM3DScan Configuration structure </returns>
        </member>
        <member name="M:PXCM3DScan.SetConfiguration(PXCM3DScan.Configuration)">
            <summary>
            Set the PXCM3DScan configuration.
            </summary>
            <param name="config"> The configuration object to be set. </param>
            <returns> the status code </returns>
        </member>
        <member name="M:PXCM3DScan.QueryArea">
            <summary>
            Query the current PXC3DScan Area
            </summary>
            <returns></returns>
        </member>
        <member name="M:PXCM3DScan.SetArea(PXCM3DScan.Area)">
            <summary>
             Set the PXC3DScan Area
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:PXCM3DScan.AcquirePreviewImage">
            <summary>
             PXC3DScan preview image access 
             The preview image is a rendered approximation of the scanning volume 
             from the perspective of the camera. A different image is available 
             each time a frame is processed. 
            </summary>
            <returns> A privew image </returns>
        </member>
        <member name="M:PXCM3DScan.QueryBoundingBox">
            <summary>
            Return the visible extent from the perspective of the most recent frame.
            Values are in normalized coordinates (0.0-1.0).
            </summary>
            <returns></returns>
        </member>
        <member name="M:PXCM3DScan.IsScanning">
            <summary>
             Determine if the scan has started
            </summary>
            <returns></returns>
        </member>
        <member name="M:PXCM3DScan.Reconstruct(PXCM3DScan.FileFormat,System.String)">
            <summary>
             PXC3DScan generation of standard mesh formats from the scanning volume.
            </summary>
            <param name="type"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:PXCM3DScan.FileFormatToString(PXCM3DScan.FileFormat)">
            <summary>
             PXC3DScan utility to convert FileFormat value to a string
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PXCM3DScan.#ctor(System.IntPtr,System.Boolean)">
            <summary>
             constructors and misc
            </summary>
            <param name="instance"></param>
            <param name="delete"></param>
        </member>
        <member name="T:PXCM3DScan.ReconstructionOption">
            <summary>
            Reconstruction options
            </summary>
        </member>
        <member name="F:PXCM3DScan.ReconstructionOption.NONE">
            Bit-OR'ed values
        </member>
        <member name="T:PXCM3DScan.ScanningMode">
            <summary>
            Scanning modes
            </summary>
        </member>
        <member name="T:PXCM3DScan.Configuration">
            <summary>
             Configuration structure
            </summary>
        </member>
        <member name="T:PXCM3DScan.Area">
            <summary>
             Area structure
            </summary>
        </member>
        <member name="T:PXCM3DScan.FileFormat">
            <summary>
             PXC3DScan mesh formats supported by Reconstruct
            </summary>
        </member>
        <member name="T:PXCM3DScan.AlertEvent">
            <summary>
            AlertEvent
            Enumerate all supported alert events.
            </summary>
        </member>
        <member name="T:PXCM3DScan.AlertData">
            <summary>
            AlertData
            Describe the alert parameters.
            </summary>
        </member>
        <member name="M:PXCM3DSeg.AcquireSegmentedImage">
            <summary> 
            Allocate and return a copy of the module's most recent segmented image. 
            The returned object's Release method can be used to deallocate it. 
            </summary>
        </member>
        <member name="M:PXCM3DSeg.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="instance"></param>
            <param name="delete"></param>
        </member>
        <member name="M:PXCM3DSeg.Subscribe(PXCM3DSeg.OnAlertDelegate)">
            <summary>
            Subscribe with an alert callback
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:PXCM3DSeg.SetFrameSkipInterval(System.Int32)">
            <summary>
            Set a frame ski interval
            </summary>
            <param name="skipInterval"></param>
            <returns></returns>
        </member>
        <member name="T:PXCM3DSeg.AlertEvent">
            <summary>
            AlertEvent
            Enumeratea all supported alert events.
            </summary>
        </member>
        <member name="T:PXCM3DSeg.AlertData">
            <summary>
            AlertData
            Describe the alert parameters.
            </summary>
        </member>
        <member name="T:PXCMAddRef">
            <summary>
            The interface adds a reference count to the supported object.
            </summary>
        </member>
        <member name="M:PXCMAddRef.AddRef">
            <summary> 
            Increase the reference counter of the underlying object.
            </summary>
            <returns> The increased reference counter value.</returns>
        </member>
        <member name="M:PXCMAddRef.#ctor(System.IntPtr,System.Boolean)">
            <summary>
             constructors and misc
            </summary>
            <param name="instance"></param>
            <param name="delete"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PXCMAudio" -->
        <member name="M:PXCMAudio.QueryInfo">
                    @brief Return the audio sample information.
                    @return the audio sample information in the AudioInfo structure.
        </member>
        <member name="M:PXCMAudio.AcquireAccess(PXCMAudio.Access,PXCMAudio.AudioFormat,PXCMAudio.Option,PXCMAudio.AudioData@)">
                    @brief Lock to access the internal storage of a specified format. The function will perform format conversion if unmatched. 
                    @param[in]  access		The access mode.
                    @param[in]  format		The requested smaple format.
                    @param[in]  options     The option flags
                    @param[out] data		The sample data storage, to be returned.
                    @return PXC_STATUS_NO_ERROR	Successful execution.
        </member>
        <member name="M:PXCMAudio.ReleaseAccess(PXCMAudio.AudioData)">
                    @brief Unlock the previously acquired buffer.
                    @param[in] data		The sample data storage previously acquired.
                    @return PXCM_STATUS_NO_ERROR	Successful execution.
        </member>
        <member name="M:PXCMAudio.AudioFormatToString(PXCMAudio.AudioFormat)">
            <summary> 
            Get the audio format string representation
            </summary>
            <param name="format"> The Audio format enumerator.</param>
            <returns> the string representation of the audio format.</returns>
        </member>
        <member name="M:PXCMAudio.AudioFormatToSize(PXCMAudio.AudioFormat)">
            <summary> 
            Return the audio sample size.
            </summary>
            <returns> the sample size in bytes</returns>
        </member>
        <member name="M:PXCMAudio.QueryTimeStamp">
            <summary> 
            Return the audio sample time stamp.
            </summary>
            <returns> the time stamp, in 100ns.</returns>
        </member>
        <member name="M:PXCMAudio.QueryOptions">
            <summary> 
            Return the audio sample option flags.
            </summary>
            <returns> the option flags.</returns>
        </member>
        <member name="M:PXCMAudio.SetTimeStamp(System.Int64)">
            <summary> 
            Set the sample time stamp.
            </summary>
            <param name="ts"> The time stamp value, in 100ns.</param>
        </member>
        <member name="M:PXCMAudio.CopyAudio(PXCMAudio)">
            <summary> 
            Copy data from another audio sample.
            </summary>
            <param name="src_audio"> The audio sample to copy data from.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMAudio.AcquireAccess(PXCMAudio.Access,PXCMAudio.AudioFormat,PXCMAudio.AudioData@)">
            <summary> 
            Lock to access the internal storage of a specified format. The function will perform format conversion if unmatched. 
            </summary>
            <param name="access"> The access mode.</param>
            <param name="format"> The requested smaple format.</param>
            <param name="data"> The sample data storage, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMAudio.AcquireAccess(PXCMAudio.Access,PXCMAudio.AudioData@)">
            <summary> 
            Lock to access the internal storage of a specified format. 
            </summary>
            <param name="access"> The access mode.</param>
            <param name="data">	The sample data storage, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMAudio.AddRef">
            <summary> 
            Increase a reference count of the sample.
            </summary>
        </member>
        <member name="P:PXCMAudio.info">
            <summary>
             Properties
            </summary>
        </member>
        <member name="T:PXCMAudio.AudioData">
            <summary> 
            AudioData
            Describes the audio storage details.
            </summary>
        </member>
        <member name="T:PXCMAudio.AudioFormat">
            <summary> 
            AudioFormat
            Describes the audio sample format
            </summary>
        </member>
        <member name="T:PXCMAudio.ChannelMask">
            <summary> 
            ChannelMask
            Describes the channels of the audio source.
            </summary>
        </member>
        <member name="T:PXCMAudio.AudioInfo">
            <summary> 
            AudioInfo
            Describes the audio sample details.
            </summary>
        </member>
        <member name="T:PXCMAudio.Option">
            <summary> 
            Option
            Describes the audio options.
            </summary>
        </member>
        <member name="T:PXCMAudio.Access">
            <summary> 
            Access
            Describes the audio sample access mode.
            </summary>
        </member>
        <member name="M:PXCMAudioSource.ScanDevices">
            <summary>
            Scan the availble audio devices.
            </summary>
            <returns> the number of audio devices.</returns>
        </member>
        <member name="M:PXCMAudioSource.QueryDeviceNum">
            <summary>
            Get the number of available audio devices previously scanned.
            </summary>
            <returns> the number of audio devices.</returns>
        </member>
        <member name="M:PXCMAudioSource.QueryDeviceInfo(System.Int32,PXCMAudioSource.DeviceInfo@)">
            <summary>
            Enumerate the audio devices previously scanned.
            </summary>
            <param name="didx"> The zero-based index to enumerate all devices.</param>
            <param name="dinfo"> The DeviceInfo structure to return the device information.</param>
            <returns> PXCM_STATUS_NO_ERROR				Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE		No more devices.	</returns>
        </member>
        <member name="M:PXCMAudioSource.QueryDeviceInfo(PXCMAudioSource.DeviceInfo@)">
            <summary>
            Get the currnet working device
            </summary>
            <param name="dinfo"> The working device info</param>
            <returns> PXCM_STATUS_NO_ERROR				Successful execution.</returns>
        </member>
        <member name="M:PXCMAudioSource.SetDevice(PXCMAudioSource.DeviceInfo)">
            <summary>
            Set the audio device for subsequent module processing.
            </summary>
            <param name="dinfo"> The audio source</param>
            <returns> PXCM_STATUS_NO_ERROR				Successful execution.</returns>
        </member>
        <member name="M:PXCMAudioSource.QueryVolume">
            <summary>
            Get the audio device volume
            </summary>
            <returns> the volume from 0 (min) to 1 (max).</returns>
        </member>
        <member name="M:PXCMAudioSource.SetVolume(System.Single)">
            <summary>
            Set the audio device volume
            </summary>
            <param name="volume"> The audio volume from 0 (min) to 1 (max).</param>
            <returns> PXCM_STATUS_NO_ERROR Executed successfully.</returns>
        </member>
        <member name="M:PXCMAudioSource.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Constructors and Disposers.
            </summary>
            <param name="instance"></param>
            <param name="delete"></param>
        </member>
        <member name="T:PXCMAudioSource.DeviceInfo">
            <summary>
            DeviceInfo
            This structure describes the audio device information.
            </summary>
        </member>
        <member name="M:PXCMAudioSource.DeviceInfo.#ctor">
            <summary>
            the constructor cleans all fields.
            </summary>
        </member>
        <member name="T:PXCMBlobConfiguration">
            <summary>
            @class PXCMBlobConfiguration
            Retrieve the current configuration of the blob module and set new configuration values.
            @note Changes to PXCBlobConfiguration are applied only when ApplyChanges() is called.
            </summary>
        </member>
        <member name="M:PXCMBlobConfiguration.ApplyChanges">
            <summary>
            Apply the configuration changes to the blob module.
            This method must be called in order for any configuration changes to apply.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - the configuration was not initialized.                        </returns>
        </member>
        <member name="M:PXCMBlobConfiguration.RestoreDefaults">
            <summary>  
            Restore configuration settings to the default values.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - the configuration was not initialized.                  </returns>
        </member>
        <member name="M:PXCMBlobConfiguration.Update">
            <summary>
            Retrieve the blob module's current configuration settings.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - failed to retrieve current configuration.</returns>
        </member>
        <member name="M:PXCMBlobConfiguration.SetSegmentationSmoothing(System.Single)">
            <summary>
            Set the smoothing strength for the segmentation image.
            </summary>
            <param name="smoothingValue"> - a value between 0 (no smoothing) to 1 (very smooth).</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid smoothing value.</returns>
            <see cref="M:PXCMBlobConfiguration.QuerySegmentationSmoothing"/>
        </member>
        <member name="M:PXCMBlobConfiguration.QuerySegmentationSmoothing">
            <summary>
            Get the segmentation image smoothing value.
            </summary>
            <returns> The segmentation image smoothing value.</returns>
            <see cref="M:PXCMBlobConfiguration.SetSegmentationSmoothing(System.Single)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.SetContourSmoothing(System.Single)">
            <summary>
            Sets the contour smoothing value.
            </summary>
            <param name="smoothingValue"> - a value between 0 (no smoothing) to 1 (very smooth).</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid smoothing value.</returns>
            <see cref="M:PXCMBlobConfiguration.QueryContourSmoothing"/>
        </member>
        <member name="M:PXCMBlobConfiguration.QueryContourSmoothing">
            <summary>
            Get the contour smoothing value.
            </summary>
            <returns> The contour smoothing value.</returns>
            <see cref="M:PXCMBlobConfiguration.SetContourSmoothing(System.Single)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PXCMBlobConfiguration.SetMaxBlobs(System.Int32)" -->
        <member name="M:PXCMBlobConfiguration.QueryMaxBlobs">
            <summary>
            Get the maximal number of blobs that can be detected.
            </summary>
            <returns> The maximal number of blobs that can be detected.</returns>
            <see cref="M:PXCMBlobConfiguration.SetMaxBlobs(System.Int32)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.SetMaxDistance(System.Single)">
            <summary> 
            Set the maximal distance in meters of a detected blob from the sensor. 
            Only objects that are within this limit will be identified as blobs.
            </summary>
            <param name="maxDistance"> - the maximal distance in meters of a blob from the sensor</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid maxDistance value (in this case, the last valid value will be retained).</returns>
            <see cref="M:PXCMBlobConfiguration.QueryMaxDistance"/>
        </member>
        <member name="M:PXCMBlobConfiguration.QueryMaxDistance">
            <summary> 
            Get the maximal distance in meters of a detected blob from the sensor. 
            </summary>
            <returns> The maximal distance of a detected blob from the sensor.</returns>
            <see cref="M:PXCMBlobConfiguration.SetMaxDistance(System.Single)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.SetMaxObjectDepth(System.Single)">
            <summary>
            Set the maximal depth in meters of a blob (maximal distance between closest and farthest points in the blob).
            </summary>
            <param name="maxDepth"> - the maximal depth in meters of the blob.</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid maxDepth value (in this case, the last valid value will be retained).</returns>
            <see cref="M:PXCMBlobConfiguration.QueryMaxObjectDepth"/>
        </member>
        <member name="M:PXCMBlobConfiguration.QueryMaxObjectDepth">
            <summary> 
            Get the maximal depth in meters of a blob.
            </summary>
            <returns> The maximal depth in meters of a blob.</returns>
            <see cref="M:PXCMBlobConfiguration.SetMaxObjectDepth(System.Single)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.SetMinPixelCount(System.Int32)">
            <summary> 
            Set the minimal blob size in pixels.
            Only objects that are larger than this size are identified as blobs.
            </summary>
            <param name="minBlobSize"> - the minimal blob size in pixels (cannot be more than a quarter of the image size in pixels).</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid minBlobSize value (in this case, the last valid value will be retained).</returns>
            <see cref="M:PXCMBlobConfiguration.QueryMinPixelCount"/>
        </member>
        <member name="M:PXCMBlobConfiguration.QueryMinPixelCount">
            <summary> 
            Get the minimal blob size in pixels.
            </summary>
            <returns> The minimal blob size in pixels.</returns>
            <see cref="M:PXCMBlobConfiguration.SetMinPixelCount(System.Int32)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.EnableSegmentationImage(System.Boolean)">
            <summary>
            Enable extraction of the segmentation image.
            </summary>
            <param name="enableFlag"> - set to true if the segmentation image should be extracted; otherwise set to false.</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <see cref="M:PXCMBlobConfiguration.IsSegmentationImageEnabled"/>
        </member>
        <member name="M:PXCMBlobConfiguration.IsSegmentationImageEnabled">
            <summary>
            Return the segmentation image extraction flag.
            </summary>
            <returns> The segmentation image extraction flag.</returns>
            <see cref="M:PXCMBlobConfiguration.EnableSegmentationImage(System.Boolean)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.EnableContourExtraction(System.Boolean)">
            <summary>
            Enable extraction of the contour data.
            </summary>
            <param name="enableFlag"> - set to true if contours should be extracted; otherwise set to false.</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <see cref="M:PXCMBlobConfiguration.IsContourExtractionEnabled"/>
        </member>
        <member name="M:PXCMBlobConfiguration.IsContourExtractionEnabled">
            <summary>
            Return the contour extraction flag.
            </summary>
            <returns> The contour extraction flag.</returns>
            <see cref="M:PXCMBlobConfiguration.EnableContourExtraction(System.Boolean)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.SetMinContourSize(System.Int32)">
            <summary> 
            Set the minimal contour size in points.
            Objects with external contours that are smaller than the limit are not identified as blobs.
            </summary>
            <param name="minContourSize"> - the minimal contour size in points.</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid minContourSize value (in this case, the last valid value will be retained).</returns>
            <see cref="M:PXCMBlobConfiguration.QueryMinContourSize"/>
        </member>
        <member name="M:PXCMBlobConfiguration.QueryMinContourSize">
            <summary> 
            Get the minimal contour size in points.
            </summary>
            <returns> The minimal contour size in points.</returns>
            <see cref="M:PXCMBlobConfiguration.SetMinContourSize(System.Int32)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.EnableStabilizer(System.Boolean)">
            <summary>
            Enable or disable the stabilization feature.\n
            
            Enabling this feature produces smoother tracking of the extremity points, ignoring small shifts and "jitters".\n
            @Note: in some cases the tracking may be less sensitive to minor movements and some blob pixels may be outside of the extremities. 
            </summary>
            <param name="enableFlag"> - true to enable the stabilization; false to disable it.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
        </member>
        <member name="M:PXCMBlobConfiguration.IsStabilizerEnabled">
            <summary>
            Return blob stabilizer activation status.
            </summary>
            <returns> true if blob stabilizer is enabled, false otherwise.</returns>
        </member>
        <member name="M:PXCMBlobConfiguration.SetMaxPixelCount(System.Int32)">
            <summary> 
            Set the maximal blob size in pixels.
            Only objects that are smaller than this size are identified as blobs.
            </summary>
            <param name="maxBlobSize"> - the maximal blob size in pixels.</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid maxBlobSize value (in this case, the last valid value will be retained).</returns>
            <see cref="M:PXCMBlobConfiguration.QueryMaxPixelCount"/>
        </member>
        <member name="M:PXCMBlobConfiguration.QueryMaxPixelCount">
            <summary> 
            Get the maximal blob size in pixels.
            </summary>
            <returns> The maximal blob size in pixels.</returns>
            <see cref="M:PXCMBlobConfiguration.SetMinPixelCount(System.Int32)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.SetMaxBlobArea(System.Single)">
            <summary> 
            Set the maximal blob area in square meter.
            Only objects that are smaller than this area are identified as blobs.
            </summary>
            <param name="maxBlobArea"> - the maximal blob area in square meter.</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid maxBlobArea value (in this case, the last valid value will be retained).</returns>
            <see cref="M:PXCMBlobConfiguration.QueryMaxBlobArea"/>
        </member>
        <member name="M:PXCMBlobConfiguration.QueryMaxBlobArea">
            <summary> 
            Get the maximal blob area in square meter.
            </summary>
            <returns> The maximal blob area in square meter.</returns>
            <see cref="M:PXCMBlobConfiguration.SetMaxBlobArea(System.Single)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.SetMinBlobArea(System.Single)">
            <summary> 
            Set the minimal blob area in square meter.
            Only objects that are larger than this area are identified as blobs.
            </summary>
            <param name="minBlobArea"> - the minimal blob area in square meter.</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid minBlobArea value (in this case, the last valid value will be retained).</returns>
            <see cref="M:PXCMBlobConfiguration.QueryMinBlobArea"/>
        </member>
        <member name="M:PXCMBlobConfiguration.QueryMinBlobArea">
            <summary> 
            Get the minimal blob area in square meter.
            </summary>
            <returns> The minimal blob area in square meter.</returns>
            <see cref="M:PXCMBlobConfiguration.SetMinBlobArea(System.Single)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.SetBlobSmoothing(System.Single)">
            <summary>
            Set the smoothing strength for the blob extraction.
            </summary>
            <param name="smoothingValue"> - a value between 0 (no smoothing) to 1 (strong smoothing).</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid smoothing value (in this case, the last valid value will be retained).</returns>
            <see cref="M:PXCMBlobConfiguration.QueryBlobSmoothing"/>
        </member>
        <member name="M:PXCMBlobConfiguration.QueryBlobSmoothing">
            <summary>
            Get the segmentation blob smoothing value.
            </summary>
            <returns> The segmentation image smoothing value.</returns>
            <see cref="M:PXCMBlobConfiguration.SetBlobSmoothing(System.Single)"/>
        </member>
        <member name="M:PXCMBlobConfiguration.EnableColorMapping(System.Boolean)">
            <summary>
            Enable blob data extraction correlated to color stream.
            </summary>
            <param name="enableFlag"> - set to true if color mapping should be extracted; otherwise set to false.</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <see cref="M:PXCMBlobConfiguration.IsColorMappingEnabled"/>
            <see cref="!:QueryBlob"/>
            <see cref="!:SegmentationImageType"/>		
        </member>
        <member name="M:PXCMBlobConfiguration.IsColorMappingEnabled">
            <summary>
            Return the color mapping extraction flag.
            </summary>
            <returns> The color mapping extraction flag.</returns>
            <see cref="M:PXCMBlobConfiguration.EnableColorMapping(System.Boolean)"/>
        </member>
        <member name="T:PXCMBlobData">
            <summary>
            @Class PXCMBlobData 
            A class that contains extracted blob and contour line data.
            The extracted data refers to the sensor's frame image at the time PXCBlobModule.CreateOutput() was called.
            </summary>
        </member>
        <member name="M:PXCMBlobData.Update">
            <summary>
            Updates the extracted blob data to the latest available output. 
            </summary>
            
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED  - when the BlobData is not available. </returns>
        </member>
        <member name="M:PXCMBlobData.QueryNumberOfBlobs">
            <summary> 
            Get the number of extracted blobs.    
            </summary>
            <returns> The number of extracted blobs.</returns>
        </member>
        <member name="M:PXCMBlobData.QueryBlobByAccessOrder(System.Int32,PXCMBlobData.AccessOrderType,PXCMBlobData.IBlob@)">
            <summary>
            Retrieve an IBlob object using a specific AccessOrder and index (that relates to the given order).
            </summary>
            <param name="index"> - the zero-based index of the requested blob (between 0 and QueryNumberOfBlobs()-1 ).</param>
            <param name="accessOrder"> - the order in which the blobs are enumerated.</param>
            <param name="blobData"> - contains the extracted blob and contour line data.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - index &gt;= configured maxBlobs.</returns>
            <returns> PXCM_STATUS_DATA_UNAVAILABLE  - index &gt;= number of detected blobs.  </returns>
            
            <see cref="T:PXCMBlobData.AccessOrderType"/>
        </member>
        <member name="M:PXCMBlobData.QueryBlob(System.Int32,PXCMBlobData.SegmentationImageType,PXCMBlobData.AccessOrderType,PXCMBlobData.IBlob@)">
            <summary>
            Retrieve an IBlob object using a specific AccessOrder and index (that relates to the given order).
            </summary>
            <param name="index"> - the zero-based index of the requested blob (between 0 and QueryNumberOfBlobs()-1 ).</param>
            <param name="segmentationImageType"> - the image type which the blob will be mapped to. To get data mapped to color see PXCBlobConfiguration::EnableColorMapping.</param>
            <param name="accessOrder"> - the order in which the blobs are enumerated.</param>
            <param name="blobData"> - contains the extracted blob data.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - index &gt;= configured maxBlobs.</returns>
            <returns> PXCM_STATUS_DATA_UNAVAILABLE  - index &gt;= number of detected blobs or blob data is invalid.  </returns>
            
            <see cref="T:PXCMBlobData.AccessOrderType"/>
            <see cref="T:PXCMBlobData.SegmentationImageType"/>
        </member>
        <member name="T:PXCMBlobData.IContour">
            <summary> 
            @class IContour
            An interface that provides access to the contour line data.
            A contour is represented by an array of 2D points, which are the vertices of the contour's polygon.
            </summary>
        </member>
        <member name="M:PXCMBlobData.IContour.QueryPoints(PXCMPointI32[]@)">
            <summary> 
            Get the point array representing a contour line.
            </summary>
            
            <param name="maxSize"> - the size of the array allocated for the contour points.</param>
            <param name="contour"> - the contour points stored in the user-allocated array.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - successful operation.        </returns>
        </member>
        <member name="M:PXCMBlobData.IContour.IsOuter">
            <summary> 
            Return true for the blob's outer contour; false for inner contours.
            </summary>
            <returns> true for the blob's outer contour; false for inner contours.</returns>
        </member>
        <member name="M:PXCMBlobData.IContour.QuerySize">
            <summary> 
            Get the contour size (number of points in the contour line).
            This is the size of the points array that you should allocate.
            </summary>
            <returns> The contour size (number of points in the contour line).</returns>
        </member>
        <member name="T:PXCMBlobData.IBlob">
            <summary> 
            @class IBlob
            An interface that provides access to the blob and contour line data.
            </summary>
        </member>
        <member name="M:PXCMBlobData.IBlob.QuerySegmentationImage(PXCMImage@)">
            <summary>			
            Retrieves the 2D segmentation image of a tracked blob. 	 
            In the segmentation image, each pixel occupied by the blob is white (value of 255) and all other pixels are black (value of 0).
            </summary>
            <param name="image"> - the segmentation image of the tracked blob.</param>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_DATA_UNAVAILABLE - the segmentation image is not available.		</returns>
        </member>
        <member name="M:PXCMBlobData.IBlob.QueryExtremityPoint(PXCMBlobData.ExtremityType)">
            <summary>         
            Get an extremity point location using a specific ExtremityType.
            </summary>
            <param name="extremityLabel"> - the extremity type to be retrieved.</param>
            <returns> The extremity point location data.        </returns>
            <see cref="T:PXCMBlobData.ExtremityType"/>       
        </member>
        <member name="M:PXCMBlobData.IBlob.QueryPixelCount">
            <summary> 
            Get the number of pixels in the blob.
            </summary>
            <returns> The number of pixels in the blob.</returns>
        </member>
        <member name="M:PXCMBlobData.IBlob.QueryNumberOfContours">
            <summary> 
            Get the number of contour lines extracted (both external and internal).
            </summary>
            <returns> The number of contour lines extracted.</returns>
        </member>
        <member name="M:PXCMBlobData.IBlob.QueryContourPoints(System.Int32,PXCMPointI32[]@)">
            <summary> 
            Get the point array representing a contour line.
            
            A contour is represented by an array of 2D points, which are the vertices of the contour's polygon.
            </summary>
            
            <param name="index"> - the zero-based index of the requested contour line (the maximal value is QueryNumberOfContours()-1).</param>
            <param name="maxSize"> - the size of the array allocated for the contour points.</param>
            <param name="contour"> - the contour points stored in the user-allocated array.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - the given index or the user-allocated array is invalid.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE - processImage() is running.</returns>
        </member>
        <member name="M:PXCMBlobData.IBlob.IsContourOuter(System.Int32)">
            <summary> 
            Return true for the blob's outer contour; false for inner contours.
            </summary>
            <param name="index"> - the zero-based index of the requested contour.</param>
            <returns> true for the blob's outer contour; false for inner contours.</returns>
        </member>
        <member name="M:PXCMBlobData.IBlob.QueryContourSize(System.Int32)">
            <summary> 
            Get the contour size (number of points in the contour line).
            This is the size of the points array that you should allocate.
            </summary>
            <param name="index"> - the zero-based index of the requested contour line.</param>
            <returns> The contour size (number of points in the contour line).</returns>
        </member>
        <member name="M:PXCMBlobData.IBlob.QueryContour(System.Int32,PXCMBlobData.IContour@)">
            <summary>
            Retrieve an IContour object using index (that relates to the given order).
            </summary>
            <param name="index"> - the zero-based index of the requested contour (between 0 and QueryNumberOfContours()-1 ).</param>
            <param name="contourData"> - contains the extracted contour line data.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_DATA_UNAVAILABLE  - index &gt;= number of detected contours. </returns>
            
            <see cref="T:PXCMBlobData.IContour"/>       
        </member>
        <member name="M:PXCMBlobData.IBlob.QueryBoundingBoxImage">
            <summary>	
            Return the location and dimensions of the blob, represented by a 2D bounding box (defined in pixels).
            </summary>
            <returns> The location and dimensions of the 2D bounding box.</returns>
        </member>
        <member name="M:PXCMBlobData.IBlob.QueryBoundingBoxWorld">
            <summary>	
            Return the location and dimensions of the blob, represented by a 3D bounding box.
            </summary>
            <returns> The location and dimensions of the 3D bounding box.</returns>
        </member>
        <member name="T:PXCMBlobData.AccessOrderType">
            <summary> 
            AccessOrderType
            Each AccessOrderType value indicates the order in which the extracted blobs can be accessed.
            Use one of these values when calling QueryBlobByAccessOrder().
            </summary>
        </member>
        <member name="F:PXCMBlobData.AccessOrderType.ACCESS_ORDER_LARGE_TO_SMALL">
            From the nearest to the farthest blob in the scene  
        </member>
        <member name="F:PXCMBlobData.AccessOrderType.ACCESS_ORDER_RIGHT_TO_LEFT">
            From the largest to the smallest blob in the scene   				
        </member>
        <member name="T:PXCMBlobData.ExtremityType">
            <summary>
            ExtremityType
            The identifier of an extremity point of the extracted blob.
            6 extremity points are identified (see values below).\n
            Use one of the extremity types when calling IBlob.QueryExtremityPoint().
            </summary>
        </member>
        <member name="F:PXCMBlobData.ExtremityType.EXTREMITY_LEFT_MOST">
            The closest point to the sensor in the tracked blob
        </member>
        <member name="F:PXCMBlobData.ExtremityType.EXTREMITY_RIGHT_MOST">
            The left-most point of the tracked blob
        </member>
        <member name="F:PXCMBlobData.ExtremityType.EXTREMITY_TOP_MOST">
            The right-most point of the tracked blob 
        </member>
        <member name="F:PXCMBlobData.ExtremityType.EXTREMITY_BOTTOM_MOST">
            The top-most point of the tracked blob
        </member>
        <member name="F:PXCMBlobData.ExtremityType.EXTREMITY_CENTER">
            The bottom-most point of the tracked blob
        </member>
        <member name="T:PXCMBlobData.SegmentationImageType">
            <summary>
            SegmentationImageType
            Each SegmentationImageType value indicates the extracted blobs data mapping.
            Use one of these values when calling QueryBlob().
            </summary>
        </member>
        <member name="F:PXCMBlobData.SegmentationImageType.SEGMENTATION_IMAGE_COLOR">
            The blob data mapped to depth image
        </member>
        <member name="T:PXCMBlobExtractor">
            <summary>
            @class PXCMBlobExtractor
            A utility for extracting mask images (blobs) of objects in front of the camera.
            Given a depth image, this utility will find the largest objects that are "close enough" to the camera.
            For each object a segmentation mask image will be created, that is, all object pixels will be "white" (255) 
            and all other pixels will be "black" (0).
            The maximal number of blobs that can be extracted is 2.
            The order of the blobs will be from the largest to the smallest (in number of pixels)
            </summary>
        </member>
        <member name="M:PXCMBlobExtractor.Init(PXCMImage.ImageInfo)">
            <summary>
            initialize PXCMBlobExtractor instance for a specific image type (size)
            </summary>
            <param name="imageInfo"> definition of the images that should be processed</param>
            <see cref="T:PXCMImage.ImageInfo"/> 
        </member>
        <member name="M:PXCMBlobExtractor.ProcessImage(PXCMImage)">
            <summary>			
            Extract the 2D image mask of the blob in front of the camera. 	 
            In the image mask, each pixel occupied by the blob's is white (set to 255) and all other pixels are black (set to 0).
            </summary>
            <param name="depthImage"> the depth image to be segmented</param>
            <returns> PXC_STATUS_NO_ERROR if a valid depth exists and could be segmented; otherwise, return the following error:
            PXCM_STATUS_DATA_UNAVAILABLE - if image is not available or PXCM_STATUS_ITEM_UNAVAILABLE if processImage is running or PXCMBlobExtractor was not initialized.	</returns>	
        </member>
        <member name="M:PXCMBlobExtractor.QueryBlobData(System.Int32,PXCMImage,PXCMBlobExtractor.BlobData@)">
            <summary>
            Retrieve the 2D image mask of the blob and its associated blob data
            The blobs are ordered from the largest to the smallest (in number of pixels)
            </summary>
            <see cref="T:PXCMBlobExtractor.BlobData"/> 
            <param name="index"> the zero-based index of the requested blob (has to be between 0 to number of blobs)</param>
            <param name="segmentationImage"> the 2D image mask of the requested blob</param>
            <param name="blobData"> the data of the requested blob</param>
            <returns> PXCM_STATUS_NO_ERROR if index is valid and processImage terminated successfully; otherwise, return the following error:
            PXCM_STATUS_PARAM_UNSUPPORTED if index is invalid or PXCM_STATUS_ITEM_UNAVAILABLE if processImage is running or PXCMBlobExtractor was not initialized.</returns>
        </member>
        <member name="M:PXCMBlobExtractor.SetMaxBlobs(System.Int32)">
            <summary> 
            Set the maximal number of blobs that can be detected 
            The default number of blobs that will be detected is 1
            </summary>
            <param name="maxBlobs"> the maximal number of blobs that can be detected (limited to 2)</param>
            <returns> PXCM_STATUS_NO_ERROR if maxBlobs is valid; otherwise, return the following error:
            PXCM_STATUS_PARAM_UNSUPPORTED, maxBlobs will remain the last valid value</returns>
        </member>
        <member name="M:PXCMBlobExtractor.QueryMaxBlobs">
            <summary>
            Get the maximal number of blobs that can be detected 	
            </summary>
            <returns> the maximal number of blobs that can be detected 	</returns>
        </member>
        <member name="M:PXCMBlobExtractor.QueryNumberOfBlobs">
            <summary> 
            Get the number of detected blobs  	
            </summary>
            <returns> the number of detected blobs  	</returns>
        </member>
        <member name="M:PXCMBlobExtractor.SetMaxDistance(System.Single)">
            <summary> 
            Set the maximal distance limit from the camera. 
            Blobs will be objects that appear between the camera and the maxDistance limit.
            </summary>
            <param name="maxDistance"> the maximal distance from the camera (has to be a positive value)</param>
            <returns> PXCM_STATUS_NO_ERROR if maxDistance is valid; otherwise, return the following error:
            PXCM_STATUS_PARAM_UNSUPPORTED, maxDistance will remain the last valid value</returns>
        </member>
        <member name="M:PXCMBlobExtractor.QueryMaxDistance">
            <summary> 
            Get the maximal distance from the camera, in which an object can be detected and segmented
            </summary>
            <returns> maximal distance from the camera</returns>
        </member>
        <member name="M:PXCMBlobExtractor.SetMaxObjectDepth(System.Single)">
            <summary>
            Set the maximal depth of a blob (maximal distance between closest and furthest points on blob)
            </summary>
            <param name="maxDepth"> the maximal depth of the blob (has to be a positive value)</param>
            <returns> PXCM_STATUS_NO_ERROR if maxDepth is valid; otherwise, return the following error:
            PXCM_STATUS_PARAM_UNSUPPORTED, maxDepth will remain the last valid value</returns>
        </member>
        <member name="M:PXCMBlobExtractor.QueryMaxObjectDepth">
            <summary> 
            Get the maximal depth of the blob that can be detected and segmented
            </summary>
            <returns> maximal depth of the blob</returns>
        </member>
        <member name="M:PXCMBlobExtractor.SetSmoothing(System.Single)">
            <summary> 
            Set the smoothing level of the shape of the blob
            The smoothing level ranges from 0 to 1, when 0 means no smoothing, and 1 implies a very smooth contour
            </summary>
            <param name="smoothing"> the smoothing level</param>
            <returns> PXCM_STATUS_NO_ERROR if smoothing is valid; otherwise, return the following error:
            PXCM_STATUS_PARAM_UNSUPPORTED, smoothing level will remain the last valid value</returns>
        </member>
        <member name="M:PXCMBlobExtractor.QuerySmoothing">
            <summary> 
            Get the smoothing level of the blob (0-1) 
            </summary>
            <returns> smoothing level of the blob</returns>
        </member>
        <member name="M:PXCMBlobExtractor.SetClearMinBlobSize(System.Single)">
            <summary> 
            Set the minimal blob size in pixels
            Any blob that is smaller than threshold will be cleared during "ProcessImage".
            </summary>
            <param name="minBlobSize"> the minimal blob size in pixels (cannot be more than a quarter of image-size)</param>
            <returns> PXCM_STATUS_NO_ERROR if minBlobSize is valid; otherwise, return the following error:
            PXCM_STATUS_PARAM_UNSUPPORTED, minimal blob size will remain the last valid size</returns>
        </member>
        <member name="M:PXCMBlobExtractor.QueryClearMinBlobSize">
            <summary> 
            Get the minimal blob size in pixels
            </summary>
            <returns> minimal blob size</returns>
        </member>
        <member name="T:PXCMBlobExtractor.BlobData">
            <summary> 
            BlobData
            Contains the parameters that define a blob
            </summary>
        </member>
        <member name="F:PXCMBlobExtractor.BlobData.leftPoint">
            Image coordinates of the closest point in the blob
        </member>
        <member name="F:PXCMBlobExtractor.BlobData.rightPoint">
            Image coordinates of the left-most point in the blob
        </member>
        <member name="F:PXCMBlobExtractor.BlobData.topPoint">
            Image coordinates of the right-most point in the blob
        </member>
        <member name="F:PXCMBlobExtractor.BlobData.bottomPoint">
            Image coordinates of the top point in the blob
        </member>
        <member name="F:PXCMBlobExtractor.BlobData.centerPoint">
            Image coordinates of the bottom point in the blob
        </member>
        <member name="F:PXCMBlobExtractor.BlobData.pixelCount">
            Image coordinates of the center of the blob
        </member>
        <member name="T:PXCMBlobModule">
            <summary>
            @Class PXCMBlobModule 
            The main interface to the blob module's classes.
            
            The blob module allows you to extract "blobs" (silhouettes of objects identified by the sensor) and their contour lines.
            Use the PXCBlobModule interface to access to the module's configuration and blob and contour line data.
            </summary>
        </member>
        <member name="M:PXCMBlobModule.CreateActiveConfiguration">
            <summary> 
            Create a new instance of the blob module's active configuration.
            Use the PXCBlobConfiguration object to examine the current configuration or to set new configuration values.
            </summary>
            <returns> A pointer to the configuration instance.</returns>
            <see cref="T:PXCMBlobConfiguration"/> 
        </member>
        <member name="M:PXCMBlobModule.CreateOutput">
            <summary> 
            Create a new instance of the blob module's output data (extracted blobs and contour lines).
            </summary>
            <returns> A pointer to a PXCBlobData instance.</returns>
            <see cref="T:PXCMBlobData"/>
        </member>
        <member name="M:PXCMCalibration.QueryStreamProjectionParameters(PXCMCapture.StreamType,PXCMCalibration.StreamCalibration@,PXCMCalibration.StreamTransform@)">
            <summary> 
            Query camera calibration and transformation data for a sensor.
            </summary> 
            <param name="streamType"> The stream type which is produced by the sensor.</param>
            <param name="calibration"> The intrinsics calibration parameters of the sensor.</param>
            <param name="transformation"> The extrinsics parameters from the sensor to the camera coordinate system origin.</param>
            <returns> PXCM_STATUS_NO_ERROR Successful execution.</returns>
        </member>
        <member name="M:PXCMCalibration.QueryStreamProjectionParametersEx(PXCMCapture.StreamType,PXCMCapture.Device.StreamOption,PXCMCalibration.StreamCalibration@,PXCMCalibration.StreamTransform@)">
            <summary>
            Query camera calibration and transformation data for a sensor according to user defined options.
            </summary>
            <param name="streamType"> The stream type which is produced by the sensor.</param>
            <param name="options"> The options that selects specific calibration and transformation data which is produced by the sensor.</param>
            <param name="calibration"> The intrinsics calibration parameters of the sensor.</param>
            <param name="transformation"> The extrinsics transformation parameters from the sensor to the camera coordinate system origin.</param>
            <returns> PXCM_STATUS_NO_ERROR Successful execution.</returns>
        </member>
        <member name="T:PXCMCapture">
            <summary>
            This interface provides member functions to create instances of and query stream capture devices.
            </summary>  
        </member>
        <member name="M:PXCMCapture.QueryDeviceInfo(System.Int32,PXCMCapture.DeviceInfo@)">
                        @brief Return the device infomation structure for a given device.
                        @param[in]	didx					The zero-based device index.
                        @param[out] dinfo					The pointer to the DeviceInfo structure, to be returned.
                        @return PXCM_STATUS_NO_ERROR	    Successful execution.
                        @return PXCM_STATUS_ITEM_UNAVAILABLE  The specified index does not exist.
        </member>
        <member name="M:PXCMCapture.SubscribeToCaptureCallbacks(PXCMCapture.Handler)">
            	        @brief    The function subscribes a handler for Capture callbacks. supports subscription of multiple callbacks.
            	        @param[in] Handler     handler instance for Capture callbacks.
            	        @return the status of the handler subscription.
        </member>
        <member name="M:PXCMCapture.UnsubscribeToCaptureCallbacks(PXCMCapture.Handler)">
                        @brief    The function unsubscribes a handler from the Capture callbacks. the rest of the handlers will still be triggered.
                        @param[in] handler     handler instance of Capture callbacks to unsubscirbe.
                        @return the status of the handler unsubscription.
        </member>
        <member name="M:PXCMCapture.StreamTypeToString(PXCMCapture.StreamType)">
            <summary> Get the stream type string representation </summary>
            <param name="stream">The stream type</param>
            <returns>The corresponding string representation</returns>
        </member>
        <member name="M:PXCMCapture.StreamTypeFromIndex(System.Int32)">
            <summary> Get the stream type from an index number. </summary>
            <param name="index"> The strream index. </param>
            <returns> The corresponding stream type.</returns>
        </member>
        <member name="M:PXCMCapture.StreamTypeToIndex(PXCMCapture.StreamType)">
            <summary> 
            Get the stream index number
            </summary>
            <param name="StreamType"> The stream type</param>
            <returns> The stream index numebr.</returns>
        </member>
        <member name="M:PXCMCapture.QueryDeviceNum">
            <summary> 
            	Return the number of devices.
            </summary>
            <returns> the number of available devices</returns>
        </member>
        <member name="M:PXCMCapture.CreateDevice(System.Int32)">
            <summary> 
            	Activate the device and return the video device instance.
            </summary>
            <param name="didx"> The zero-based device index</param>
            <returns> The device instance.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDeviceInfo(PXCMCapture.DeviceInfo@)">
                            @brief Return the device infomation structure of the current device.
                            @param[out] dinfo					The pointer to the DeviceInfo structure, to be returned.
        </member>
        <member name="M:PXCMCapture.Device.QueryStreamProfileSetNum(PXCMCapture.StreamType)">
            <summary>
            Get the number of valid stream configurations for the streams of interest.
            </summary>
            <param name="scope"> The bit-OR'ed value of stream types of interest. </param>
            <returns> the number of valid profile combinations. </returns>
        </member>
        <member name="M:PXCMCapture.Device.IsStreamProfileSetValid(PXCMCapture.Device.StreamProfileSet)">
            <summary>
            Check if profile set is valid.
            </summary>
            <param name="profiles"> The stream profile set to check </param>
            <returns>
             true	if stream profile is valid. 
             false if stream profile is invalid. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryStreamProfileSet(PXCMCapture.StreamType,System.Int32,PXCMCapture.Device.StreamProfileSet@)">
            <summary>
            Query the unique configuration parameters for the selected video streams (types).
            </summary>
            <param name="scope"> The bit-OR'ed value of stream types of interest. </param>
            <param name="index"> Zero-based index to retrieve all valid profiles. </param>
            <param name="profiles"> The stream profile set. </param>
            <returns>
             PXCM_STATUS_NO_ERROR for successful execution. 
             PXCM_STATUS_ITEM_UNAVAILABLE if index out of range. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryStreamProfileSet(PXCMCapture.Device.StreamProfileSet@)">
            <summary>
            Query for the active stream configuration parameters (during streaming).
            </summary>
            <param name="profiles"> The stream profile set, to be returned. </param>
            <returns> PXCM_STATUS_NO_ERROR for successful execution. </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetStreamProfileSet(PXCMCapture.Device.StreamProfileSet)">
            <summary>
            Set the active profile for the all video streams. The application must configure all streams before streaming.
            </summary>
            <param name="profiles"> The stream profile set. </param>
            <returns> PXCM_STATUS_NO_ERROR successful execution. </returns>
        </member>
        <member name="M:PXCMCapture.Device.ResetProperties(PXCMCapture.StreamType)">
            <summary>
            Reset the device properties to their factory default values.
            </summary>
            <param name="streams"> The stream type to reset properties, or STREAM_TYPE_ANY for all streams. </param>
        </member>
        <member name="M:PXCMCapture.Device.RestorePropertiesUponFocus">
            <summary>
            Restore all device properties to what the application sets. Call this function upon receiving windows focus.
            </summary>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorExposure">
            <summary>
            Get the color stream exposure value.
            </summary>
            <returns> The color stream exposure, in log base 2 seconds. </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorExposureInfo">
            <summary>
            Get the color stream exposure property information.
            </summary>
            <returns> The color stream exposure property information </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorExposure(System.Int32)">
            <summary>
            Set the color stream exposure value.
            </summary>
            <param name="value"> The color stream exposure value, in log base 2 seconds. </param>
            <returns>
             PXCM_STATUS_NO_ERROR	for successful execution. 
             PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorAutoExposure(System.Boolean)">
            <summary>
            Set the color stream exposure value.
            </summary>
            <param name="auto1"> True to enable auto exposure. </param>
            <returns>
            PXCM_STATUS_NO_ERROR for successful execution. 
            PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorAutoExposure">
            <summary>
             Query the color stream auto exposure value.
            </summary>
            <returns> exposure auto mode </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorBrightness">
            <summary>
            Get the color stream brightness value.
            </summary>
            <returns> The color stream brightness from  -10,000 (pure black) to 10,000 (pure white). </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorBrightnessInfo">
            <summary>
            Get the color stream brightness property information.
            </summary>
            <returns> The color stream brightness property information </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorBrightness(System.Int32)">
            <summary>
            Set the color stream brightness value.
            </summary>
            <param name="value"> The color stream brightness from -10,000 (pure black) to 10,000 (pure white). </param>
            <returns>
             PXCM_STATUS_NO_ERROR successful execution.
             PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported.
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorContrast">
            <summary>
            Get the color stream contrast value.
            </summary>
            <returns> The color stream contrast, from 0 to 10,000. </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorContrastInfo">
            <summary>
            Get the color stream contrast property information.
            </summary>
            <returns> The color stream contrast property information </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorContrast(System.Int32)">
            <summary>
            Set the color stream contrast value.
            </summary>
            <param name="value"> The color stream contrast, from 0 to 10,000. </param>
            <returns>
             PXCM_STATUS_NO_ERROR	for successful execution. 
             PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorSaturation">
            <summary>
            Get the color stream saturation value.
            </summary>
            <returns> The color stream saturation, from 0 to 10,000. </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorSaturationInfo">
            <summary>
            Get the color stream saturation property information.
            </summary>
            <returns> The color stream saturation property information. </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorSaturation(System.Int32)">
            <summary>
            Set the color stream saturation value.
            </summary>
            <param name="value"> The color stream saturation, from 0 to 10,000. </param>
            <returns>
             PXCM_STATUS_NO_ERROR for successful execution. 
             PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported.
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorHue">
            <summary>
            Get the color stream hue value.
            </summary>
            <returns> The color stream hue, from -180,000 to 180,000 (representing -180 to 180 degrees.) </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorHueInfo">
            <summary>
            Get the color stream Hue property information.
            </summary>
            <returns> The color stream Hue property information. </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorHue(System.Int32)">
            <summary>
            Set the color stream hue value.
            </summary>
            <param name="value"> The color stream hue, from -180,000 to 180,000 (representing -180 to 180 degrees.) </param>
            <returns>
             PXCM_STATUS_NO_ERROR	for successful execution. 
             PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorGamma">
            <summary>
            Get the color stream gamma value.
            </summary>
            <returns> The color stream gamma, from 1 to 500. </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorGammaInfo">
            <summary>
            Get the color stream gamma property information.
            </summary>
            <returns> The color stream gamma property information </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorGamma(System.Int32)">
            <summary>
            Set the color stream gamma value.
            </summary>
            <param name="value"> The color stream gamma, from 1 to 500. </param>
            <returns>
             PXCM_STATUS_NO_ERROR	for successful execution.
             PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorWhiteBalance">
            <summary>
            Get the color stream white balance value.
            </summary>
            <returns> The color stream balance, as a color temperature in degrees Kelvin. </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorWhiteBalanceInfo">
            <summary>
            Get the color stream  white balance property information.
            </summary>
            <returns> The color stream  white balance property information. </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorWhiteBalance(System.Int32)">
            <summary>
            Set the color stream white balance value.
            </summary>
            <param name="value"> The color stream balance, as a color temperature in degrees Kelvin. </param>
            <returns>
              PXCM_STATUS_NO_ERROR for successful execution. 
             PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported.
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorAutoWhiteBalance">
            <summary>
            Query the color stream auto white balance mode status.
            </summary>
            <returns> White Balance auto mode status. </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorAutoWhiteBalance(System.Boolean)">
            <summary>
            Set the color stream auto white balance mode.
            </summary>
            <param name="auto1"> The flag to tell if the auto is enabled or not.</param>
            <returns>
             PXCM_STATUS_NO_ERROR	for successful execution. 
             PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported.
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorSharpness">
            <summary>
            Get the color stream sharpness value.
            </summary>
            <returns> The color stream sharpness, from 0 to 100. </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorSharpnessInfo">
            <summary>
            Get the color stream Sharpness property information.
            </summary>
            <returns> The color stream Sharpness property information </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorSharpness(System.Int32)">
            <summary>
            Set the color stream sharpness value.
            </summary>
            <param name="value">The color stream sharpness, from 0 to 100. </param>
            <returns>
             PXCM_STATUS_NO_ERROR	for successful execution. 
             PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorBackLightCompensation">
            <summary>
            Get the color stream back light compensation status.
            </summary>
            <returns> The color stream back light compensation status. </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorBackLightCompensationInfo">
            <summary>
            Get the color stream back light compensation property information.
            </summary>
            <returns> The color stream back light compensation property information. </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorBackLightCompensation(System.Int32)">
            <summary>
            Set the color stream back light compensation status.
            </summary>
            <param name="value"> The color stream back light compensation status. </param>
            <returns>
             PXCM_STATUS_NO_ERROR	for successful execution. 
             PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorGain">
            <summary>
            Get the color stream gain value.
            </summary>
            <returns> The color stream gain adjustment, with negative values darker, positive values brighter, and zero as normal. </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorGainInfo">
            <summary>
            Get the color stream gain property information.
            </summary>
            <returns> The color stream gain property information </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorGain(System.Int32)">
            <summary>
            Set the color stream gain value.
            </summary>
            <param name="value"> The color stream gain adjustment, with negative values darker, positive values brighter, and zero as normal. </param>
            <returns>
             PXCM_STATUS_NO_ERROR	for successful execution. 
             PXCM_STATUS_ITEM_UNAVAILABLE if the device property is not supported. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorPowerLineFrequency">
            <summary> 
            Get the color stream power line frequency value.
            </summary>
            <returns> The power line frequency in Hz.</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorPowerLineFrequency(PXCMCapture.Device.PowerLineFrequency)">
            <summary> 
            Set the color stream power line frequency value.
            </summary>
            <param name="value"> The power line frequency in Hz.</param>
            <returns> PXCM_STATUS_NO_ERROR			successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorPowerLineFrequencyDefaultValue">
            <summary> 
            Get the color stream power line frequency Property Info.
            </summary>
            <returns> The power line frequency default value.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorAutoPowerLineFrequency">
            <summary> 
            Query the color stream power line frequency auto value.
            </summary>
            <param name="value"> The power line frequency auto mode status.</param>
            <returns> PowerLineFrequency auto mode status</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetColorAutoPowerLineFrequency(System.Boolean)">
            <summary> 
            Set the color stream auto power line frequency.
            </summary>
            <param name="value"> The power line frequency auto mode.</param>
            <returns> PXCM_STATUS_NO_ERROR             successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE     the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorFieldOfView">
            <summary> 
            Get the color stream field of view.
            </summary>
            <returns> The color-sensor horizontal and vertical field of view parameters, in degrees. </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorFocalLength">
            <summary> 
            Get the color stream focal length.
            </summary>
            <returns> The color-sensor focal length in pixels. The parameters vary with the resolution setting.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorFocalLengthMM">
            <summary> 
            Get the color stream focal length in mm.
            </summary>
            <returns> The color-sensor focal length in mm.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryColorPrincipalPoint">
            <summary> 
            Get the color stream principal point.
            </summary>
            <returns> The color-sensor principal point in pixels. The parameters vary with the resolution setting.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDepthLowConfidenceValue">
            <summary> 
            Get the depth stream low confidence value.
            </summary>
            <returns> The special depth map value to indicate that the corresponding depth map pixel is of low-confidence.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDepthConfidenceThreshold">
            <summary> 
            Get the depth stream confidence threshold.
            </summary>
            <returns> The confidence threshold that is used to floor the depth map values. The range is from 1 to 32767.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDepthConfidenceThresholdInfo">
            <summary> 
            Get the depth stream confidence threshold information.
            </summary>
            <returns> The property information for the confidence threshold that is used to floor the depth map values. The range is from 0 to 15.</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetDepthConfidenceThreshold(System.UInt16)">
            <summary> 
            Set the depth stream confidence threshold.
            </summary>
            <param name="value"> The confidence threshold that is used to floor the depth map values. The range is from 1 to 32767.</param>
            <returns> PXCM_STATUS_NO_ERROR			successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE    the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDepthUnit">
            <summary> 
            Get the depth stream unit value.
            </summary>
            <returns> The unit of depth values in micrometer.</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetDepthUnit(System.Int32)">
            <summary> 
            Set the depth stream unit value.
            </summary>
            <param name="value"> The unit of depth values in micrometre</param>
            <returns> PXCM_STATUS_NO_ERROR             successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE     the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDepthFieldOfView">
            <summary> 
            Get the depth stream field of view.
            </summary>
            <returns> The depth-sensor horizontal and vertical field of view parameters, in degrees. </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDepthSensorRange">
            <summary> 
            Get the depth stream sensor range.
            </summary>
            <returns> The depth-sensor, sensing distance parameters, in millimeters.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDepthFocalLength">
            <summary> 
            Get the depth stream focal length.
            </summary>
            <returns> The depth-sensor focal length in pixels. The parameters vary with the resolution setting.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDepthFocalLengthMM">
            <summary> 
            Get the depth stream focal length in mm.
            </summary>
            <returns> The depth-sensor focal length in mm.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDepthPrincipalPoint">
            <summary> 
            Get the depth stream principal point.
            <returns> The depth-sensor principal point in pixels. The parameters vary with the resolution setting.</returns>
            </summary>
        </member>
        <member name="M:PXCMCapture.Device.QueryDeviceAllowProfileChange">
            <summary> 
            Get the device allow profile change status.
            </summary>
            <returns> If ture, allow resolution change and throw PXCM_STATUS_STREAM_CONFIG_CHANGED.</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetDeviceAllowProfileChange(System.Boolean)">
            <summary> 
            Set the device allow profile change status.
            </summary>
            <param name="value"> If ture, allow resolution change and throw PXCM_STATUS_STREAM_CONFIG_CHANGED.</param>
            <returns> PXCM_STATUS_NO_ERROR			successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE    the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryMirrorMode">
            <summary> 
            Get the mirror mode.
            </summary>
            <returns> The mirror mode</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetMirrorMode(PXCMCapture.Device.MirrorMode)">
            <summary> 
            Set the mirror mode.
            <param name="value"> The mirror mode</param>
            </summary>
            <returns> PXCM_STATUS_NO_ERROR			successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE    the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryIVCAMLaserPower">
            <summary> 
            Get the IVCAM laser power.
            </summary>
            <returns> The laser power value from 0 (minimum) to 16 (maximum).</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryIVCAMLaserPowerInfo">
            <summary> 
            Get the IVCAM laser power property information.
            </summary>
            <returns> The laser power proeprty information. </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetIVCAMLaserPower(System.Int32)">
            <summary> 
            Set the IVCAM laser power.
            </summary>
            <param name="value"> The laser power value from 0 (minimum) to 16 (maximum).</param>
            <returns> PXCM_STATUS_NO_ERROR			successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE    the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryIVCAMAccuracy">
            <summary> 
            Get the IVCAM accuracy.
            </summary>
            <returns> The accuracy value</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetIVCAMAccuracy(PXCMCapture.Device.IVCAMAccuracy)">
            <summary> 
            Set the IVCAM accuracy.
            </summary>
            <param name="value"> The accuracy value</param>
            <returns> PXCM_STATUS_NO_ERROR			successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE    the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryIVCAMAccuracyDefaultValue">
            <summary> 
            Get the IVCAM accuracy property Information.
            </summary>
            <returns> The accuracy value property Information</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryIVCAMFilterOption">
            <summary> 
            Get the IVCAM filter option (smoothing aggressiveness) ranged from 0 (close range) to 7 (far range).
            </summary>
            <returns> The filter option value.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryIVCAMFilterOptionInfo">
            <summary> 
            Get the IVCAM Filter Option property information.
            </summary>
            <returns> The IVCAM Filter Option property information. </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetIVCAMFilterOption(System.Int32)">
            <summary> 
            Set the IVCAM filter option (smoothing aggressiveness) ranged from 0 (close range) to 7 (far range).
            <param name="value"> The filter option value</param>
            </summary>
            <returns> PXC_STATUS_NO_ERROR			successful execution.</returns>
            <returns> PXC_STATUS_ITEM_UNAVAILABLE the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryIVCAMMotionRangeTradeOff">
            <summary> 
            Get the IVCAM motion range trade off option, ranged from 0 (short range, better motion) to 100 (far range, long exposure).
            </summary>
            <returns> The motion range trade option.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryIVCAMMotionRangeTradeOffInfo">
            <summary> 
            Get the IVCAM Filter Option property information.
            </summary>
            <returns> The IVCAM Filter Option property information. </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetIVCAMMotionRangeTradeOff(System.Int32)">
            <summary> 
            Set the IVCAM motion range trade off option, ranged from 0 (short range, better motion) to 100 (far range, long exposure).
            </summary>
            <param name="value"> The motion range trade option.</param>
            <returns> PXC_STATUS_NO_ERROR			successful execution.</returns>
            <returns> PXC_STATUS_ITEM_UNAVAILABLE the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSLeftRightCropping">
            <summary>
            Get the DS Left Right Cropping status.
            </summary>
            <returns> true if enabled</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetDSLeftRightCropping(System.Boolean)">
            <summary>
            enable\disable the DS Left Right Cropping.
            </summary>
            <param name="value"> The setting value</param>
            <returns> PXCM_STATUS_NO_ERROR             successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE     the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSEmitterEnabled">
            <summary>
            Get the DS emitter status
            </summary>
            <returns> true if enabled</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetDSEnableEmitter(System.Boolean)">
            <summary>
            enable\disable the DS Emitter
            </summary>
            <param name="value"> The setting value</param>
            <returns> PXCM_STATUS_NO_ERROR             successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE     the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSDisparityOutputEnabled">
            <summary>
            Get the DS Disparity (inverse distance) Output status
            </summary>
            <returns> true if enabled</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetDSEnableDisparityOutput(System.Boolean)">
            <summary>
            enable\disable DS Disparity Output, Switches the range output mode between distance (Z) and disparity (inverse distance)
            </summary>
            <param name="value"> The setting value</param>
            <returns> PXCM_STATUS_NO_ERROR             successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE     the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSDisparityMultiplier">
            <summary>
            Gets the disparity scale factor used when in disparity output mode. 
            Default value is 32.
            </summary>
            <returns> the disparity scale factor.</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetDSDisparityMultiplier(System.Int32)">
            <summary>
            Sets the disparity scale factor used when in disparity output mode.
            </summary>
            <param name="value"> the disparity scale factor.</param>
            <returns> PXCM_STATUS_NO_ERROR             successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE     the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSDisparityShift">
            <summary>
            Gets the disparity shift used when in disparity output mode.
            </summary>
            <returns> the disparity shift.</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetDSDisparityShift(System.Int32)">
            <summary>
            Sets the disparity shift used when in disparity output mode.
            </summary>
            <param name="value"> the disparity shift.</param>
            <returns> PXCM_STATUS_NO_ERROR             successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE     the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSMinMaxZ">
            <summary>
            Get the current min and max limits of the z.
            <returns> min, max z.</returns>
            </summary>
        </member>
        <member name="M:PXCMCapture.Device.SetDSMinMaxZ(PXCMRangeF32)">
            <summary>
            Set the min and max limits of the z units.
            </summary>
            <param name="value"> The setting value</param>
            <returns> PXCM_STATUS_NO_ERROR             successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE     the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSColorRectificationEnabled">
            <summary>
            Get the color recatification status
            <returns> true if enabled</returns>
            </summary>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSDepthRectificationEnabled">
            <summary>
            Get the depth recatification status
            </summary>
            <returns> true if enabled</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSLeftRightExposure">
            <summary>
            Get DS left and right streams exposure value.
            </summary>
            <returns> DS left and right streams exposure, in log base 2 seconds.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSLeftRightExposureInfo">
            <summary>
            Get DS left and right streams exposure property information.
            </summary>
            <returns> The DS left and right streams exposure property information</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetDSLeftRightExposure(System.Single)">
            <summary> Set DS left and right streams exposure value. </summary>
            <param name="value"> DS left and right streams exposure value, in log base 2 seconds. </param>
            <returns>
                 PXCM_STATUS_NO_ERROR             successful execution. 
                 XCM_STATUS_ITEM_UNAVAILABLE     the device property is not supported. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.SetDSLeftRightAutoExposure(System.Boolean)">
            <summary> Set DS left and right streams exposure value. </summary>
            <param name="auto1"> True to enable auto exposure. </param>
            <returns>
                 PXCM_STATUS_NO_ERROR             successful execution. 
                 XCM_STATUS_ITEM_UNAVAILABLE     the device property is not supported. 
            </returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSLeftRightGain">
            <summary>
            Get DS left and right streams gain value.
            </summary>
            <returns> DS left and right streams gain adjustment, with negative values darker, positive values brighter, and zero as normal.</returns>
        </member>
        <member name="M:PXCMCapture.Device.QueryDSLeftRightGainInfo">
            <summary>
            Get DS left and right streams gain property information.
            </summary>
            <returns> DS left and right streams gain property information</returns>
        </member>
        <member name="M:PXCMCapture.Device.SetDSLeftRightGain(System.Int32)">
            <summary>
            Set DS left and right streams gain value.
            </summary>
            <param name="value"> DS left and right streams gain adjustment, with negative values darker, positive values brighter, and zero as normal.</param>
            <returns> PXCM_STATUS_NO_ERROR             successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE     the device property is not supported.</returns>
        </member>
        <member name="M:PXCMCapture.Device.ReadStreamsAsync(PXCMCapture.StreamType,PXCMCapture.Sample,PXCMSyncPoint@)">
            <summary> 
            Read the selected streams asynchronously. The function returns immediately. The application must
            synchronize SP to get the stream samples. The application can read more than a single stream using the scope
            parameter, provided that all streams have the same frame rate. Otherwise, the function will return error.
            </summary>
            <param name="scope"> The bit-OR'ed value of stream types of interest.</param>
            <param name="sample"> The output sample.</param>
            <param name="sp"> The pointer to the SP to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			successful execution.</returns>
            <returns> PXCM_STATUS_DEVICE_LOST			the device is disconnected.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED	the streams are of different frame rates.</returns>
        </member>
        <member name="M:PXCMCapture.Device.ReadStreamsAsync(PXCMCapture.Sample,PXCMSyncPoint@)">
            <summary> 
            Read the all configured streams asynchronously. The function returns immediately. The application must
            synchronize SP to get the stream samples. The configured streams must have the same frame rate or the function 
            will return error.
            </summary>
            <param name="sample"> The output sample.</param>
            <param name="sp"> The pointer to the SP to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			successful execution.</returns>
            <returns> PXCM_STATUS_DEVICE_LOST			the device is disconnected.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED	the streams are of different frame rates.</returns>
        </member>
        <member name="M:PXCMCapture.Device.ReadStreams(PXCMCapture.StreamType,PXCMCapture.Sample)">
            <summary> 
            Read the selected streams synchronously. The function blocks until all stream samples are ready.
            The application can read more than a single stream using the scope parameter, provided that all streams 
            have the same frame rate. Otherwise, the function will return error.
            </summary>
            <param name="scope"> The bit-OR'ed value of stream types of interest.</param>
            <param name="sample"> The output sample.</param>
            <returns> PXCM_STATUS_NO_ERROR		    successful execution.</returns>
            <returns> PXCM_STATUS_DEVICE_LOST	        the device is disconnected.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED	the streams are of different frame rates.</returns>
        </member>
        <member name="M:PXCMCapture.Device.CreateProjection">
            <summary> 
            Return the instance of the PXCProjection interface. Must be called after initialization.
            </summary>
            <returns> the PXCProjection instance.</returns>
        </member>
        <member name="P:PXCMCapture.Device.deviceInfo">
            <summary> 
            Return the device information structure of the current device.
            </summary>
        </member>
        <member name="T:PXCMCapture.Device.PowerLineFrequency">
            <summary> 
            PowerLineFrequency
            Describes the power line compensation filter values.
            </summary>
        </member>
        <member name="T:PXCMCapture.Device.MirrorMode">
            <summary>
            MirrorMode
            Describes the mirroring options.
            </summary>
        </member>
        <member name="T:PXCMCapture.Device.IVCAMAccuracy">
            <summary>
            IVCAMAccuracy
            Describes the IVCAM accuracy.
            </summary>
        </member>
        <member name="T:PXCMCapture.Device.Property">
            <summary> 
            Property
            Describes the device properties.
            Use the inline functions to access specific device properties.
            </summary>
        </member>
        <member name="T:PXCMCapture.Device.StreamOption">
            <summary> 
            Option
            Describes the stream options.
            </summary>
        </member>
        <member name="T:PXCMCapture.Device.StreamProfile">
            <summary> 
            StreamProfile
            Describes the video stream configuration parameters
            </summary>
        </member>
        <member name="T:PXCMCapture.Device.StreamProfileSet">
            <summary> 
            StreamProfileSet
            The set of StreamProfile that describes the configuration parameters of all streams.
            </summary>
        </member>
        <member name="P:PXCMCapture.Device.StreamProfileSet.Item(PXCMCapture.StreamType)">
            <summary>
            Access the configuration parameters by the stream type.
            </summary>
            <param name="type"> The stream type.</param>
            <returns> The StreamProfile instance.</returns>
        </member>
        <member name="T:PXCMCapture.Device.PropertyInfo">
            <summary> 
            PropertyInfo
            Describe the property value range and attributes.
            </summary>
        </member>
        <member name="T:PXCMCapture.Sample">
            <summary> 
            @class Sample
            The capture sample that contains multiple streams.
            </summary>
        </member>
        <member name="M:PXCMCapture.Sample.#ctor">
            <summary> 
            The constructor zeros the image instance array
            </summary>
        </member>
        <member name="P:PXCMCapture.Sample.Item(PXCMCapture.StreamType)">
            <summary> 
            Return the image element by StreamType.
            </summary>
            <param name="type"> The stream type.</param>
            <returns> The image instance.</returns>
        </member>
        <member name="T:PXCMCapture.Handler.OnDeviceListChangedDelegate">
            <summary>
             The Capture calls this function when a capture device is added or removed
            </summary>
        </member>
        <member name="T:PXCMCapture.StreamType">
            <summary> 
            StreamType
            Bit-OR'ed values of stream types, physical or virtual streams.
            </summary>
        </member>
        <member name="T:PXCMCapture.DeviceInfo">
            <summary> 
            Describe device details.
            </summary>
        </member>
        <member name="M:PXCMCapture.DeviceInfo.QueryNumStreams">
            <summary> 
            Get the available stream numbers.
            </summary>
            <returns> the number of streams.</returns>
        </member>
        <member name="T:PXCMCapture.DeviceModel">
            <summary> 
            DeviceModel
            Describes the device type (0xFFF00000) and model (0xFFFFF)
            </summary>
        </member>
        <member name="T:PXCMCapture.DeviceOrientation">
            <summary> 
            DeviceOrientation
            Describes the device orientation  
            </summary>
        </member>
        <member name="T:PXCMCapture.ConnectionType">
            <summary> 
            ConnectionType
            Describes the Connection type of the device
            </summary>
        </member>
        <member name="T:PXCMCaptureManager">
            <summary> 
            The CaptureManager interface provides the following features:
            (1) Locate an I/O device that meets all module input needs.
            (2) Record any streamming data to a file and playback from the file.
            </summary>
        </member>
        <member name="M:PXCMCaptureManager.RequestStreams(System.Int32,PXCMVideoModule.DataDesc)">
                        @brief	Add the module input needs to the CaptureManager device search. The application must call
                        this function for all modules before the LocalStreams function, where the CaptureManager performs
                        the device match.
                        @param[in]	mid					The module identifier. The application can use any unique value to later identify the module.
                        @param[in]	inputs				The module input descriptor.
                        @return PXCM_STATUS_NO_ERROR	Successful executation.
        </member>
        <member name="M:PXCMCaptureManager.LocateStreams(PXCMCaptureManager.Handler)">
                        @brief	The function locates an I/O device that meets any module input needs previously specified
                        by the RequestStreams function. The device and its streams are configured upon a successful return.
                        @param[in]	handler				The optional handler instance for callbacks during the device match.
                        @return PXCM_STATUS_NO_ERROR	Successful executation.
        </member>
        <member name="M:PXCMCaptureManager.CloseStreams">
                        @brief	Close the streams.
        </member>
        <member name="M:PXCMCaptureManager.QueryImageSize(PXCMCapture.StreamType)">
                        @brief	Return the stream resolution of the specified stream type.
                        @param[in]	type		The stream type.
                        @return the stream resolution.
        </member>
        <member name="M:PXCMCaptureManager.FilterByDeviceInfo(PXCMCapture.DeviceInfo)">
            <summary>
            	The functinon adds the specified DeviceInfo to the DeviceInfo filter list.
            </summary>
            <param name="dinfo"> The DeviceInfo structure to be added to the filter list, or NULL to clean up the filter list.</param>
        </member>
        <member name="M:PXCMCaptureManager.FilterByDeviceInfo(System.String,System.String,System.Int32)">
            <summary>
            	The functinon adds the specified device information to the DeviceInfo filter list.
            </summary>
            <param name="name"> The optional device friendly name.</param>
            <param name="did"> The optional device symbolic name.</param>
            <param name="didx"> The optional device index.</param>
        </member>
        <member name="M:PXCMCaptureManager.FilterByStreamProfiles(PXCMCapture.Device.StreamProfileSet)">
            <summary>
            	The functinon adds the specified StreamProfile to the StreamProfile filter list.
            </summary>
            <param name="dinfo"> The stream configuration to be added to the filter list, or NULL to clean up the filter list.</param>
        </member>
        <member name="M:PXCMCaptureManager.FilterByStreamProfiles(PXCMCapture.StreamType,System.Int32,System.Int32,System.Single)">
            <summary>
            	The functinon adds the specified StreamProfile to the StreamProfile filter list.
            </summary>
            <param name="type"> The stream type.</param>
            <param name="width"> The optional image width.</param>
            <param name="height"> The optional image height.</param>
            <param name="fps"> The optional frame rate.</param>
        </member>
        <member name="M:PXCMCaptureManager.LocateStreams">
            <summary>
            	The function locates an I/O device that meets any module input needs previously specified
            by the RequestStreams function. The device and its streams are configured upon a successful return.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR		Successful executation.</returns>
        </member>
        <member name="M:PXCMCaptureManager.QueryCapture">
            <summary>
            	Return the capture instance.
            </summary>
            <returns> the capture instance.</returns>
        </member>
        <member name="M:PXCMCaptureManager.QueryDevice">
            <summary>
            	Return the device instance.
            </summary>
            <returns> the device instance.</returns>
        </member>
        <member name="M:PXCMCaptureManager.ReadModuleStreamsAsync(System.Int32,PXCMCapture.Sample,PXCMSyncPoint@)">
            <summary>
            	Read the image samples for a specified module.
            </summary>
            <param name="mid"> The module identifier.</param>
            <param name="sample"> The captured sample, to be returned.</param>
            <param name="sp"> The SP, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMCaptureManager.SetFileName(System.String,System.Boolean)">
            <summary>
            	Setup file recording or playback.
            </summary>
            <param name="file"> The file name.</param>
            <param name="record"> If true, the file is opened for recording. Otherwise, the file is opened for playback.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMCaptureManager.SetMask(PXCMCapture.StreamType)">
            <summary>
            	Set up to record or playback certain stream types.
            </summary>
            <param name="types"> The bit-OR'ed stream types.</param>
        </member>
        <member name="M:PXCMCaptureManager.SetPause(System.Boolean)">
            <summary>
            	Pause/Resume recording or playing back.
            </summary>
            <param name="pause"> True for pause and false for resume.</param>
        </member>
        <member name="M:PXCMCaptureManager.SetRealtime(System.Boolean)">
            <summary>
            	Set the realtime playback mode.
            </summary>
            <param name="realtime"> True to playback in real time, or false to playback as fast as possible.</param>
        </member>
        <member name="M:PXCMCaptureManager.SetFrameByIndex(System.Int32)">
            <summary>
            	Reset the playback position by the frame index.
            </summary>
            <param name="frame"> The frame index.</param>
        </member>
        <member name="M:PXCMCaptureManager.QueryFrameIndex">
            <summary>
            	Return the current playback position in frame index.
            </summary>
            <returns> The frame index.</returns>
        </member>
        <member name="M:PXCMCaptureManager.SetFrameByTimeStamp(System.Int64)">
            <summary>
            	Reset the playback position by the nearest time stamp.
            </summary>
            <param name="ts"> The time stamp, in 100ns.</param>
        </member>
        <member name="M:PXCMCaptureManager.QueryFrameTimeStamp">
            <summary>
            	Return the current playback frame time stamp.
            </summary>
            <returns> The time stamp, in 100ns.</returns>
        </member>
        <member name="M:PXCMCaptureManager.QueryNumberOfFrames">
            <summary>
            	Return the frame number in the recorded file.
            </summary>
            <returns> The number of frames.</returns>
        </member>
        <member name="M:PXCMCaptureManager.EnableDeviceRotation(System.Boolean)">
            <summary>
            Enable detection of device rotation. Call function PXCImage::QueryRotation on current image to query rotation data.
            </summary>
            <param name="enableFlag"> If true, enable detection of device rotation, otherwise disable.</param>
        </member>
        <member name="M:PXCMCaptureManager.IsDeviceRotationEnabled">
            <summary>
            Query if device rotation enabled.
            </summary>
        </member>
        <member name="T:PXCMCaptureManager.Handler">
            <summary> 
            This is the PXCMCaptureManager callback interface.
            </summary>
        </member>
        <member name="T:PXCMCaptureManager.Handler.OnCreateDeviceDelegate">
            <summary>
            	The CaptureManager callbacks this function when creating a device instance.
            </summary>
            <param name="mdesc"> The I/O module descriptor.</param>
            <param name="device"> The device instance.</param>
            <returns> The CaptureManager aborts the device match if the status is an error.</returns>
        </member>
        <member name="T:PXCMCaptureManager.Handler.OnSetupStreamsDelegate">
            <summary>
            	The CaptureManager callbacks this function when configuring the device streams.
            </summary>
            <param name="device"> The device instance.</param>
            <param name="types"> The bit-OR'ed value of all streams.</param>
            <returns> The CaptureManager aborts the device match if the status is an error.</returns>
        </member>
        <member name="T:PXCMCaptureManager.Handler.OnNextDeviceDelegate">
            <summary>
            	The CaptureManager callbacks this function when the current device failed to 
            meet the algorithm needs. If the function returns any error, the CaptureManager performs
            the current device match again, allowing to try multple configurations on the same device.
            </summary>
            <param name="device"> The device instance.</param>
            <returns> The CaptureManager repeats the match on the same device if the status code is any </returns>
            error, or go onto the next device if the status code is no error.
        </member>
        <member name="T:PXCMContourExtractor">
            <summary> 
            @class PXCMContourExtractor
            A utility for extracting contour lines from blob (mask) images.
            Given a mask image, in which the blob pixels are white (255) and the rest are black (0)
            this utility will extract the contour lines of the blob.
            The contour lines are all the lines that define the borders of the blob.
            Inner contour lines (i.e. "holes" in the blob) are defined by an array of clock-wise points.
            The outer contour line (i.e. the external border) is defined by an array of counter-clock-wise points.
            </summary>
        </member>
        <member name="M:PXCMContourExtractor.Init(PXCMImage.ImageInfo)">
            <summary>
            initialize PXCMContourExtractor instance for a specific image type (size)
            </summary>
            <param name="imageInfo"> definition of the images that should be processed</param>
            @see PXCMImage.ImageInfo
        </member>
        <member name="M:PXCMContourExtractor.ProcessImage(PXCMImage)">
            <summary>			
            Extract the contour of the blob in the given image
            Given an image of a blob, in which object pixels are white (set to 255) and all other pixels are black (set to 0),
            extract the contour lines of the blob.
            Note that there might be multiple contour lines, if the blob contains "holes".
            </summary>
            <param name="blobImage"> the blob-image to be processed</param>
            <returns> PXCM_STATUS_NO_ERROR if a valid blob image exists and could be processed; otherwise, return the following error:
            PXCM_STATUS_DATA_UNAVAILABLE - if image is not available or PXCM_STATUS_ITEM_UNAVAILABLE if processImage is running or PXCMContourExtractor was not initialized.	</returns>	
        </member>
        <member name="M:PXCMContourExtractor.QueryContourData(System.Int32,PXCMPointI32[]@)">
            <summary> 
            Get the data of the contour line
            A contour is composed of a line, an array of 2D points describing the contour path
            </summary>
            <param name="index"> the zero-based index of the requested contour</param>
            <param name="maxSize"> size of the allocated array for the contour points</param>
            <param name="contour"> points stored in the user allocated array</param>
            <returns> PXCM_STATUS_NO_ERROR if terminated successfully; otherwise, return the following error:
            PXCM_STATUS_PARAM_UNSUPPORTED if index is invalid or user allocated array is invalid 		
            PXCM__STATUS_ITEM_UNAVAILABLE if processImage is running or PXCMContourExtractor was not initialized.</returns>
        </member>
        <member name="M:PXCMContourExtractor.QueryContourSize(System.Int32)">
            <summary> 
            Get the contour size (number of points in the contour)
            This is the size of the points array that the user should allocate
            </summary>
            <returns> the contour size (number of points in the contour)</returns>
            <param name="index"> the zero-based index of the requested contour</param>
        </member>
        <member name="M:PXCMContourExtractor.IsContourOuter(System.Int32)">
            <summary> 
            Return true if it is the blob's outer contour, false for internal contours.
            </summary>
            <returns> true if it is the blob's outer contour, false for internal contours.</returns>
            <param name="index"> the zero-based index of the requested contour</param>
        </member>
        <member name="M:PXCMContourExtractor.QueryNumberOfContours">
            <summary> 
            Get the number of contours extracted
            </summary>
            <returns> the number of contours extracted</returns>
        </member>
        <member name="M:PXCMContourExtractor.SetSmoothing(System.Single)">
            <summary> 
            Set the smoothing level of the shape of the contour 
            The smoothing level ranges from 0 to 1, when 0 means no smoothing, and 1 implies a very smooth contour
            Note that a larger smoothing level will reduce the number of points, while "cleaning" small holes in the line
            </summary>
            <param name="smoothing"> the smoothing level</param>
            <returns> PXCM_STATUS_NO_ERROR if smoothing is valid; otherwise, return the following error:
            PXCM_STATUS_PARAM_UNSUPPORTED, smoothing level will remain the last valid value</returns>
        </member>
        <member name="M:PXCMContourExtractor.QuerySmoothing">
            <summary> 
            Get the smoothing level of the contour (0-1) 
            </summary>
            <returns> smoothing level of the contour</returns>
        </member>
        <member name="T:PXCMCursorConfiguration">
            <summary>
            @class PXCMCursorConfiguration
            @brief Handles all the configuration options of the hand cursor module.
            Use this interface to configure the tracking, alerts, gestures and output options.
            @note Updated configuration is applied only when ApplyChanges is called.
            </summary>
        </member>
        <member name="M:PXCMCursorConfiguration.ApplyChanges">
            <summary>
            Apply the configuration changes to the module.
            This method must be called in order to apply the current configuration changes.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - configuration was not initialized.\n                        </returns>
        </member>
        <member name="M:PXCMCursorConfiguration.RestoreDefaults">
            <summary>  
            Restore configuration settings to the default values.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - configuration was not initialized.\n                        </returns>
        </member>
        <member name="M:PXCMCursorConfiguration.Update">
            <summary>
            Read current configuration settings from the module into this object.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - configuration was not read.\n                        </returns>
        </member>
        <member name="M:PXCMCursorConfiguration.SetTrackingBounds(PXCMCursorData.TrackingBounds)">
            <summary>
             Set the boundaries of the tracking area.
             The tracking boundaries create a frustum shape in which the hand is tracked.\n
             (A frustum is a truncated pyramid, with 4 side planes and two rectangular bases.)\n
             When the tracked hand reaches one of the boundaries (near, far, left, right, top, or bottom), the appropriate alert is fired.     
             @param[in] trackingBounds - the struct that defines the tracking boundaries.
             @note The frustum base center are directly opposite the sensor.\n    /// 
            </summary>
            <param name="trackingBounds"> - the struct that defines the tracking boundaries.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid argument.</returns>
            
            @see PXCMCursorData.TrackingBounds
        </member>
        <member name="M:PXCMCursorConfiguration.QueryTrackingBounds(PXCMCursorData.TrackingBounds@)">
            <summary>
            Get the values defining the tracking boundaries frustum.
            </summary>
            <returns> PXCMCursorData.TrackingBounds  </returns>
        </member>
        <member name="M:PXCMCursorConfiguration.EnableEngagement(System.Boolean)">
            <summary> 
            Enable/Disable Cursor engagement mode.
            </summary>
            The cursor engagement mode retrieves an indication that the hand is ready to interact with the user application
            <param name="enable"> - a boolean to turn off/on the feature.</param>
            <returns> PXC_STATUS_NO_ERROR - operation succeeded.    </returns>
        </member>
        <member name="M:PXCMCursorConfiguration.SetEngagementTime(System.Int32)">
            <summary> 
            Set the duration time in milliseconds for engagement of the Cursor.
            The duration is the loading time since the algorithm recognized the cursor till the completion of the gesture
            </summary>
            <param name="timeInMilliseconds"> - time duration in milliseconds (min 32)</param>
            <returns> PXC_STATUS_NO_ERROR - operation succeeded.    </returns>
            <returns> PXC_STATUS_VALUE_OUT_OF_RANGE - time duration is under 32 milliseconds;</returns>
        </member>
        <member name="M:PXCMCursorConfiguration.QueryEngagementTime">
                    @brief Get the duration time in milliseconds for engagement of the Cursor.
            		The duration is the time needed for the hand to be in front of the camera and static.
                    @param[out] timeInMilliseconds - time duration in milliseconds.
        </member>
        <member name="M:PXCMCursorConfiguration.EnableAlert(PXCMCursorData.AlertType)">
            <summary> 
            Enable alert messaging for a specific event.            
            <param name="alertEvent"> - the ID of the event to be enabled.</param>
            
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid alert type.</returns>
            
            @see PXCMCursorData.AlertType
        </member>
        <member name="M:PXCMCursorConfiguration.EnableAllAlerts">
            <summary> 
            Enable all alert messaging events.            
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
        </member>
        <member name="M:PXCMCursorConfiguration.IsAlertEnabled(PXCMCursorData.AlertType)">
            <summary> 
            Test the activation status of the given alert.
            </summary>
            <param name="alertEvent"> - the ID of the event to be tested.</param>
            <returns> true if the alert is enabled, false otherwise.</returns>
            
            @see PXCMCursorData.AlertType
        </member>
        <member name="M:PXCMCursorConfiguration.DisableAlert(PXCMCursorData.AlertType)">
            <summary> 
            Disable alert messaging for a specific event.            
            <param name="alertEvent"> - the ID of the event to be disabled</param>
            
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - unsupported parameter.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - data was not initialized.</returns>
            
            @see PXCMCursorData.AlertType
        </member>
        <member name="M:PXCMCursorConfiguration.DisableAllAlerts">
            <summary> 
            Disable messaging for all alerts.                        
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - data was not initialized.</returns>
            </summary>
        </member>
        <member name="M:PXCMCursorConfiguration.SubscribeAlert(PXCMCursorConfiguration.OnFiredAlertDelegate)">
            <summary> 
            Register an event handler object for the alerts. 
            The event handler's OnFiredAlert method is called each time an alert fires.
            </summary>
            <param name="alertHandler"> - a pointer to the event handler.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - null alertHandler pointer.</returns>
            
        </member>
        <member name="M:PXCMCursorConfiguration.UnsubscribeAlert(PXCMCursorConfiguration.OnFiredAlertDelegate)">
            <summary> 
            Unsubscribe an alert handler object.
            </summary>
            <param name="alertHandler"> - a pointer to the event handler to unsubscribe.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - illegal alertHandler (null pointer).</returns>
        </member>
        <member name="M:PXCMCursorConfiguration.EnableGesture(PXCMCursorData.GestureType)">
            <summary> 
            Enable a gesture, so that events are fired when the gesture is identified.
            </summary>
            <param name="gestureEvent"> -  the ID of the gesture to be enabled.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid parameter.</returns>
        </member>
        <member name="M:PXCMCursorConfiguration.EnableAllGestures">
            <summary> 
            Enable all gestures, so that events are fired for every gesture identified.		
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.   </returns>
        </member>
        <member name="M:PXCMCursorConfiguration.IsGestureEnabled(PXCMCursorData.GestureType)">
            <summary> 
            Check whether a gesture is enabled.
            </summary>
            <param name="gestureEvent"> - the ID of the gesture to be tested.</param>
            <returns> true if the gesture is enabled, false otherwise.</returns>
        </member>
        <member name="M:PXCMCursorConfiguration.DisableGesture(PXCMCursorData.GestureType)">
            <summary> 
            Deactivate identification of a gesture. Events will no longer be fired for this gesture.            
            </summary>
            <param name="gestureEvent"> - the ID of the gesture to deactivate.</param>
            <returns> PXC_STATUS_NO_ERROR - operation succeeded. </returns>
            PXCM_STATUS_PARAM_UNSUPPORTED - invalid gesture name.
        </member>
        <member name="M:PXCMCursorConfiguration.DisableAllGestures">
            <summary> 
            Deactivate identification of all gestures. Events will no longer be fired for any gesture.            
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.  </returns>
        </member>
        <member name="M:PXCMCursorConfiguration.SubscribeGesture(PXCMCursorConfiguration.OnFiredGestureDelegate)">
            <summary> 
            Register an event handler object to be called on gesture events.
            The event handler's OnFiredGesture method will be called each time a gesture is identified.
            
            </summary>
            <param name="gestureHandler"> - a pointer to the gesture handler.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - null gesture handler.</returns>
            
            
        </member>
        <member name="M:PXCMCursorConfiguration.UnsubscribeGesture(PXCMCursorConfiguration.OnFiredGestureDelegate)">
            <summary> 
            Unsubscribe a gesture event handler object.
            After this call no callback events will be sent to the given gestureHandler.
            </summary>
            <param name="gestureHandler"> - a pointer to the event handler to unsubscribe.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - null gesture handler.     </returns>
        </member>
        <member name="T:PXCMCursorData">
            <summary>
               @class PXCCursorData
               This class holds all the output of the hand cursor tracking process.
               Each instance of this class holds the information of a specific frame.
            </summary>
        </member>
        <member name="M:PXCMCursorData.Update">
            <summary>
             Updates hand data to the most current output.
            </summary>
        </member>
        <member name="M:PXCMCursorData.QueryFiredAlertsNumber">
            <summary>
            Return the number of fired alerts in the current frame.
            </summary>
        </member>
        <member name="M:PXCMCursorData.QueryFiredAlertData(System.Int32,PXCMCursorData.AlertData@)">
            <summary> 
            Get the details of the fired alert with the given index.
            
            </summary>
            <param name="index"> - the zero-based index of the requested fired alert.</param>
            <param name="alertData"> - the information for the fired event.</param>
            
            @note the index is between 0 and the result of QueryFiredAlertsNumber()
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid input parameter.</returns>
            
            @see AlertData
            @see QueryFiredAlertsNumber
        </member>
        <member name="M:PXCMCursorData.IsAlertFired(PXCMCursorData.AlertType,PXCMCursorData.AlertData@)">
            <summary>
            Return whether the specified alert is fired in the current frame, and retrieve its data.
            
            </summary>
            <param name="alertEvent"> - the alert type.</param>
            <param name="alertData"> - the information for the fired event.</param>
            <returns> true if the alert is fired, false otherwise.</returns>
            
            @see AlertType
            @see AlertData
            
        </member>
        <member name="M:PXCMCursorData.IsAlertFiredByHand(PXCMCursorData.AlertType,System.Int32,PXCMCursorData.AlertData@)">
            <summary>
            Return whether the specified alert is fired for a specific hand in the current frame, and retrieve its data.
            
            </summary>
            <param name="alertEvent"> - the alert type.</param>
            <param name="handID"> - the ID of the hand whose alert should be retrieved.</param>
            <param name="alertData"> - the information for the fired event.</param>
            <returns> true if the alert is fired, false otherwise.</returns>
            
            @see AlertType
            @see AlertData
            
        </member>
        <member name="M:PXCMCursorData.QueryFiredGesturesNumber">
            <summary> 
            Return the number of gestures fired in the current frame.
            </summary>
        </member>
        <member name="M:PXCMCursorData.QueryFiredGestureData(System.Int32,PXCMCursorData.GestureData@)">
            <summary> 
            Get the details of the fired gesture with the given index.
            </summary>
            
            <param name="index"> - the zero-based index of the requested fired gesture.</param>
            <param name="gestureData"> - the information for the fired gesture.</param>
            
            @note The gesture index must be between 0 and [QueryFiredGesturesNumber() - 1]
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid input parameter.</returns>
            
            @see GestureData
            @see QueryFiredGesturesNumber
        </member>
        <member name="M:PXCMCursorData.IsGestureFired(PXCMCursorData.GestureType,PXCMCursorData.GestureData@)">
            <summary>
            Return whether the specified gesture is fired for a specific hand in the current frame, and if so retrieve its data.
            </summary>
            <param name="gestureEvent"> - the event type of the gesture to be checked.</param>
            <param name="gestureData"> - the information for the fired gesture.</param>
            
            <returns> true if the gesture was fired, false otherwise.</returns>
            
            @see GestureType 
            @see GestureData
        </member>
        <member name="M:PXCMCursorData.IsGestureFiredByHand(PXCMCursorData.GestureType,System.Int32,PXCMCursorData.GestureData@)">
            <summary>
            Return whether the specified gesture is fired for a specific hand in the current frame, and if so retrieve its data.
            </summary>
            <param name="gestureName"> - the name of the gesture to be checked.</param>
            <param name="handID"> - the ID of the hand whose alert should be retrieved.</param>
            <param name="gestureData"> - the information for the fired gesture.</param>
            
            <returns> true if the gesture was fired, false otherwise.</returns>
            @see GestureData
        </member>
        <member name="M:PXCMCursorData.QueryNumberOfCursors">
            <summary> 
            Return the number of hands detected in the current frame.            
            </summary>
        </member>
        <member name="M:PXCMCursorData.QueryCursorData(PXCMCursorData.AccessOrderType,System.Int32,PXCMCursorData.ICursor@)">
            <summary> 
            Retrieve the cursor object data using a specific AccessOrder and related index.
            
            </summary>
            <param name="accessOrder"> - the order in which the cursors are enumerated (accessed).</param>
            <param name="index"> - the index of the cursor to be retrieved, based on the given AccessOrder.</param>
            <param name="cursorData"> - the information for the cursor.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_DATA_UNAVAILABLE  - index >= number of detected hands.</returns>
            
            @see AccessOrder
            @see ICursor		
        </member>
        <member name="M:PXCMCursorData.QueryCursorDataById(System.Int32,PXCMCursorData.ICursor@)">
            <summary> 
            Retrieve the cursor object data by its unique Id.
            </summary>
            <param name="handID"> - the unique ID of the requested hand</param>
            <param name="cursorData"> - the information for the cursor.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_DATA_UNAVAILABLE  - there is no output data.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - there is no hand data for the given cursor ID. </returns>
            
            @see ICursor		
        </member>
        <member name="M:PXCMCursorData.ResetAdaptiveById(System.Int32,PXCMPoint3DF32)">
            <summary> 
            Reset the adaptive point.
            </summary>
            <param name="cursorID"> - the unique ID of the requested cursor.</param>
            <param name="resetPosition"> -  the position of the new point. should be between 0-1 in every axis.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_DATA_UNAVAILABLE  - there is no output data.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - there is no hand data for the given cursor ID. </returns>
            
        </member>
        <member name="T:PXCMCursorData.ICursor">
            <summary> 
            @class IHand
            Contains all the properties of the hand that were calculated by the tracking algorithm
            </summary>
        </member>
        <member name="M:PXCMCursorData.ICursor.QueryUniqueId">
            <summary>	
            Return the hand's unique identifier.
            </summary>
        </member>
        <member name="M:PXCMCursorData.ICursor.QueryTimeStamp">
            <summary> 
            Return the time-stamp in which the collection of the hand data was completed.
            </summary>
        </member>
        <member name="M:PXCMCursorData.ICursor.QueryBodySide">
            <summary> 		
            Return the side of the body to which the hand belongs (when known).
            @note This information is available only in full-hand tracking mode (TRACKING_MODE_FULL_HAND).
            @see PXCMHandConfiguration.SetTrackingMode
            </summary>
        </member>
        <member name="M:PXCMCursorData.ICursor.QueryCursorPointWorld">
            <summary> 		
            Get the geometric position of the cursor in 3D world coordinates, in meters.
            Return the cursor point in world coordinates.
            </summary>
        </member>
        <member name="M:PXCMCursorData.ICursor.QueryCursorPointImage">
            <summary> 		
             Get the geometric position of the cursor in 2D image coordinates, in pixels. (Note: the Z coordinate is the point's depth in millimeters.)
            @return the cursor point in image coordinates.
            </summary>
        </member>
        <member name="M:PXCMCursorData.ICursor.QueryAdaptivePoint">
            <summary> 		
            The module defines a bounding box around a hand in the world coordinate system, the adaptive point is a normalized point inside the bounding box with values between 0-1.
            Using this point allows an easy way to map the hand cursor to any resolution screen.
            Return the a 3D point with values between 0-1.
            </summary>
        </member>
        <member name="M:PXCMCursorData.ICursor.QueryEngagementPercent">
            <summary> 
             Get the hand cursor engagement loading percentage.
             Return 100 - percent indicates full engagement state.
             Return -1  - percent indicates that the feature wasn't enabled.
             @see PXCCursorConfiguration::EnableEngagement
             @see AlertType::CURSOR_ENGAGED	
             @see AlertType::CURSOR_DISENGAGED	
            </summary>      
        </member>
        <member name="T:PXCMCursorData.BodySideType">
            <summary>  BodySideType
            The side of the body to which a hand belongs.\n
            @note Body sides are reported from the player's point-of-view, not the sensor's.
            </summary>
        </member>
        <member name="F:PXCMCursorData.BodySideType.BODY_SIDE_UNKNOWN">
            The side was not determined    
        </member>
        <member name="T:PXCMCursorData.AccessOrderType">
            <summary> 
            AccessOrderType
            Orders in which the hands can be accessed.
            </summary>
        </member>
        <member name="F:PXCMCursorData.AccessOrderType.ACCESS_ORDER_BY_TIME">
            From oldest to newest hand in the scene 
        </member>
        <member name="T:PXCMCursorData.AlertType">
            <summary>  AlertType
            Identifiers for the events that can be detected and fired by the cursor module.
            </summary>
        </member>
        <member name="F:PXCMCursorData.AlertType.CURSOR_DETECTED">
             Cursor is detected
        </member>
        <member name="T:PXCMCursorData.GestureType">
            <summary>  GestureType
            Identifiers for the events that can be detected and fired by the cursor module.
            </summary>
        </member>
        <member name="F:PXCMCursorData.GestureType.CURSOR_CLICK">
            Cursor click - hold your hand facing the camera, close and open your hand in smooth motion. 
        </member>
        <member name="F:PXCMCursorData.GestureType.CURSOR_COUNTER_CLOCKWISE_CIRCLE">
            Cursor clockwise circle  - move your hand in clockwise circle while hand facing the camera.
        </member>
        <member name="F:PXCMCursorData.GestureType.CURSOR_HAND_CLOSING">
            Cursor counter clockwise circle  - move your hand in counter clockwise circle while hand facing the camera.
        </member>
        <member name="F:PXCMCursorData.GestureType.CURSOR_HAND_OPENING">
            Cursor hand closing - hold an open hand towards the camera and close your hand.
        </member>
        <member name="T:PXCMCursorData.TrackingBounds">
            <summary> 
            TrackingBounds
            Defines the properties of an alert event
            </summary>
        </member>
        <member name="F:PXCMCursorData.TrackingBounds.farTrackingDistance">
            nearest tracking distance (distance of small frustum base from sensor)
        </member>
        <member name="F:PXCMCursorData.TrackingBounds.nearTrackingWidth">
            farthest tracking distance (distance of large frustum base from sensor)
        </member>
        <member name="F:PXCMCursorData.TrackingBounds.nearTrackingHeight">
            width of small frustum base
        </member>
        <member name="T:PXCMCursorData.AlertData">
            <summary> 
            AlertData
            Defines the properties of an alert event
            </summary>
        </member>
        <member name="F:PXCMCursorData.AlertData.frameNumber">
            The time-stamp in which the event occurred
        </member>
        <member name="F:PXCMCursorData.AlertData.handId">
            The number of the frame in which the event occurred (relevant for recorded sequences)
        </member>
        <member name="F:PXCMCursorData.AlertData.label">
            The ID of the hand that triggered the alert, if relevant and known
        </member>
        <member name="T:PXCMCursorData.GestureData">
            <summary> 
            GestureData
            Defines the properties of a gesture.
            </summary>
        </member>
        <member name="F:PXCMCursorData.GestureData.frameNumber">
            The time-stamp in which the event occurred
        </member>
        <member name="F:PXCMCursorData.GestureData.handId">
            The number of the frame in which the event occurred (relevant for recorded sequences)
        </member>
        <member name="F:PXCMCursorData.GestureData.label">
            The ID of the hand that triggered the alert, if relevant and known
        </member>
        <member name="T:PXCMDataSmoothing">
            <summary> @class PXCMDataSmoothing 
            A utility that allows smoothing data of different types, using a variety of algorithms
            </summary>
        </member>
        <member name="M:PXCMDataSmoothing.Create1DStabilizer(System.Single,System.Single)">
            <summary>  Create Stabilizer smoother instance for single floats
            The stabilizer keeps the smoothed data point stable as long as it has not moved more than a given threshold
            </summary>
            <param name="stabilizeStrength"> The stabilizer smoother strength, default value is 0.5f</param>
            <param name="stabilizeRadius"> The stabilizer smoother radius, default value is 0.03f</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create1DStabilizer">
            <summary>  Create Stabilizer smoother instance for single floats
            The stabilizer keeps the smoothed data point stable as long as it has not moved more than a given threshold    
            </summary>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create1DWeighted(System.Single[])">
            <summary>  Create the Weighted algorithm for single floats
            The Weighted algorithm applies a (possibly) different weight to each of the previous data samples
            If the weights vector is not assigned (NULL) all the weights will be equal (1/numWeights)
            </summary>
            <param name="numWeights"> The Weighted smoother number of weights</param>
            <param name="weights"> The Weighted smoother weight values</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create1DWeighted(System.Int32)">
            <summary>  Create the Weighted algorithm for single floats
            The Weighted algorithm applies a (possibly) different weight to each of the previous data samples
            If the weights vector is not assigned (NULL) all the weights will be equal (1/numWeights)
            </summary>
            <param name="numWeights"> The Weighted smoother number of weights</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create1DQuadratic(System.Single)">
            <summary>  Create the Quadratic algorithm for single floats
            </summary>
            <param name="smoothStrength"> The Quadratic smoother smooth strength</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create1DQuadratic">
            <summary>  Create the Quadratic algorithm for single floats
            </summary>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create1DSpring(System.Single)">
            <summary>  Create the Spring algorithm for single floats
            </summary>
            <param name="smoothStrength"> The Spring smoother smooth strength</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create1DSpring">
            <summary>  Create the Spring algorithm for single floats
            </summary>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create2DStabilizer(System.Single,System.Single)">
            <summary>  Create Stabilizer smoother instance for 2-dimensional points
            The stabilizer keeps the smoothed data point stable as long as it has not moved more than a given threshold
            </summary>
            <param name="stabilizeStrength"> The stabilizer smoother strength, default value is 0.5f</param>
            <param name="stabilizeRadius"> The stabilizer smoother radius, default value is 0.03f</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create2DStabilizer">
            <summary>  Create Stabilizer smoother instance for 2-dimensional points
            The stabilizer keeps the smoothed data point stable as long as it has not moved more than a given threshold
            </summary>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create2DWeighted(System.Single[])">
            <summary>  Create the Weighted algorithm for 2-dimensional points
            The Weighted algorithm applies a (possibly) different weight to each of the previous data samples
            If the weights vector is not assigned (NULL) all the weights will be equal (1/numWeights)      
            </summary>
            <param name="weights"> The Weighted smoother weight values</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create2DWeighted(System.Int32)">
            <summary>  Create the Weighted algorithm for 2-dimensional points
            The Weighted algorithm applies a (possibly) different weight to each of the previous data samples
            If the weights vector is not assigned (NULL) all the weights will be equal (1/numWeights)
            </summary>
            <param name="numWeights"> The Weighted smoother number of weights</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create2DQuadratic(System.Single)">
            <summary>  Create the Quadratic algorithm for 2-dimensional points
            <param name="smoothStrength"> The Quadratic smoother smooth strength</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
            </summary>
        </member>
        <member name="M:PXCMDataSmoothing.Create2DQuadratic">
            <summary>  Create the Quadratic algorithm for 2-dimensional points      
            </summary>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create2DSpring(System.Single)">
            <summary>  Create the Spring algorithm for 2-dimensional points
            </summary>
            <param name="smoothStrength"> The Spring smoother smooth strength</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create2DSpring">
            <summary>  Create the Spring algorithm for 2-dimensional points        
            </summary>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create3DStabilizer(System.Single,System.Single)">
            <summary>  Create Stabilizer smoother instance for 3-dimensional points
            The stabilizer keeps the smoothed data point stable as long as it has not moved more than a given threshold
            </summary>
            <param name="stabilizeStrength"> The stabilizer smoother strength, default value is 0.5f</param>
            <param name="stabilizeRadius"> The stabilizer smoother radius, default value is 0.03f</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create3DStabilizer">
            <summary>      Create Stabilizer smoother instance for 3-dimensional points
            The stabilizer keeps the smoothed data point stable as long as it has not moved more than a given threshold
            </summary>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create3DWeighted(System.Single[])">
            <summary>  Create the Weighted algorithm for 3-dimensional points
            The Weighted algorithm applies a (possibly) different weight to each of the previous data samples
            If the weights vector is not assigned (NULL) all the weights will be equal (1/numWeights)    
            </summary>
            <param name="weights"> The Weighted smoother weight values</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create3DWeighted(System.Int32)">
            <summary>  Create the Weighted algorithm for 3-dimensional points
            The Weighted algorithm applies a (possibly) different weight to each of the previous data samples
            If the weights vector is not assigned (NULL) all the weights will be equal (1/numWeights)
            </summary>
            <param name="numWeights"> The Weighted smoother number of weights</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create3DQuadratic(System.Single)">
            <summary>  Create the Quadratic algorithm for 3-dimensional points
            </summary>
            <param name="smoothStrength"> The Quadratic smoother smooth strength</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create3DQuadratic">
            <summary>  Create the Quadratic algorithm for 3-dimensional points   
            </summary>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create3DSpring(System.Single)">
            <summary>  Create the Spring algorithm for 3-dimensional points
            </summary>
            <param name="smoothStrength"> The Spring smoother smooth strength</param>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Create3DSpring">
            <summary>  Create the Spring algorithm for 3-dimensional points       
            </summary>
            <returns> a pointer to the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="T:PXCMDataSmoothing.Smoother1D">
            <summary> @class Smoother1D
            Handles the smoothing of a stream of floats, using a specific smoothing algorithm
            </summary>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother1D.AddSample(System.Single,System.Int64)">
            <summary>			
            Add a new data sample to the smoothing algorithm
            </summary>
            <param name="newSample"> the latest data sample</param>
            <param name="timestamp"></param>
            <returns> PXCM_STATUS_NO_ERROR		</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother1D.AddSample(System.Single)">
            <summary>			
            Add a new data sample to the smoothing algorithm
            </summary>
            <param name="newSample"> the latest data sample</param>
            <returns> PXCM_STATUS_NO_ERROR		</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother1D.GetSample(System.Int64)">
            <summary>			
            Gets a new data sample from the smoothing algorithm
            </summary>
            <param name="timestamp"></param>
            <returns> smoothed value in pxcF32 format	</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother1D.GetSample">
            <summary>			
            Gets a new data sample from the smoothing algorithm          
            </summary>
            <returns> smoothed value in pxcF32 format	</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother2D.AddSample(PXCMPointF32,System.Int64)">
            <summary>			
            Add a new data sample to the smoothing algorithm
            </summary>
            <param name="newSample"> the latest data sample</param>
            <param name="timestamp"></param>
            <returns> PXCM_STATUS_NO_ERROR		</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother2D.AddSample(PXCMPointF32)">
            <summary>			
            Add a new data sample to the smoothing algorithm
            </summary>
            <param name="newSample"> the latest data sample</param>
            <param name="timestamp"></param>
            <returns> PXCM_STATUS_NO_ERROR		</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother2D.GetSample(System.Int64)">
            <summary>			
            Gets a new data sample from the smoothing algorithm
            </summary>
            <param name="timestamp"></param>
            <returns> smoothed value in PXCPointF32 format		</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother2D.GetSample">
            <summary>			
            Gets a new data sample from the smoothing algorithm			
            </summary>
            <returns> smoothed value in PXCPointF32 format		</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother3D.AddSample(PXCMPoint3DF32,System.Int64)">
            <summary>			
            Add a new data sample to the smoothing algorithm
            </summary>
            <param name="newSample"> the latest data sample</param>
            <param name="timestamp"></param>
            <returns> PXCM_STATUS_NO_ERROR		</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother3D.AddSample(PXCMPoint3DF32)">
            <summary>			
            Add a new data sample to the smoothing algorithm
            </summary>
            <param name="newSample"> the latest data sample</param>
            <param name="timestamp"></param>
            <returns> PXCM_STATUS_NO_ERROR		</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother3D.GetSample(System.Int64)">
            <summary>			
            Gets a new data sample from the smoothing algorithm
            </summary>
            <param name="timestamp"></param>
            <returns> smoothed value in PXCPoint3DF32 format		</returns>
        </member>
        <member name="M:PXCMDataSmoothing.Smoother3D.GetSample">
            <summary>			
            Gets a new data sample from the smoothing algorithm			
            </summary>
            <returns> smoothed value in PXCPoint3DF32 format		</returns>
        </member>
        <member name="M:PXCMEnhancedPhoto.DepthMask.Init(PXCMPhoto)">
            <summary>
            Init: the function initializes the Depth Mask function with the photo that needs processing. 
            photo: 2D+depth input image.
            returns PXCMStatus.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.DepthMask.ComputeFromCoordinate(PXCMPointI32,PXCMEnhancedPhoto.DepthMask.MaskParams)">
            <summary> 
            ComputeFromCoordinate: convenience function that creates a mask directly from a depth coordinate.
            coord: input (x,y) coordinates on the depth map.  
            Returns a mask in the form of PXCMImage for blending with the current photo frame.
            Note: this function simply calls ComputeMaskFromThreshold underneath.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.DepthMask.ComputeFromThreshold(System.Single,PXCMEnhancedPhoto.DepthMask.MaskParams)">
            <summary> 
            ComputeFromThreshold: calculates a mask from the threshold computed 
            depthThreshold: depth threshold. 
            frontObjectDepth: foreground depth
            backOjectDepth: background depth
            Returns a mask in the form of PXCMImage for blending with the current photo frame.
            
            Notes:
            For every pixel, if the mask is between the range of [POIdepth - frontObjectDepth, POIdepth + backObjectDepth], mask[p] -1.
            For every pixel p with depth in the range [POI - frontObjectDepth - nearFalloffDepth, POI - frontObjectDepth], mask[p] equals the "smoothstep" function value.
            For every pixel p with depth in the range [POI  + backObjectDepth , POI + backOjectDepth + farFallOffDepth], mask[p] equals the "smoothstep" function value.
            For every pixel p with other depth value, mask[p] = 1.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.MotionEffect.Init(PXCMPhoto)">
            <summary>
            Init: the function initializes the 6DoF parallax function with the photo that needs processing. 
            photo: 2D+depth input image.
            returns PXCMStatus.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.MotionEffect.Apply(System.Single[],System.Single[],System.Single)">
            <summary>
            Apply: The function applies a 6DoF parallax effect which is the difference in the apparent position of an object
            when it is viewed from two different positions or viewpoints. 
            
            motion[3]: is the right, up, and forward motion when (+ve), and Left, down and backward motion when (-ve)
            motion[0]: + right   / - left 
            motion[1]: + up      / - down
            motion[2]: + forward / - backward
            rotation[3]: is the Pitch, Yaw, Roll rotations in degrees in the Range: 0-360. 
            rotation[0]: pitch 
            rotation[1]: yaw
            rotation[2]: roll
            zoomFactor: + zoom in / - zoom out
            PXCMImage: the returned parallaxed image.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.DepthRefocus.Init(PXCMPhoto)">
            <summary>
            Init: the function initializes the Depth Refocus function with the photo that needs processing. 
            sample: 2D+depth input image.
            returns PXCMStatus.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.DepthRefocus.Apply(PXCMPointI32,System.Single)">
            <summary> 
            Apply: Refocus the image at input focusPoint by using depth data refocus
            focusPoint: is the selected point foir refocussing.
            aperture: Range of the blur area [1-100] 
            Note: The application must release the returned refocussed image
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.PhotoUtils.EnhanceDepth(PXCMPhoto,PXCMEnhancedPhoto.PhotoUtils.DepthFillQuality)">
            <summary> 
            EnhanceDepth: enhance the depth image quality by filling holes and denoising
            outputs the enhanced depth image
            photo: input color, depth photo, and calibration data
            depthQuality: Depth fill Quality: HIGH or LOW for post or realtime processing respectively
            Note: The application must release the returned enhanced depth photo
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.PhotoUtils.PreviewEnhanceDepth(PXCMCapture.Sample,PXCMEnhancedPhoto.PhotoUtils.DepthFillQuality)">
            <summary> 
            PreviewEnhanceDepth: enhance the depth image quality by filling holes and denoising
            outputs the enhanced depth image
            sample: The PXCMCapture::Sample instance from the SenseManager QuerySample().
            depthQuality: Depth fill Quality: HIGH or LOW for post or realtime processing respectively
            Note: The application must release the returned enhanced depth image
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.PhotoUtils.GetDepthQuality(PXCMImage)">
            <summary>
            DepthQuality: retruns the quality of the the depth map
            photo: input color, raw depth map, and calibration data
            depthQuality: BAD, FAIR, GOOD
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.PhotoUtils.PhotoCrop(PXCMPhoto,PXCMRectI32)">
            <summary> 
            Crop: The primary image, the camera[0] RGB and depth images are cropped 
            and the intrinsic / extrinsic info is updated.
            photo: input image color+depth
            rect : top left corner (x,y) plus width and height of the window to keep 
            and crop all the rest
            Returns a photo that has all its images cropped and metadata fixed accordingly.
            Note: Returns null if function fails
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.PhotoUtils.DepthResize(PXCMPhoto,System.Int32,PXCMEnhancedPhoto.PhotoUtils.DepthFillQuality)">
            <summary> 
            UpScaleDepth: Change the size of the enhanced depth map. 
            This function preserves aspect ratio, so only new width is required.
            photo: input image color+depth
            width: the new width.
            enhancementType: if the inPhoto has no enhanced depth, then do this type of depth enhancement before resizing.
            Returns a Depth map that has the same aspect ratio as the color image resolution.
            Note: Returns null if the aspect ratio btw color and depth is not preserved
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.PhotoUtils.ColorResize(PXCMPhoto,System.Int32)">
            <summary> 
            PhotoResize: Change the size of the reference (primary) image. 
            This function preserves aspect ratio, so only new width is required.
            Only the primary image is resized.
            photo - input photo.
            width - the new width.
            Returns a photo with the reference (primary) color image resized while maintaining the aspect ratio.
            Note: Returns null when the function fails
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PXCMEnhancedPhoto.PhotoUtils.PhotoRotate(PXCMPhoto,System.Single)" -->
        <member name="M:PXCMEnhancedPhoto.PhotoUtils.CommonFOV(PXCMPhoto)">
            <summary> 
            CommonFOV: Matches the Feild Of View (FOV) of color and depth in the photo. Useful for still images.
            photo: input image color+depth
            Returns a photo with primary,unedited color images, and depthmaps cropped to the 
            common FOV and the camera meatadata recalculated accordingly.
            Note: Returns a nullptr if function fails
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.PhotoUtils.PreviewCommonFOV(PXCMCapture.Sample,PXCMRectI32@)">
            <summary>
            PreviewCommonFOV: Matches the Field of View (FOV) of color and depth in depth photo. Useful for live stream.
            Use the returned roi to crop the photo
            photo: input image color+depth
            rect: Output. Returns roi in color image that matches to FOV of depth image that is suitable for all photos in the live stream.
            @return pxcmStatus : PXCM_STATUS_NO_ERRROR for successfu operation; PXCM_STATUS_DATA_UNAVAILABLE otherwise
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.PhotoUtils.PreviewCommonFOV(PXCMPhoto,PXCMRectI32@)">
            <summary>
            PreviewCommonFOV [Deprecated]: Matches the Field of View (FOV) of color and depth in depth photo. Useful for live stream.
            Use the returned roi to crop the photo
            photo: input image color+depth
            rect: Output. Returns roi in color image that matches to FOV of depth image that is suitable for all photos in the live stream.
            @return pxcStatus : PXC_STATUS_NO_ERRROR for successfu operation; PXC_STATUS_DATA_UNAVAILABLE otherwise
            </summary>
        </member>
        <member name="T:PXCMEnhancedPhoto.PhotoUtils.DepthFillQuality">
            <summary> 
            Input param for Depth fill Quality: 
            High: better quality, slow execution mostly used for post processing (image)
            Low : lower quality, fast execution mostly used for realtime processing (live video sequence)
            </summary>
        </member>
        <member name="T:PXCMEnhancedPhoto.PhotoUtils.DepthMapQuality">
            <summary> 
            DepthMapQuality: Output param for Depth Map Quality: 
            BAD, FAIR and GOOD
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Segmentation.ObjectSegment(PXCMPhoto,PXCMPointI32,PXCMPointI32)">
            <summary>
            ObjectSegment: generates an initial mask for any object selected by the bounding box. 
            The mask can then be refined by hints supplied by the user in RefineMask() function. 
            photo: input color and depth photo.
            topLeftCoord    : top left corner of the object to segment.  
            bottomRightCoord: Bottom right corner of the object to segment.
            Returns a mask in the form of PXCMImage with detected pixels set to 255 and undetected pixels set to 0.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Segmentation.ObjectSegment(PXCMPhoto,PXCMImage)">
            <summary>
            ObjectSegment: generates an initial mask for any object selected by the bounding box. 
            The mask can then be refined by hints supplied by the user in RefineMask() function. 
            photo: input color and depth photo.
            Returns a mask in the form of PXCMImage with detected pixels set to 255 and undetected pixels set to 0.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Segmentation.RefineMask(PXCMImage)">
            <summary> 
            RefineMask: refines the mask generated by the ObjectSegment() function by using hints.
            hints: input mask with hints. hint values.
            0 = no hint
            1 = foreground
            2 = background
            Returns a mask in the form of PXCMImage with detected pixels set to 255 and undetected pixels set to 0.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Segmentation.RefineMask(PXCMPointI32[],System.Int32,System.Boolean)">
            <summary> 
            RefineMask: refines the mask generated by the ObjectSegment() function by using hints.
            points: input arrays with hints' coordinates.
            length: length of the array
            isForeground: bool set to true if input hint locations are foreground and false if background
            Returns a mask in the form of PXCImage with detected pixels set to 255 and undetected pixels set to 0.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Segmentation.Undo">
            <summary> 
            Undo: undo last hints.
            Returns a mask in the form of PXCImage with detected pixels set to 255 and undetected pixels set to 0.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Segmentation.Redo">
            <summary> 
            Redo: Redo the previously undone hint.
            Returns a mask in the form of PXCImage with detected pixels set to 255 and undetected pixels set to 0.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Paster.SetPhoto(PXCMPhoto,PXCMEnhancedPhoto.Paster.PasteType)">
            <summary> 
            SetPhoto: sets the photo that needs to be processed.
            photo: photo to be processed [color + depth] 
            pasteMode: Indicates whether pasteOnPlane or pasteOnSurface
            Returns PXC_STATUS_NO_ERROR if success. PXC_STATUS_PROCESS_FAILED if process failed
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Paster.GetPlanesMap">
            <summary>
            GetPlanesMap: return plane indices map for current SetPhoto
            Returns a PXCImage of the plane indices in a form of a mask.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Paster.AddSticker(PXCMImage,PXCMPointI32,PXCMEnhancedPhoto.Paster.StickerData,PXCMEnhancedPhoto.Paster.PasteEffects)">
            <summary> 
            AddSticker: adds a sticker that will be pasted with all configurations needed and paste effects.
            sticker: the image to paste onto the photo (foreground image)
            coord : insertion coordinates
            stickerData: the sticker size, paste location and anchor point.
            pasteEffects: the pasting effects.
            Returns a stickerID number that can be used as input to the UpdateSticker(), RemoveSticker(), and PreviewSticker()
            functions. A negative return value indicates failure.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Paster.RemoveSticker(System.Int32)">
            <summary>
            RemoveSticker: Removes the sticker represented by stickerID
            </summary>
            <param name="stickerID">The stickerID for the sticker to remove.</param>
            <returns>PXC_STATUS_NO_ERROR for success. PXC_STATUS_ITEM_UNAVAILABLE if the stickerID was not valid</returns>
        </member>
        <member name="M:PXCMEnhancedPhoto.Paster.RemoveAllStickers">
            <summary>
            RemoveAllStickers: Removes all stickers from the scene. If there are no stickers
            in the scene, this function has no effect.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Paster.UpdateSticker(System.Int32,PXCMPointI32,PXCMEnhancedPhoto.Paster.StickerData,PXCMEnhancedPhoto.Paster.PasteEffects)">
            <summary> 
            UpdateSticker: Update the configuration and paste effects for the given sticker. You can pass null
            for any argument that you do not wish to update.
            sticker: the image to paste onto the photo (foreground image)
            coord : insertion coordinates
            stickerData: the sticker size, paste location and anchor point.
            pasteEffects: the pasting effects.
            Returns PXC_STATUS_NO_ERROR for success. Returns PXC_STATUS_ITEM_UNAVAILABLE if the stickerID was not valid
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Paster.SetSticker(PXCMImage,PXCMPointI32,PXCMEnhancedPhoto.Paster.StickerData,PXCMEnhancedPhoto.Paster.PasteEffects)">
            <summary> 
            SetSticker: sets the sticker that will be pasted with all configurations needed and paste effects.
            sticker: the image to paste onto the photo (foreground image)
            coord : insertion coordinates
            stickerData: the sticker size, paste location and anchor point.
            pasteEffects: the pasting effects.
            Returns PXC_STATUS_NO_ERROR if success. PXC_STATUS_PROCESS_FAILED if process failed
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Paster.PreviewSticker(System.Int32)">
            <summary> 
            PreviewSticker: returns a sticker mask showing the location of the pasted sticker.
            Returns PXCImage with returns values of 0, 1, 2 :
            2 U 1 - region where the sticker could be pasted if there were no constraints
            1 - apropriate region to paste sticker considering constraints: e.g. plane
            0 - all other pixels
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Paster.GetStickerROI(PXCMRectI32@,System.Int32)">
            <summary>
            GetStickerROI: Gives a bounding box showing the location of the sticker
            Returns PXCM_STATUS_NO_ERROR if operation succeeds
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Paster.Paste">
            <summary> 
            Paste: pastes a smaller 2D image (sticker) onto a bigger color + depth image (background).
            The smaller foreground image, is rendered according to a
            user-specified position and an auto-detected plane orientation onto the background image.
            The auto-oriented foreground image and the color data of the background image are composited together
            according to the alpha channal of the foreground image.
            Returns the embeded foreground with background image.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Paster.PasteOnPlane(PXCMPhoto,PXCMImage,PXCMPointI32,PXCMPointI32,PXCMEnhancedPhoto.Paster.PasteEffects)">
            <summary> 
            PasteOnPlane: This function is provided for texturing a smaller 2D image (foreground)
            onto a bigger color + depth image (background). The smaller foreground image, is rendered according to a
            user-specified position and an auto-detected plane orientation onto the background image.
            The auto-oriented foreground image and the color data of the background image are composited together
            according to the alpha channal of the foreground image.
            
            imbedIm: the image to imbed in the photo (foreground image)
            topLeftCoord, bottomLeftCoord: are the top left corner and the bottom left corner of where the user wants to embed the image.
            Returns the imbeded foreground with background image.
            </summary>
        </member>
        <member name="T:PXCMEnhancedPhoto.Paster.PasteEffects">
            <summary> 
            PasteEffects:  
             matchIllumination: Matches sticker illumination to the global RGB scene. Default is true.	
            transparency: Sets Transparency level of the sticker. 0.0f = Opaque (Default); 1.0f = Transparent
            embossHighFreqPass: High Frequency Pass during emboss, default 0.0f no emboss, 1.0f max	
            shadingCorrection: Matches sticker illumination to local RGB scene, takes shadows in account. Default is false.
            colorCorrection: Flag to add color correction; Default is false.
            embossingAmplifier: Embossing Intensity Multiplier. default: 1.0f. should be positive
            skinDetection: Flag to detect skin under pasted sticker; default is false		
            </summary>
        </member>
        <member name="T:PXCMEnhancedPhoto.Paster.PasteType">
            <summary> 
            PasteType: Indicates whether sticker is pasted on detected planes or on any surface 
            PLANE and SURFACE
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Measurement.MeasureDistance(PXCMPhoto,PXCMPointI32,PXCMPointI32,PXCMEnhancedPhoto.Measurement.MeasureData@)">
            <summary> 
            MeasureDistance: measure the distance between 2 points in mm
            photo: is the photo instance
            startPoint, endPoint: are the start pont and end point of the distance that need to be measured.
            Note: Depth data must be available and accurate at the start and end point selected. 
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Measurement.MeasureUADistance(PXCMPhoto,PXCMPointI32,PXCMPointI32,PXCMEnhancedPhoto.Measurement.MeasureData@)">
            <summary> 
            MeasureUADistance: (Experimental) measure the distance between 2 points in mm by using a experimental algortihm for a User Assisted (UA) measure.
            photo: is the photo instance
            startPoint, endPoint: are the user selected start point and end point of the distance that needs to be measured.
            returns the MeasureData that has the highest confidence value.  
            Note: depth data must be available and accurate at the start and end point selected. 
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Measurement.QueryUADataSize">
            <summary> 
            QueryUADataSize: (Experimental) returns the size of the MeasureData possibilites. The number of possibilities varries according 
            to the selected points, if they lie on a common plane or independent planes.
            </summary>
        </member>
        <member name="M:PXCMEnhancedPhoto.Measurement.QueryUAData(PXCMEnhancedPhoto.Measurement.MeasureData[]@)">
            <summary> 
            QueryUAData: (Experimental) Returns an array of the MeasureData possibilites. The size of the array is equal to the value returned
            by the QueryUADataSize().
            </summary>
        </member>
        <member name="T:PXCMEnhancedPhoto.Measurement.DistanceType">
            <summary>	
            DistanceType: indicator whether the Two points measured lie on a the same planar surface 
            </summary>
        </member>
        <member name="T:PXCMEnhancedPhoto.Measurement.WorldPoint">
            <summary>
            This represents a point in 3D world space in millimeter (mm) units. 
            </summary>
        </member>
        <member name="T:PXCMEnhancedPhoto.Measurement.MeasureData">
            <summary>
            This represents the distance between two world points in millimeters (mm). 
            </summary>
        </member>
        <member name="M:PXCMEnhancedVideo.EnableTracker(PXCMImage,PXCMEnhancedVideo.TrackMethod)">
            <summary>
              EnableTracker: creates an object tracker with a specific tracking method and an 
              initial bounding mask as a hint for the object to detect. 
              boundingMask: a hint on what object to detect setting the target pixels to 255 and background to 0.  
              method: Tracking method for depth layer tracking or object tracking.
            </summary>
        </member>
        <member name="M:PXCMEnhancedVideo.QueryTrackedObject">
            <summary>
             QueryTrackedObject: returns the tracked object selected in EnableTracker() after every processed frame.
             Returns a mask in the form of PXCMImage with detected pixels set to 255 and undetected pixels set to 0.
             returned PXCMImage is managed internally APP should not release: TO DO!!
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.EnableAlert(PXCMFaceData.AlertData.AlertType)">
            <summary> 
            Enable alert, so that events are fired when the alert is identified.			
            </summary>
            <param name="alertEvent"> the label of the alert to enabled.</param>
            <returns> PXCM_STATUS_NO_ERROR if the alert was enabled successfully; otherwise, return one of the following errors:
            PXCM_STATUS_PARAM_UNSUPPORTED - Unsupported parameter.
            PXCM_STATUS_DATA_NOT_INITIALIZED - Data failed to initialize.</returns>
        </member>
        <member name="M:PXCMFaceConfiguration.EnableAllAlerts">
            <summary> 
            Enable all alert messaging events.            
            </summary>
            <returns> PXC_STATUS_NO_ERROR if enabling all alerts was successful; otherwise, return one of the following errors:
            PXCM_STATUS_PROCESS_FAILED - Module failure during processing.
            PXCM_STATUS_DATA_NOT_INITIALIZED - Data failed to initialize.</returns>
        </member>
        <member name="M:PXCMFaceConfiguration.IsAlertEnabled(PXCMFaceData.AlertData.AlertType)">
            <summary> 
            Check if an alert is enabled.    
            </summary>
            <param name="alertEvent"> the ID of the event.</param>
            <returns> true if the alert is enabled; otherwise, return false</returns>
        </member>
        <member name="M:PXCMFaceConfiguration.DisableAlert(PXCMFaceData.AlertData.AlertType)">
            <summary> 
            Disable alert messaging for a specific event.            
            </summary>
            <param name="alertEvent"> the ID of the event to be disabled.</param>
            <returns> PXC_STATUS_NO_ERROR if disabling the alert was successful; otherwise, return one of the following errors:
            PXCM_STATUS_PARAM_UNSUPPORTED - Unsupported parameter.
            PXCM_STATUS_DATA_NOT_INITIALIZED - Data failed to initialize.</returns>
        </member>
        <member name="M:PXCMFaceConfiguration.DisableAllAlerts">
            <summary> 
            Disable all alerts messaging for all events.                        
            </summary>
            <returns> PXC_STATUS_NO_ERROR if disabling all alerts was successful; otherwise, return one of the following errors:
            PXCM_STATUS_PROCESS_FAILED - Module failure during processing.
            PXCM_STATUS_DATA_NOT_INITIALIZED - Data failed to initialize.</returns>
        </member>
        <member name="M:PXCMFaceConfiguration.SubscribeAlert(PXCMFaceConfiguration.OnFiredAlertDelegate)">
            <summary> 
            Register an event handler object for the alerts. The event handler's OnFiredAlert method will be called each time an alert is identified.
            </summary>
            <param name="alertHandler"> a pointer to the event handler.</param>
            @see AlertHandler::OnFiredAlert
            <returns> PXCM_STATUS_NO_ERROR if the registering an event handler was successful; otherwise, return the following error:
            PXCM_STATUS_DATA_NOT_INITIALIZED - Data failed to initialize.   </returns>     
        </member>
        <member name="M:PXCMFaceConfiguration.UnsubscribeAlert(PXCMFaceConfiguration.OnFiredAlertDelegate)">
            <summary> 
            Unsubscribe an event handler object for the alerts.
            </summary>
            <param name="alertHandler"> a pointer to the event handler that should be removed.</param>
            <returns> PXCM_STATUS_NO_ERROR if the unregistering the event handler was successful, an error otherwise.</returns>
        </member>
        <member name="M:PXCMFaceConfiguration.ApplyChanges">
            <summary>
            apply/commit configuration changes to MW
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.RestoreDefaults">
            <summary>
            restore settings to default values
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.Update">
            <summary>
             Updates data to latest available configuration.
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.ExpressionsConfiguration.Enable">
            <summary>
            Enables expression module.
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.ExpressionsConfiguration.Disable">
            <summary>
            Disables expression module.
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.ExpressionsConfiguration.EnableAllExpressions">
            <summary>
            Enables all available expressions.
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.ExpressionsConfiguration.DisableAllExpressions">
            <summary>
            Disables all available expressions.
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.ExpressionsConfiguration.EnableExpression(PXCMFaceData.ExpressionsData.FaceExpression)">
            <summary>
            Enables specific expression.
            </summary>
            <param name="expression"> - single face expression.</param>
            <returns> PXCM_STATUS_NO_ERROR - success.
            PXCM_STATUS_PARAM_UNSUPPORTED - expression is unsupported.</returns>
        </member>
        <member name="M:PXCMFaceConfiguration.ExpressionsConfiguration.DisableExpression(PXCMFaceData.ExpressionsData.FaceExpression)">
             <summary>
            Disables specific expression.
             </summary>
            <param name="expression"> - single face expression.</param>
        </member>
        <member name="M:PXCMFaceConfiguration.ExpressionsConfiguration.IsExpressionEnabled(PXCMFaceData.ExpressionsData.FaceExpression)">
             <summary>
            Checks if expression is currently enabled in configuration.
             </summary>
            <param name="expression"> - single face expression</param>
            <returns> true - enabled, false - disabled.</returns>
        </member>
        <member name="M:PXCMFaceConfiguration.RecognitionConfiguration.UseStorage(System.String)">
            <summary> 
            Sets the active Recognition database.
            </summary>
            <param name="storageName"> - The name of the database to be loaded by the Recognition module.</param>
            <param name="storage"> - A pointer to the Recognition database, or NULL for an existing database.</param>
            <returns> PXCM_STATUS_HANDLE_INVALID - if the module wasn't initialized properly.
            PXCM_STATUS_DATA_UNAVAILABLE - if the registration failed.
            PXCM_STATUS_NO_ERROR - if registration was successful.</returns>
        </member>
        <member name="M:PXCMFaceConfiguration.RecognitionConfiguration.CreateStorage(System.String,PXCMFaceConfiguration.RecognitionConfiguration.RecognitionStorageDesc@)">
            <summary> 
            Create a new Recognition database.
            </summary>
            <param name="storageName"> The name of the new database.</param>
            <returns> The new database description.</returns>
        </member>
        <member name="M:PXCMFaceConfiguration.GazeConfiguration.LoadCalibration(System.Byte[])">
            <summary>
            loads previously calculated calib data
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.GazeConfiguration.QueryCalibDataSize">
            <summary>
            retrieves calibration data size
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.GazeConfiguration.SetDominantEye(PXCMFaceData.GazeCalibData.DominantEye)">
            <summary>
            The actual dominant eye as entered by the user, modifying the optimal eye suggested by the calibration.
            An alternative option to setting the dominant eye would be to repeat calibration, QueryCalibDominantEye until desired result is reached.
            The dominant eye is a preference of visual input from one eye over the other.
            This is the eye relied on in the gaze inference algorithm.
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.PulseConfiguration.Enable">
            <summary>
            Enables pulse module.
            </summary>
        </member>
        <member name="M:PXCMFaceConfiguration.PulseConfiguration.Disable">
             <summary>
            Disables pulse module.
             </summary>
        </member>
        <member name="M:PXCMFaceData.QueryFiredAlertData(System.Int32,PXCMFaceData.AlertData@)">
                        @brief Get the details of the fired alert at the requested index.
                        @param[in] index the zero-based index of the requested fired alert .
                        @param[out] alertData contains all the information for the fired event. 
                        @see AlertData
                        @note the index is between 0 and the result of GetFiredAlertsNumber()
                        @see GetFiredAlertsNumber()
                        @return PXC_STATUS_NO_ERROR if returning fired alert data was successful; otherwise, return one of the following errors:
                        PXC_STATUS_PROCESS_FAILED - Module failure during processing.\n
                        PXC_STATUS_DATA_NOT_INITIALIZED - Data failed to initialize.\n
        </member>
        <member name="M:PXCMFaceData.IsAlertFired(PXCMFaceData.AlertData.AlertType,PXCMFaceData.AlertData@)">
                        @brief Return whether the specified alert is fired in the current frame, and retrieve its data if it is.
                        @param[in] alertEvent the ID of the event.
                        @param[out] alertData contains all the information for the fired event.
                        @see AlertData
                        @return true if the alert is fired, false otherwise.
        </member>
        <member name="M:PXCMFaceData.IsAlertFiredByFace(PXCMFaceData.AlertData.AlertType,System.Int32,PXCMFaceData.AlertData@)">
                        @brief Return whether the specified alert is fired for a specific face in the current frame, and retrieve its data.
                        @param[in] alertEvent the label of the alert event.
                        @param[in] faceID the ID of the face who's alert should be retrieved. 
                        @param[out] alertData contains all the information for the fired event.
                        @see AlertData
                        @return true if the alert is fired, false otherwise.
        </member>
        <member name="M:PXCMFaceData.Update">
            <summary>
             Updates data to latest available output.
            </summary>
        </member>
        <member name="M:PXCMFaceData.QueryFrameTimestamp">
            <summary>
             Returns detected frame timestamp.
            </summary>
        </member>
        <member name="M:PXCMFaceData.QueryNumberOfDetectedFaces">
            <summary>
             Returns number of total detected faces in frame.
            </summary>
        </member>
        <member name="M:PXCMFaceData.QueryFaceByID(System.Int32)">
            <summary>
             Returns tracked face corresponding with the algorithm-assigned faceId, null if no such faceId exists.
            </summary>
        </member>
        <member name="M:PXCMFaceData.QueryFaceByIndex(System.Int32)">
            <summary>
             Returns tracked face corresponding with the given index, 0 being the first according the to chosen tracking strategy;
            Returns null if no such index exists.
            </summary>
        </member>
        <member name="M:PXCMFaceData.QueryFiredAlertsNumber">
            <summary>
            Get the number of fired alerts in the current frame.
            </summary>
            <returns> the number of fired alerts.</returns>
        </member>
        <member name="M:PXCMFaceData.QueryAlertNameByID(PXCMFaceData.AlertData.AlertType,System.String@)">
            <summary>
            Return whether the specified alert is fired for a specific face in the current frame, and retrieve its data.
            </summary>
            <param name="alertEvent"> the label of the alert event.</param>
            <param name="outAlertName"> parameter to contain the name of the alert,maximum size - ALERT_NAME_SIZE</param>
            @see AlertData
            <returns> PXC_STATUS_NO_ERROR if returning the alert's name was successful; otherwise, return one of the following errors:
            PXCM_STATUS_PARAM_UNSUPPORTED - if outAlertName is null.
            PXCM_STATUS_DATA_UNAVAILABLE - if no alert corresponding to alertEvent was found.</returns>
        </member>
        <member name="M:PXCMFaceData.DetectionData.QueryFaceAverageDepth(System.Single@)">
             <summary>
             Assigns average depth of detected face to outFaceAverageDepth, 
            returns true if data and outFaceAverageDepth exists, false otherwise. 
             </summary>
        </member>
        <member name="M:PXCMFaceData.DetectionData.QueryBoundingRect(PXCMRectI32@)">
            <summary>
             Assigns 2D bounding rectangle of detected face to outBoundingRect, 
            returns true if data and outBoundingRect exists, false otherwise.
            </summary>
        </member>
        <member name="M:PXCMFaceData.LandmarksData.QueryNumPoints">
            <summary>
             Returns the number of tracked landmarks.
            </summary>
        </member>
        <member name="M:PXCMFaceData.LandmarksData.QueryPoints(PXCMFaceData.LandmarkPoint[]@)">
            <summary>
             Assigns all the points to outNumPoints array.
            Returns true if data and parameters exists, false otherwise.
            </summary>
        </member>
        <member name="M:PXCMFaceData.LandmarksData.QueryPoint(System.Int32,PXCMFaceData.LandmarkPoint@)">
            <summary>
             Assigns point matched to index to outPoint.
            Returns true if data and outPoint exists and index is correct, false otherwise.
            </summary>
        </member>
        <member name="M:PXCMFaceData.LandmarksData.QueryNumPointsByGroup(PXCMFaceData.LandmarksGroupType)">
            <summary>
             Returns the number of tracked landmarks in groupFlags.
            </summary>
        </member>
        <member name="M:PXCMFaceData.LandmarksData.QueryPointsByGroup(PXCMFaceData.LandmarksGroupType,PXCMFaceData.LandmarkPoint[]@)">
            <summary>
             Assigns points matched to groupFlags to outPoints.
            User is expected to allocate outPoints to size bigger than the group size - point contains the original source (index + name).
            Returns true if data and parameters exist, false otherwise.
            </summary>
        </member>
        <member name="M:PXCMFaceData.LandmarksData.QueryPointIndex(PXCMFaceData.LandmarkType)">
            <summary>
             Mapping function -> retrieves index corresponding to landmark's name.
            </summary>
        </member>
        <member name="M:PXCMFaceData.PoseData.QueryPoseAngles(PXCMFaceData.PoseEulerAngles@)">
            <summary>
             Assigns pose Euler angles to outPoseEulerAngles.
            Returns true if data and parameters exist, false otherwise.
            </summary>
        </member>
        <member name="M:PXCMFaceData.PoseData.QueryPoseQuaternion(PXCMFaceData.PoseQuaternion@)">
            <summary>
             Assigns pose rotation as quaternion to outPoseQuaternion.
            Returns true if data and parameters exist, false otherwise.
            </summary>
        </member>
        <member name="M:PXCMFaceData.PoseData.QueryHeadPosition(PXCMFaceData.HeadPosition@)">
            <summary>
             Assigns the head position to outHeadPosition.
            Returns true if data and parameters exist, false otherwise.
            </summary>
        </member>
        <member name="M:PXCMFaceData.PoseData.QueryRotationMatrix(System.Double[]@)">
            <summary>
             Assigns 3x3 face's rotation matrix to outRotationMatrix.
            Returns true if data and parameters exist, false otherwise.
            </summary>
        </member>
        <member name="M:PXCMFaceData.PoseData.QueryConfidence">
            <summary>
             Returns position(angle) confidence
            </summary>
        </member>
        <member name="M:PXCMFaceData.Face.QueryUserID">
            <summary>
             Returns user ID.
            </summary>
        </member>
        <member name="M:PXCMFaceData.Face.QueryDetection">
            <summary>
             Returns user's detection data instance - null if it is not enabled.
            </summary>
        </member>
        <member name="M:PXCMFaceData.Face.QueryLandmarks">
            <summary>
             Returns user's landmarks data instance - null if it is not enabled.
            </summary>
        </member>
        <member name="M:PXCMFaceData.Face.QueryPose">
            <summary>
             Returns user's pose data - null if it is not enabled.
            </summary>
        </member>
        <member name="M:PXCMFaceData.Face.QueryExpressions">
            <summary>
             Returns user's expressions data - null if it not enabled.
            </summary>
        </member>
        <member name="M:PXCMFaceData.Face.QueryRecognition">
            <summary>
             Returns user's recognition data - null if it is not enabled.
            </summary>
        </member>
        <member name="M:PXCMFaceData.Face.QueryGaze">
            <summary>
             Returns user's gaze data - null if it is not enabled.
            </summary>
        </member>
        <member name="M:PXCMFaceData.Face.QueryGazeCalibration">
            <summary>
             Returns user's gaze calibration data - null if it is not enabled.
            </summary>
        </member>
        <member name="M:PXCMFaceData.ExpressionsData.QueryExpression(PXCMFaceData.ExpressionsData.FaceExpression,PXCMFaceData.ExpressionsData.FaceExpressionResult@)">
            <summary>
            Queries single expression result
            </summary>
            <param name="expression">Single expression</param>
            <param name="expressionResult">Expression result - such as intensity</param>
            <returns>Returns true if expression was calculated successfully, false otherwise.</returns>
        </member>
        <member name="M:PXCMFaceData.RecognitionData.RegisterUser">
            <summary> 
            Register a user in the Recognition database.
            </summary>
            <returns> The unique user ID assigned to the registered face by the Recognition module.</returns>
        </member>
        <member name="M:PXCMFaceData.RecognitionData.UnregisterUser">
            <summary> 
            Removes a user from the Recognition database.
            </summary>
        </member>
        <member name="M:PXCMFaceData.RecognitionData.IsRegistered">
            <summary> 
            Checks if a user is registered in the Recognition database.
            </summary>
            <returns> true - if user is in the database, false otherwise.</returns>
        </member>
        <member name="M:PXCMFaceData.RecognitionData.QueryUserID">
            <summary> 
            Returns the ID assigned to the current face by the Recognition module
            </summary>
            <returns> The ID assigned by the Recognition module, or -1 if face was not recognized.</returns>
        </member>
        <member name="M:PXCMFaceData.GazeData.QueryGazePoint">
            <summary>
             Assigns gaze result to outGazeResult.
            Returns true if data and parameters exist, false otherwise.
            </summary>
        </member>
        <member name="M:PXCMFaceData.GazeData.QueryGazeHorizontalAngle">
            <summary>
             Return gaze horizontal angle in degrees.
            </summary>
        </member>
        <member name="M:PXCMFaceData.GazeData.QueryGazeVerticalAngle">
            <summary>
             Return gaze vertical angle in degrees.
            </summary>
        </member>
        <member name="M:PXCMFaceData.GazeCalibData.QueryCalibrationState">
            <summary>
             Assigns gaze result to outGazeResult.
            Returns true if data and parameters exist, false otherwise.
            </summary>
        </member>
        <member name="M:PXCMFaceData.GazeCalibData.QueryCalibPoint">
            <summary>
             Assigns gaze result to outGazeResult.
            Returns true if data and parameters exist, false otherwise.
            </summary>
        </member>
        <member name="M:PXCMFaceData.GazeCalibData.QueryCalibDataSize">
            <summary>
            retrieves calib data size
            </summary>
        </member>
        <member name="M:PXCMFaceData.GazeCalibData.QueryCalibData(System.Byte[]@)">
            <summary>
            retrieves calib data buffer
            </summary>
        </member>
        <member name="M:PXCMFaceData.GazeCalibData.QueryCalibDominantEye">
            <summary>
            The optimal eye of the current calibration - the one which yielded the highest accuracy between the two eyes, 
            aiming at hitting the user's dominant eye; Unless the user requested set of the dominant eye.
            This is the eye relied on in the gaze inference algorithm.				
            </summary>
        </member>
        <member name="T:PXCMFaceData.AlertData.AlertType">
            <summary>  AlertType
             Available events that can be detected by the system (alert types) 
            </summary>
        </member>
        <member name="M:PXCMFaceModule.CreateActiveConfiguration">
            <summary>
            create a new copy of active configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:PXCMFaceModule.CreateOutput">
            <summary>
            create a placeholder for output
            </summary>
            <returns></returns>
        </member>
        <member name="T:PXCMHandConfiguration">
            <summary>
            @class PXCMHandConfiguration
            Handles all the configuration options of the hand module.
            Use this interface to configure the tracking, alerts, gestures and output options.
            @note Updated configuration is applied only when ApplyChanges is called.
            </summary>
        </member>
        <member name="M:PXCMHandConfiguration.ApplyChanges">
            <summary>
            Apply the configuration changes to the module.
            This method must be called in order to apply the current configuration changes.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - configuration was not initialized.\n                        </returns>
        </member>
        <member name="M:PXCMHandConfiguration.RestoreDefaults">
            <summary>  
            Restore configuration settings to the default values.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - configuration was not initialized.\n                        </returns>
        </member>
        <member name="M:PXCMHandConfiguration.Update">
            <summary>
            Read current configuration settings from the module into this object.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - configuration was not read.\n                        </returns>
        </member>
        <member name="M:PXCMHandConfiguration.ResetTracking">
            <summary> 
            Restart the tracking process and reset all the skeleton information. 
            You might want to call this method, for example, when transitioning from one game level to another, \n
            in order to discard information that is not relevant to the new stage.
            
            @note ResetTracking will be executed only when processing the next frame.
            </summary>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_PROCESS_FAILED - there was a module failure during processing.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - the module was not initialized</returns>
        </member>
        <member name="M:PXCMHandConfiguration.SetUserName(System.String)">
            <summary>
            Specify the name of the current user for personalization.
            The user name will be used to save and retrieve specific measurements (calibration) for this user.
            </summary>
            <param name="userName"> - the name of the current user.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - illegal user name(e.g. an empty string)  or tracking mode is set to TRACKING_MODE_EXTREMITIES.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.QueryUserName">
            <summary>
            Get the name of the current user.
            </summary>
            <returns> A null-terminated string containing the user's name.	</returns>
        </member>
        <member name="M:PXCMHandConfiguration.EnableJointSpeed(PXCMHandData.JointType,PXCMHandData.JointSpeedType,System.Int32)">
            <summary>
            Activate calculation of the speed of a specific joint, according to the given mode.\n
            
            The output speed is a 3-dimensional vector, containing the the motion of the requested joint in each direction (x, y and z axis).\n
            By default, the joint speed calculation is disabled for all joints, in order to conserve CPU and memory resources.\n
            Typically the feature is only activated for a single fingertip or palm-center joint, as only the overall hand speed is useful.\n
            
            </summary>
            <param name="jointLabel"> - the identifier of the joint.</param>
            <param name="jointSpeed"> - the speed calculation method. Possible values are:\n</param>
            JOINT_SPEED_AVERAGE  - calculate the average joint speed, over the time period defined in the "time" parameter.\n
            JOINT_SPEED_ABSOLUTE - calculate the average of the absolute-value joint speed, over the time period defined in the "time" parameter.\n
            <param name="time"> - the period in milliseconds over which the average speed will be calculated (a value of 0 will return the current speed).</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - one of the arguments is invalid  or tracking mode is set to TRACKING_MODE_EXTREMITIES.</returns>
            
            @see PXCMHandData.JointType
            @see PXCMHandData.JointSpeedType
        </member>
        <member name="M:PXCMHandConfiguration.DisableJointSpeed(PXCMHandData.JointType)">
            <summary>
            Disable calculation of the speed of a specific joint.\n
            You may want to disable the feature when it is no longer needed, in order to conserve CPU and memory resources.\n
            </summary>
            <param name="jointLabel"> - the identifier of the joint</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid joint label  or tracking mode is set to TRACKING_MODE_EXTREMITIES.</returns>
            
            @see PXCMHandData.JointType
        </member>
        <member name="M:PXCMHandConfiguration.SetTrackingBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the boundaries of the tracking area.
            
            The tracking boundaries create a frustum shape in which the hand is tracked.\n
            (A frustum is a truncated pyramid, with 4 side planes and two rectangular bases.)\n
            When the tracked hand reaches one of the boundaries (near, far, left, right, top, or bottom), the appropriate alert is fired.
            </summary>
            
            <param name="nearTrackingDistance"> - nearest tracking distance (distance of small frustum base from sensor).</param>
            <param name="farTrackingDistance"> - farthest tracking distance (distance of large frustum base from sensor).</param>
            <param name="nearTrackingWidth"> - width of small frustum base.</param>
            <param name="nearTrackingHeight"> - height of small frustum base.</param>
            
            @note The frustum base centers are directly opposite the sensor.\n
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid argument.</returns>
            
            @see PXCMHandData.JointType
        </member>
        <member name="M:PXCMHandConfiguration.SetDefaultAge(System.Int32)">
            <summary>
            Loading a calibration file for specific age.
            People of different ages have different hand sizes and usually there is a correlation between the two.
            Knowing in advance the age of the players can improve the tracking in most cases.
            Call this method to load a calibration file that matches specific age. 
            We support specific hand calibrations for ages 4-14. Ages above 14 will use the default calibration.
            
            @Note: The best practice is to let the players perform online calibration, or load specific calibration per user.
            @Note: If you call SetUserName with an existing user name it will override SetDefaultAge
            @see SetUserName
            </summary>
            <param name="age"> the expected age of the players</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED for illegal ages  or tracking mode is set to TRACKING_MODE_EXTREMITIES.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.QueryDefaultAge">
            <summary>
            Retrieve the current calibration default age value.
            </summary>
            <returns> The current default age value.</returns>
            
            @see SetDefaultAge
        </member>
        <member name="M:PXCMHandConfiguration.QueryTrackingBounds(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Get the values defining the tracking boundaries frustum.
            
            </summary>
            <param name="nearTrackingDistance"> - nearest tracking distance (distance of small frustum base from sensor).</param>
            <param name="farTrackingDistance"> - farthest tracking distance (distance of large frustum base from sensor).</param>
            <param name="nearTrackingWidth"> - width of small frustum base.</param>
            <param name="nearTrackingHeight"> - height of small frustum base.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.  </returns>
        </member>
        <member name="M:PXCMHandConfiguration.SetTrackingMode(PXCMHandData.TrackingModeType)">
            <summary>
            Set the tracking mode, which determines the algorithm that will be applied for tracking hands.
            </summary>
            <param name="trackingMode"> - the tracking mode to be set. Possible values are:\n</param>
            TRACKING_MODE_FULL_HAND   - track the entire hand skeleton.\n
            TRACKING_MODE_EXTREMITIES - track only the mask and the extremities of the hand (the points that confine the tracked hand).\n
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXC_STATUS_PARAM_UNSUPPORTED - TrackingModeType is invalid.       </returns>
            @see PXCMHandData.TrackingModeType
        </member>
        <member name="M:PXCMHandConfiguration.QueryTrackingMode">
            <summary>
            Retrieve the current tracking mode, which indicates the algorithm that should be applied for tracking hands.
            </summary>
            <returns> TrackingModeType</returns>
            
            @see SetTrackingMode
            @see PXCMHandData.TrackingModeType
        </member>
        <member name="M:PXCMHandConfiguration.SetSmoothingValue(System.Single)">
            <summary>
            Sets the degree of hand motion smoothing.
            "Smoothing" is algorithm which overcomes local problems in tracking and produces smoother, more continuous tracking information.
            </summary>
            <param name="smoothingValue"> - a float value between 0 (not smoothed) and 1 (maximal smoothing).</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid smoothing value  or tracking mode is set to TRACKING_MODE_EXTREMITIES.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.QuerySmoothingValue">
            <summary>
            Retrieve the current smoothing value.
            </summary>
            <returns> The current smoothing value.</returns>
            
            @see SetSmoothingValue
        </member>
        <member name="M:PXCMHandConfiguration.EnableStabilizer(System.Boolean)">
            <summary>
            Enable or disable the hand stabilizer feature.\n
            
            Enabling this feature produces smoother tracking of the hand motion, ignoring small shifts and "jitters".\n
            (As a result, in some cases the tracking may be less sensitive to minor movements).
            </summary>
            
            <param name="enableFlag"> - true to enable the hand stabilizer; false to disable it.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXC_STATUS_PARAM_UNSUPPORTED - tracking mode is set to TRACKING_MODE_EXTREMITIES.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.IsStabilizerEnabled">
            <summary>
            Return hand stabilizer activation status.
            </summary>
            <returns> true if hand stabilizer is enabled, false otherwise.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.EnableNormalizedJoints(System.Boolean)">
            <summary>
            Enable the calculation of a normalized skeleton.\n
            Calculating the normalized skeleton transforms the tracked hand positions to those of a fixed-size skeleton.\n
            The positions of the normalized skeleton's joints can be retrieved by calling IHand::QueryNormalizedJoint.\n
            It is recommended to work with a normalized skeleton so that you can use the same code to identify poses and gestures,\n
            regardless of the hand size. (E.g. the same code can work for a child's hand and for an adult's hand.)
            
            </summary>
            <param name="enableFlag"> - true if the normalized skeleton should be calculated, otherwise false.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXC_STATUS_PARAM_UNSUPPORTED - tracking mode is set to TRACKING_MODE_EXTREMITIES.</returns>
            @see PXCMHandData.IHand.QueryNormalizedJoint
        </member>
        <member name="M:PXCMHandConfiguration.IsNormalizedJointsEnabled">
            <summary>
            Retrieve normalized joints calculation status.
            </summary>
            <returns> true if normalized joints calculation is enabled, false otherwise.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.EnableSegmentationImage(System.Boolean)">
            <summary>
            Enable calculation of the hand segmentation image.
            The hand segmentation image is an image mask of the tracked hand, where the hand pixels are white and all other pixels are black.
            </summary>
            <param name="enableFlag"> - true if the segmentation image should be calculated, false otherwise.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.          </returns>
        </member>
        <member name="M:PXCMHandConfiguration.IsSegmentationImageEnabled">
            <summary>
            Retrieve the hand segmentation image calculation status.
            </summary>
            <returns> true if calculation of the hand segmentation image is enabled, false otherwise.</returns>
            @see EnableSegmentationImage
        </member>
        <member name="M:PXCMHandConfiguration.EnableTrackedJoints(System.Boolean)">
            <summary>
            Enable the retrieval of tracked joints information.
            Enable joint tracking if your application uses specific joint positions; otherwise disable in order to conserve CPU/memory resources.\n
            @note This option doesn't affect the quality of the tracking, but only the availability of the joints info.
            </summary>
            <param name="enableFlag"> - true to enable joint tracking, false to disable it.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation was successful</returns>
            <returns> PXC_STATUS_PARAM_UNSUPPORTED - tracking mode is set to TRACKING_MODE_EXTREMITIES.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.IsTrackedJointsEnabled">
            <summary>
            Retrieve the joint tracking status.
            </summary>
            <returns> true if joint tracking is enabled, false otherwise.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.EnableAlert(PXCMHandData.AlertType)">
            <summary> 
            Enable alert messaging for a specific event.            
            </summary>
            <param name="alertEvent"> - the ID of the event to be enabled.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid alert type.</returns>
            
            @see PXCMHandData.AlertType
        </member>
        <member name="M:PXCMHandConfiguration.EnableAllAlerts">
            <summary> 
            Enable all alert messaging events.            
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
        </member>
        <member name="M:PXCMHandConfiguration.IsAlertEnabled(PXCMHandData.AlertType)">
            <summary> 
            Test the activation status of the given alert.
            </summary>
            <param name="alertEvent"> - the ID of the event to be tested.</param>
            <returns> true if the alert is enabled, false otherwise.</returns>
            
            @see PXCMHandData.AlertType
        </member>
        <member name="M:PXCMHandConfiguration.DisableAlert(PXCMHandData.AlertType)">
            <summary> 
            Disable alert messaging for a specific event.            
            </summary>
            <param name="alertEvent"> - the ID of the event to be disabled</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - unsupported parameter.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - data was not initialized.</returns>
            
            @see PXCMHandData.AlertType
        </member>
        <member name="M:PXCMHandConfiguration.DisableAllAlerts">
            <summary> 
            Disable messaging for all alerts.                        
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED - data was not initialized.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.SubscribeAlert(PXCMHandConfiguration.OnFiredAlertDelegate)">
            <summary> 
            Register an event handler object for the alerts. 
            The event handler's OnFiredAlert method is called each time an alert fires.
            </summary>
            <param name="alertHandler"> - a pointer to the event handler.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - null alertHandler pointer.</returns>
            
        </member>
        <member name="M:PXCMHandConfiguration.UnsubscribeAlert(PXCMHandConfiguration.OnFiredAlertDelegate)">
            <summary> 
            Unsubscribe an alert handler object.
            </summary>
            <param name="alertHandler"> - a pointer to the event handler to unsubscribe.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - illegal alertHandler (null pointer).</returns>
        </member>
        <member name="M:PXCMHandConfiguration.LoadGesturePack(System.String)">
            <summary> 
            Load a set of gestures from a specified path. 
            A gesture pack is a collection of pre-trained gestures.\n
            After this call, the gestures that are contained in the pack are available for identification.\n
            </summary>
            <param name="gesturePackPath"> - the full path of the gesture pack location.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - empty path or empty list of gestures.</returns>
            @note This method should be used only for external gesture packs, and not for the default gesture pack, which is loaded automatically.
        </member>
        <member name="M:PXCMHandConfiguration.UnloadGesturePack(System.String)">
            <summary> 
            Unload the set of gestures contained in the specified path.
            </summary>
            <param name="gesturePackPath"> - the full path of the the gesture pack location.</param>
            <returns> PXC_STATUS_NO_ERROR - operation succeeded.   </returns>
        </member>
        <member name="M:PXCMHandConfiguration.UnloadAllGesturesPacks">
            <summary> 
            Unload all the currently loaded sets of the gestures.\n
            If you are using multiple gesture packs, you may want to load only the packs that are relevant to a particular stage in your application\n
            and unload all others. This can boost the accuracy of gesture recognition, and conserves system resources.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
        </member>
        <member name="M:PXCMHandConfiguration.QueryGesturesTotalNumber">
            <summary>
            Retrieve the total number of available gestures that were loaded from all gesture packs.
            </summary>
            <returns> The total number of loaded gestures.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.QueryGestureNameByIndex(System.Int32,System.String@)">
            <summary> 
            Retrieve the gesture name that matches the given index.
            </summary>
            <param name="index"> - the index of the gesture whose name you want to retrieve.</param>
            <param name="bufferSize"> - the size of the preallocated gestureName buffer.</param>
            <param name="gestureName"> - preallocated buffer to be filled with the gesture name.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.  </returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE - no gesture for the given index value.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.EnableGesture(System.String,System.Boolean)">
            <summary> 
            Enable a gesture, so that events are fired when the gesture is identified.
            </summary>
            <param name="gestureName"> - the name of the gesture to be enabled.</param>
            <param name="continuousGesture"> - set to "true" to get an "in progress" event at every frame for which the gesture is active, or "false" to get only "start" and "end" states of the gesture.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid parameter.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.EnableGesture(System.String)">
            <summary> 
            Enable a gesture, so that events are fired when the gesture is identified.
            </summary>
            <param name="gestureName"> - the name of the gesture to be enabled.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid parameter.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.EnableAllGestures(System.Boolean)">
            <summary> 
            Enable all gestures, so that events are fired for every gesture identified.		
            </summary>
            <param name="continuousGesture"> - set to "true" to get an "in progress" event at every frame for which the gesture is active, or "false" to get only "start" and "end" states of the gesture.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.   </returns>
        </member>
        <member name="M:PXCMHandConfiguration.EnableAllGestures">
            <summary> 
            Enable all gestures, so that events are fired for every gesture identified.		
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.   </returns>
        </member>
        <member name="M:PXCMHandConfiguration.IsGestureEnabled(System.String)">
            <summary> 
            Check whether a gesture is enabled.
            </summary>
            <param name="gestureName"> - the name of the gesture to be tested.</param>
            <returns> true if the gesture is enabled, false otherwise.</returns>
        </member>
        <member name="M:PXCMHandConfiguration.DisableGesture(System.String)">
            <summary> 
            Deactivate identification of a gesture. Events will no longer be fired for this gesture.            
            </summary>
            <param name="gestureName"> - the name of the gesture to deactivate.</param>
            <returns> PXC_STATUS_NO_ERROR - operation succeeded. </returns>
            PXCM_STATUS_PARAM_UNSUPPORTED - invalid gesture name.
        </member>
        <member name="M:PXCMHandConfiguration.DisableAllGestures">
            <summary> 
            Deactivate identification of all gestures. Events will no longer be fired for any gesture.            
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.  </returns>
        </member>
        <member name="M:PXCMHandConfiguration.SubscribeGesture(PXCMHandConfiguration.OnFiredGestureDelegate)">
            <summary> 
            Register an event handler object to be called on gesture events.
            The event handler's OnFiredGesture method will be called each time a gesture is identified.
            </summary>
            <param name="gestureHandler"> - a pointer to the gesture handler.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - null gesture handler.</returns> 
        </member>
        <member name="M:PXCMHandConfiguration.UnsubscribeGesture(PXCMHandConfiguration.OnFiredGestureDelegate)">
            <summary> 
            Unsubscribe a gesture event handler object.
            After this call no callback events will be sent to the given gestureHandler.
            </summary>
            <param name="gestureHandler"> - a pointer to the event handler to unsubscribe.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded. </returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - null gesture handler.     </returns>
        </member>
        <member name="T:PXCMHandCursorModule">
            <summary>
            @Class PXCHandCursorModule 
            The main interface to the hand cursor module's classes.\n
            Use this interface to access the hand cursor module's configuration and output data.
            </summary>
        </member>
        <member name="M:PXCMHandCursorModule.CreateActiveConfiguration">
            <summary> 
             @brief Create a new instance of the hand cursor module's active configuration.
             Multiple configuration instances can be created in order to define different configurations for different stages of the application.
              You can switch between the configurations by calling the ApplyChanges method of the required configuration instance.
            </summary> 
            <returns> A pointer to the configuration instance.</returns>
              @see PXCMCursorConfiguration
        </member>
        <member name="M:PXCMHandCursorModule.CreateOutput">
            <summary> 
            Create a new instance of the hand cursor module's current output data.
            Multiple instances of the output can be created in order to store previous tracking states. 
            </summary>
            <returns> A pointer to the output data instance.</returns>
            @see PXCMCursorData
        </member>
        <member name="T:PXCMHandData">
            <summary>
            @class PXCMHandData
            This class holds all the output of the hand tracking process.
            
            Each instance of this class holds the information of a specific frame.
            </summary>
        </member>
        <member name="M:PXCMHandData.Update">
            <summary>
            Updates hand data to the most current output.
            </summary>
        </member>
        <member name="M:PXCMHandData.QueryFiredAlertsNumber">
            <summary>
            Return the number of fired alerts in the current frame.
            </summary>
        </member>
        <member name="M:PXCMHandData.QueryFiredAlertData(System.Int32,PXCMHandData.AlertData@)">
            <summary> 
            Get the details of the fired alert with the given index.
            
            <param name="index"> - the zero-based index of the requested fired alert.</param>
            <param name="alertData"> - the information for the fired event.</param>
            
            @note the index is between 0 and the result of QueryFiredAlertsNumber()
            </summary>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid input parameter.</returns>
            
            @see AlertData
            @see QueryFiredAlertsNumber
        </member>
        <member name="M:PXCMHandData.IsAlertFired(PXCMHandData.AlertType,PXCMHandData.AlertData@)">
            <summary>
            Return whether the specified alert is fired in the current frame, and retrieve its data if it is.
            </summary> 
            <param name="alertEvent"> - the ID of the fired event.</param>
            <param name="alertData"> - the information for the fired event.</param>
            
            <returns> true if the alert is fired, false otherwise.</returns>
            
            @see AlertType
            @see AlertData
        </member>
        <member name="M:PXCMHandData.IsAlertFiredByHand(PXCMHandData.AlertType,System.Int32,PXCMHandData.AlertData@)">
            <summary>
            Return whether the specified alert is fired for a specific hand in the current frame, and retrieve its data.
            </summary> 
            <param name="alertEvent"> - the alert type.</param>
            <param name="handID"> - the ID of the hand whose alert should be retrieved.</param>
            <param name="alertData"> - the information for the fired event.</param>
            <returns> true if the alert is fired, false otherwise.</returns>
            
            @see AlertType
            @see AlertData
            
        </member>
        <member name="M:PXCMHandData.QueryFiredGesturesNumber">
            <summary> 
            Return the number of gestures fired in the current frame.
            </summary>
        </member>
        <member name="M:PXCMHandData.QueryFiredGestureData(System.Int32,PXCMHandData.GestureData@)">
            <summary> 
            Get the details of the fired gesture with the given index.
            </summary> 
            <param name="index"> - the zero-based index of the requested fired gesture.</param>
            <param name="gestureData"> - the information for the fired gesture.</param>
            
            @note The gesture index must be between 0 and [QueryFiredGesturesNumber() - 1]
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid input parameter.</returns>
            
            @see GestureData
            @see QueryFiredGesturesNumber
        </member>
        <member name="M:PXCMHandData.IsGestureFired(System.String,PXCMHandData.GestureData@)">
            <summary> 
            Check whether a gesture was fired and if so return its details.
            </summary> 
            <param name="gestureName"> - the name of the gesture to be checked.</param>
            <param name="gestureData"> - the information for the fired gesture.</param>
            
            <returns> true if the gesture was fired, false otherwise.</returns>
            
            @see GestureData
        </member>
        <member name="M:PXCMHandData.IsGestureFiredByHand(System.String,System.Int32,PXCMHandData.GestureData@)">
            <summary>
            Return whether the specified gesture is fired for a specific hand in the current frame, and if so retrieve its data.
            </summary>
            <param name="gestureName"> - the name of the gesture to be checked.</param>
            <param name="handID"> - the ID of the hand whose alert should be retrieved.</param>
            <param name="gestureData"> - the information for the fired gesture.</param>
            
            <returns> true if the gesture was fired, false otherwise.</returns>
            @see GestureData
        </member>
        <member name="M:PXCMHandData.QueryNumberOfHands">
            <summary> 
            Return the number of hands detected in the current frame.            
            </summary>
        </member>
        <member name="M:PXCMHandData.QueryHandId(PXCMHandData.AccessOrderType,System.Int32,System.Int32@)">
            <summary> 
            Retrieve the given hand's uniqueId.		
            </summary>
            
            <param name="accessOrder"> - the order in which the hands are enumerated (accessed).</param>
            <param name="index"> - the index of the hand to be retrieved, based on the given AccessOrder.</param>
            <param name="handId"> - the hand's uniqueId.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - invalid parameter.</returns>
            
            @see AccessOrderType		
        </member>
        <member name="M:PXCMHandData.QueryHandData(PXCMHandData.AccessOrderType,System.Int32,PXCMHandData.IHand@)">
            <summary> 
            Retrieve the hand object data using a specific AccessOrder and related index.
            </summary>
            
            <param name="accessOrder"> - the order in which the hands are enumerated (accessed).</param>
            <param name="index"> - the index of the hand to be retrieved, based on the given AccessOrder.</param>
            <param name="handData"> - the information for the hand.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - index >= MAX_NUM_HANDS.</returns>
            <returns> PXCM_STATUS_DATA_UNAVAILABLE  - index >= number of detected hands.</returns>
            
            @see AccessOrder
            @see IHand		
        </member>
        <member name="M:PXCMHandData.QueryHandDataById(System.Int32,PXCMHandData.IHand@)">
            <summary> 
            Retrieve the hand object data by its unique Id.
            </summary>
            <param name="handID"> - the unique ID of the requested hand</param>
            <param name="handData"> - the information for the hand.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_DATA_UNAVAILABLE  - there is no output hand data.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED - there is no hand data for the given hand ID. </returns>
            
            @see IHand		
        </member>
        <member name="T:PXCMHandData.IHand">
            <summary> 
            @class IHand
            Contains all the properties of the hand that were calculated by the tracking algorithm
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryUniqueId">
            <summary>	
            Return the hand's unique identifier.
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryUserId">
            <summary> 
            Return the identifier of the user whose hand is represented.
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryTimeStamp">
            <summary> 
            Return the time-stamp in which the collection of the hand data was completed.
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.IsCalibrated">
            <summary>
            Return true if there is a valid hand calibration, otherwise false.
            A valid calibration results in more accurate tracking data, that is better fitted to the user's hand.\n
            After identifying a new hand, the hand module calculates its calibration. When calibration is complete, an alert is issued.\n
            Tracking is more robust for a calibrated hand.
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryBodySide">
            <summary> 		
            Return the side of the body to which the hand belongs (when known).
            @note This information is available only in full-hand tracking mode (TRACKING_MODE_FULL_HAND).
            @see PXCMHandConfiguration.SetTrackingMode
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryBoundingBoxImage">
            <summary>	
            Return the location and dimensions of the tracked hand, represented by a 2D bounding box (defined in pixels).
            </summary>
            <returns> The location and dimensions of the 2D bounding box.</returns>
        </member>
        <member name="M:PXCMHandData.IHand.QueryMassCenterImage">
            <summary> 		
            Return the 2D center of mass of the hand in image space (in pixels).
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryMassCenterWorld">
            <summary> 		
            Return the 3D center of mass of the hand in world space (in meters).
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryPalmOrientation">
            <summary> 		
            A quaternion representing the global 3D orientation of the palm.
            @note This information is available only in full-hand tracking mode (TRACKING_MODE_FULL_HAND).
            @see PXCMHandConfiguration.SetTrackingMode
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryOpenness">
            <summary> 		
            Return the degree of openness of the hand.
            The possible degree values range from 0 (all fingers completely folded) to 100 (all fingers fully spread).
            @note This information is available only in full-hand tracking mode (TRACKING_MODE_FULL_HAND)
            @see PXCMHandConfiguration.SetTrackingMode
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryPalmRadiusImage">
            <summary> 		
            Return the palm radius in image space (number of pixels). 
            The palm radius is the radius of the minimal circle that contains the hand's palm.
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryPalmRadiusWorld">
            <summary> 		
            Return the palm radius in world space (meters).
            The palm radius is the radius of the minimal circle that contains the hand's palm.
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryTrackingStatus">
            <summary>  Return the tracking status (a bit-mask of one or more TrackingStatusType enum values).
            @see TrackingStatusType 
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryExtremityPoint(PXCMHandData.ExtremityType,PXCMHandData.ExtremityData@)">
            <summary> 		
            Return the data of a specific extremity point
            </summary>
            <param name="extremityLabel"> - the id of the requested extremity point.</param>
            <param name="extremityPoint"> - the location data of the requested extremity point.</param>
            
            <returns> PXC_STATUS_NO_ERROR - operation succeeded.</returns>
            
            @see ExtremityType
            @see ExtremityData
        </member>
        <member name="M:PXCMHandData.IHand.QueryFingerData(PXCMHandData.FingerType,PXCMHandData.FingerData@)">
            <summary> 
            Return the data of the requested finger
            @note This information is available only in full-hand tracking mode (TRACKING_MODE_FULL_HAND)
            @see PXCHandConfiguration::SetTrackingMode
            </summary> 
            <param name="fingerLabel"> - the ID of the requested finger.</param>
            <param name="fingerData"> - the tracking data of the requested finger.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            
            @see FingerType
            @see FingerData
        </member>
        <member name="M:PXCMHandData.IHand.QueryTrackedJoint(PXCMHandData.JointType,PXCMHandData.JointData@)">
            <summary> 
            Return the tracking data of a single hand joint
            @note This information is available only in full-hand tracking mode (TRACKING_MODE_FULL_HAND), when tracked-joints are enabled.
            @see PXCHandConfiguration::SetTrackingMode
            @see PXCHandConfiguration::EnableTrackedJoints
            </summary> 
            <param name="jointLabel"> - the ID of the requested joint.</param>
            <param name="jointData"> - the tracking data of the requested hand joint.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            
            @see JointType
            @see JointData
        </member>
        <member name="M:PXCMHandData.IHand.QueryNormalizedJoint(PXCMHandData.JointType,PXCMHandData.JointData@)">
            <summary> 
            Return the tracking data of a single normalized-hand joint.
            @note This information is available only in full-hand tracking mode, when normalized-skeleton is enabled.
            @see PXCHandConfiguration::SetTrackingMode
            @see PXCHandConfiguration::EnableNormalizedJoints
            </summary> 
            <param name="jointLabel"> - the ID of the requested joint.</param>
            <param name="jointData"> - the tracking data of the requested normalized-hand joint.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            
            @see JointType
            @see JointData
        </member>
        <member name="M:PXCMHandData.IHand.QuerySegmentationImage(PXCMImage@)">
            <summary>			
            Retrieve the 2D image mask of the tracked hand. 	 
            In the image mask, each pixel occupied by the hand is white (value of 255) and all other pixels are black (value of 0).
            @note This information is available only when the segmentation image is enabled.
            @see PXCHandConfiguration::EnableSegmentationImage
            </summary>
            <param name="image"> - the 2D image mask.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_DATA_UNAVAILABLE - image mask is not available.		</returns>
        </member>
        <member name="M:PXCMHandData.IHand.HasTrackedJoints">
            <summary> 
             Return true/false if tracked joints data exists 
            @note This information is available only when full-hand tracking mode is enabled.
            @see PXCMHandConfiguration.SetTrackingMode
            @see PXCMHandConfiguration.EnableTrackedJoints
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.HasNormalizedJoints">
            <summary> 
             Return true/false if normalized joint data exists .
            @note This information is available only in full-hand tracking mode, when normalized-skeleton is enabled.
            @see PXCMHandConfiguration.SetTrackingMode
            @see PXCMHandConfiguration.EnableNormalizedJoints
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.HasSegmentationImage">
            <summary> 
             Return true/false if hand segmentation image exists. 
            @see PXCMHandConfiguration.EnableSegmentationImage
            </summary>
        </member>
        <member name="M:PXCMHandData.IHand.QueryNumberOfContours">
            <summary> 
            Get the number of contour lines extracted (both external and internal).
            </summary>
            <returns> The number of contour lines extracted.</returns>
        </member>
        <member name="M:PXCMHandData.IHand.QueryContour(System.Int32,PXCMHandData.IContour@)">
            <summary>
            Retrieve an IContour object using index (that relates to the given order).
            </summary>
            <param name="index"> - the zero-based index of the requested contour (between 0 and QueryNumberOfContours()-1 ).</param>
            <param name="contourData"> - contains the extracted contour line data.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_DATA_UNAVAILABLE  - index >= number of detected contours. </returns>
            
            @see IContour       
        </member>
        <member name="T:PXCMHandData.IContour">
            <summary> 
            @class IContour
            An interface that provides access to the contour line data.
            </summary>
        </member>
        <member name="M:PXCMHandData.IContour.QueryPoints(PXCMPointI32[]@)">
            <summary> 
            Get the point array representing a contour line.
            </summary>
            <param name="maxSize"> - the size of the array allocated for the contour points.</param>
            <param name="contour"> - the contour points stored in the user-allocated array.</param>
            
            <returns> PXCM_STATUS_NO_ERROR - successful operation.           </returns>
        </member>
        <member name="M:PXCMHandData.IContour.IsOuter">
            <summary> 
            Return true for the blob's outer contour; false for inner contours.
            <param name="index"> - the zero-based index of the requested contour.</param>
            <returns> true for the blob's outer contour; false for inner contours.</returns>
            </summary>
        </member>
        <member name="M:PXCMHandData.IContour.QuerySize">
            <summary> 
            Get the contour size (number of points in the contour line).
            This is the size of the points array that you should allocate.
            </summary>
            <param name="index"> - the zero-based index of the requested contour line.</param>
            <returns> The contour size (number of points in the contour line).</returns>
        </member>
        <member name="T:PXCMHandData.JointType">
            <summary>  JointType
            Identifiers of joints that can be tracked by the hand module.
            </summary>
        </member>
        <member name="T:PXCMHandData.ExtremityType">
            <summary>
            ExtremityType
            Identifier of extremity points of the tracked hand.
            </summary>
        </member>
        <member name="F:PXCMHandData.ExtremityType.EXTREMITY_CLOSEST">
            The closest point to the camera in the tracked hand
        </member>
        <member name="T:PXCMHandData.FingerType">
            <summary>  FingerType
            Finger identifiers.
            </summary>
        </member>
        <member name="F:PXCMHandData.FingerType.FINGER_THUMB">
            Thumb finger
        </member>
        <member name="T:PXCMHandData.BodySideType">
            <summary>  BodySideType
            The side of the body to which a hand belongs.\n
            @note Body sides are reported from the player's point-of-view, not the sensor's.
            </summary>
        </member>
        <member name="F:PXCMHandData.BodySideType.BODY_SIDE_UNKNOWN">
            The side was not determined    
        </member>
        <member name="T:PXCMHandData.AlertType">
            <summary>  AlertType
            Identifiers for the events that can be detected and fired by the hand module.
            </summary>
        </member>
        <member name="T:PXCMHandData.GestureStateType">
            <summary> 
            GestureStateType
            Enumerates the possible states of a gesture (start/in progress/end).
            @note Depending on the configuration, you can either get "start" and "end" events when the gesture starts/ends,\n
            or get the "in_progress" event for every frame in which the gesture is detected. 
            See the "continuousGesture" flag in PXCHandConfiguration::enableGesture for more details.
            @see PXCMHandConfiguration.enableGesture
            </summary>
        </member>
        <member name="F:PXCMHandData.GestureStateType.GESTURE_STATE_START">
            Gesture started - fired at the first frame where the gesture is identified
        </member>
        <member name="T:PXCMHandData.TrackingModeType">
            <summary> 
            TrackingModeType
            Defines the possible tracking modes.
            TRACKING_MODE_FULL_HAND - enables full tracking of the hand skeleton, including all the joints' information.
            TRACKING_MODE_EXTREMITIES - tracks only the hand's mask and its extremity points.		   
            </summary>
        </member>
        <member name="F:PXCMHandData.TrackingModeType.TRACKING_MODE_FULL_HAND">
            Track the full skeleton (22 joints)
        </member>
        <member name="T:PXCMHandData.JointSpeedType">
            <summary> 
            JointSpeedType
            Modes for calculating the joints' speed.
            </summary>
        </member>
        <member name="F:PXCMHandData.JointSpeedType.JOINT_SPEED_AVERAGE">
            Average of signed speed values (which are positive or negative depending on direction) across time
        </member>
        <member name="T:PXCMHandData.TrackingStatusType">
            <summary>
            TrackingStatusType
            Status values of hand tracking.
            In case of problematic tracking conditions, this value indicates the problem type.
            </summary>
        </member>
        <member name="F:PXCMHandData.TrackingStatusType.TRACKING_STATUS_GOOD">
            Optimal tracking conditions
        </member>
        <member name="T:PXCMHandData.AccessOrderType">
            <summary> 
            AccessOrderType
            Orders in which the hands can be accessed.
            </summary>
        </member>
        <member name="F:PXCMHandData.AccessOrderType.ACCESS_ORDER_BY_ID">
            By unique ID of the hand
        </member>
        <member name="T:PXCMHandData.JointData">
            <summary>  JointData
            A structure containing information about the position and rotation of a joint in the hand's skeleton.
            See the Hand Module Developer Guide for more details.
            </summary>
        </member>
        <member name="F:PXCMHandData.JointData.positionWorld">
            RESERVED: for future confidence score feature
        </member>
        <member name="F:PXCMHandData.JointData.positionImage">
            The geometric position in 3D world coordinates, in meters
        </member>
        <member name="F:PXCMHandData.JointData.localRotation">
            The geometric position in 2D image coordinates, in pixels. (Note: the Z coordinate is the point's depth in millimeters.)
        </member>
        <member name="F:PXCMHandData.JointData.globalOrientation">
            A quaternion representing the local 3D orientation of the joint, relative to its parent joint
        </member>
        <member name="F:PXCMHandData.JointData.speed">
            A quaternion representing the global 3D orientation, relative to the "world" y axis
        </member>
        <member name="T:PXCMHandData.ExtremityData">
            <summary> 
            ExtremityData
            Defines the positions of an extremity point.
            </summary>
        </member>
        <member name="F:PXCMHandData.ExtremityData.pointImage">
            3D world coordinates of the extremity point
        </member>
        <member name="T:PXCMHandData.FingerData">
            <summary> 
            FingerData
            Defines the properties of a finger.
            </summary>
        </member>
        <member name="F:PXCMHandData.FingerData.radius">
            The degree of "foldedness" of the tracked finger, ranging from 0 (least folded / straight) to 100 (most folded).
        </member>
        <member name="T:PXCMHandData.AlertData">
            <summary> 
            AlertData
            Defines the properties of an alert event
            </summary>
        </member>
        <member name="F:PXCMHandData.AlertData.handId">
            The type of alert
        </member>
        <member name="F:PXCMHandData.AlertData.timeStamp">
            The ID of the hand that triggered the alert, if relevant and known
        </member>
        <member name="F:PXCMHandData.AlertData.frameNumber">
            The time-stamp in which the event occurred
        </member>
        <member name="T:PXCMHandData.GestureData">
            <summary> 
            GestureData
            Defines the properties of a gesture.
            
            The gestures in the default gesture package (installed with the hand module by default) are:
            Gesture that are available for TRACKING_MODE_FULL_HAND:
            "spreadfingers"  - hand open facing the camera.
            "thumb_up" - hand closed with thumb pointing up.
            "thumb_down"  - hand closed with thumb pointing down.
            "two_fingers_pinch_open"  - hand open with thumb and index finger touching each other.
            "v_sign" - hand closed with index finger and middle finger pointing up.
            "fist" - all fingers folded into a fist. The fist can be in different orientations as long as the palm is in the general direction of the camera.
            "full_pinch" - all fingers extended and touching the thumb. The pinched fingers can be anywhere between pointing directly to the screen or in profile. 
            "tap" - a hand in a natural relaxed pose is moved forward as if pressing a button.
            "wave" - an open hand facing the screen. The wave gesture's length can be any number of repetitions.
            "click" - hand facing the camera either with open palm or closed move the index finger fast toward the palm center as if clicking on a mouse.
            "swipe_down" - hold hand towards the camera and moves it down and then return it toward the starting position.
            "swipe_up" - hold hand towards the camera and moves it up and then return it toward the starting position.
            "swipe_right" - hold hand towards the camera and moves it right and then return it toward the starting position.
            "swipe_left" - hold hand towards the camera and moves it left and then return it toward the starting position.            
            </summary>
        </member>
        <member name="F:PXCMHandData.GestureData.handId">
            Time-stamp in which the gesture occurred
        </member>
        <member name="F:PXCMHandData.GestureData.state">
            The ID of the hand that made the gesture, if relevant and known
        </member>
        <member name="F:PXCMHandData.GestureData.frameNumber">
            The state of the gesture (start, in progress, end)		
        </member>
        <member name="F:PXCMHandData.GestureData.name">
            The number of the frame in which the gesture occurred (relevant for recorded sequences)		
        </member>
        <member name="M:PXCMHandData.GestureData.#ctor">
            The gesture name
        </member>
        <member name="T:PXCMHandModule">
            <summary>
            @Class PXCMHandModule 
            The main interface to the hand module's classes.\n
            Use this interface to access the hand module's configuration and output data.
            </summary>
        </member>
        <member name="M:PXCMHandModule.CreateActiveConfiguration">
            <summary> 
            Create a new instance of the hand module's active configuration.
            Multiple configuration instances can be created in order to define different configurations for different stages of the application.
            You can switch between the configurations by calling the ApplyChanges method of the required configuration instance.
            </summary>
            <returns> A pointer to the configuration instance.</returns>
            @see PXCMHandConfiguration
        </member>
        <member name="M:PXCMHandModule.CreateOutput">
            <summary> 
            Create a new instance of the hand module's current output data.
            Multiple instances of the output can be created in order to store previous tracking states. 
            </summary>
            <returns> A pointer to the output data instance.</returns>
            @see PXCMHandData
        </member>
        <member name="M:NativeTexturePlugin.Activate">
            <summary>
            Enable and Query the NativeTexturePlugin instance.
            Texture2Ds must be created with correct PXCMImage.info.width, PXCMImage.info.hight and TextureFormat.BGRA32.
            Only DX9, DX11, OpenGL2 supported.
            Color and Depth supported.
            </summary>
            <returns>NativeTexturePlugin instance.</returns>
        </member>
        <member name="M:NativeTexturePlugin.UpdateTextureNative(PXCMImage,System.IntPtr)">
            <summary>
            Texture2Ds passed need to be of correct PXCMImage.info.width, PXCMImage.info.height and TextureFormat.BGRA.
            Supports DX9, DX11 and OpenGL2.
            </summary>
            <param name="srcimage">color or depth PXCMImage</param>
            <param name="texture2DPtr">Retrieve using Texture2D.GetNativeTexturePtr()</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PXCMImage" -->
        <member name="M:PXCMImage.QueryInfo">
                    @brief Return the image sample information.
                    @return the image sample information in the ImageInfo structure.
        </member>
        <member name="M:PXCMImage.AcquireAccess(PXCMImage.Access,PXCMImage.PixelFormat,PXCMImage.Option,PXCMImage.ImageData@)">
                    @brief Lock to access the internal storage of a specified format. The function will perform format conversion if unmatched. 
                    @param[in] access           The access mode.
                    @param[in] format           The requested smaple format.
                    @param[in] options          The option flags. 
                    @param[out] data            The sample data storage, to be returned.
                    @return PXCM_STATUS_NO_ERROR    Successful execution.
        </member>
        <member name="M:PXCMImage.ReleaseAccess(PXCMImage.ImageData)">
                    @brief Unlock the previously acquired buffer.
                    @param[in] data             The sample data storage previously acquired.
                    @return PXCM_STATUS_NO_ERROR    Successful execution.
        </member>
        <member name="M:PXCMImage.PXCMImage_QueryRotation(System.IntPtr)">
                    @brief Query rotation data.
        </member>
        <member name="M:PXCMImage.PixelFormatToString(PXCMImage.PixelFormat)">
            <summary> 
            Convert pixel format to a string representation
            </summary>
            <param name="format"> pixel format.</param>
            <returns> string presentation.</returns>
        </member>
        <member name="M:PXCMImage.QueryTimeStamp">
            <summary> 
            Return the image sample time stamp.
            </summary>
            <returns> the time stamp, in 100ns.</returns>
        </member>
        <member name="M:PXCMImage.QueryStreamType">
            <summary> 
            Return the image stream type.
            </summary>
            <returns> the stream type.</returns>
        </member>
        <member name="M:PXCMImage.QueryOptions">
            <summary> 
            Return the image option flags.
            </summary>
            <returns> the option flags.</returns>
        </member>
        <member name="M:PXCMImage.SetTimeStamp(System.Int64)">
            <summary> 
            Set the sample time stamp.
            </summary>
            <param name="ts"> The time stamp value, in 100ns.</param>
        </member>
        <member name="M:PXCMImage.SetStreamType(PXCMCapture.StreamType)">
            <summary> 
            Set the sample stream type.
            </summary>
            <param name="streamType"> The sample stream type.</param>
        </member>
        <member name="M:PXCMImage.SetOptions(PXCMImage.Option)">
            <summary> 
            Set the sample options. This function overrides any previously set options.
            </summary>
            <param name="options"> The image options.</param>
        </member>
        <member name="M:PXCMImage.CopyImage(PXCMImage)">
            <summary>    
            Copy image data from another image sample.
            </summary>
            <param name="src_image"> The image sample to copy data from.</param>
            <returns> PXC_STATUS_NO_ERROR     Successful execution.</returns>
        </member>
        <member name="M:PXCMImage.ExportData(PXCMImage.ImageData,System.Int32)">
            <summary> 
            Copy image data to the specified external buffer.
            </summary>
            <param name="data"> The ImageData structure that describes the image buffer.</param>
            <param name="options"> Reserved.</param>
            <returns> PXCM_STATUS_NO_ERROR     Successful execution.</returns>
        </member>
        <member name="M:PXCMImage.ImportData(PXCMImage.ImageData,System.Int32)">
            <summary> 
            Copy image data from the specified external buffer.
            </summary>
            <param name="data"> The ImageData structure that describes the image buffer.</param>
            <param name="options"> Reserved.</param>
            <returns> PXCM_STATUS_NO_ERROR     Successful execution.</returns>
        </member>
        <member name="M:PXCMImage.AcquireAccess(PXCMImage.Access,PXCMImage.ImageData@)">
            <summary> 
            Lock to access the internal storage of a specified format. 
            </summary>
            <param name="access"> The access mode.</param>
            <param name="data"> The sample data storage, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR    Successful execution.</returns>
        </member>
        <member name="M:PXCMImage.AcquireAccess(PXCMImage.Access,PXCMImage.PixelFormat,PXCMImage.ImageData@)">
            <summary> 
            Lock to access the internal storage of a specified format. The function will perform format conversion if unmatched. 
            </summary>
            <param name="access"> The access mode.</param>
            <param name="format"> The requested smaple format.</param>
            <param name="data"> The sample data storage, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR    Successful execution.</returns>
        </member>
        <member name="M:PXCMImage.AcquireAccess(PXCMImage.Access,PXCMImage.PixelFormat,PXCMImage.Rotation,PXCMImage.Option,PXCMImage.ImageData@)">
            <summary> 
            Lock to access the internal storage of a specified format. The function will perform format conversion if unmatched. 
            </summary>
            <param name="access"> The access mode.</param>
            <param name="format"> The requested smaple format.</param>
            <param name="rotation"> The image rotation</param>
            <param name="data"> The sample data storage, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR    Successful execution.</returns>
        </member>
        <member name="M:PXCMImage.AddRef">
            <summary> 
            Increase a reference count of the sample.
            </summary>
        </member>
        <member name="M:PXCMImage.QueryRotation">
            <summary> 
            Query rotation data.
            </summary>
        </member>
        <member name="M:PXCMImage.QueryMetadata">
            <summary> 
            A helper function to access PXCMMetadata instance
            </summary>
        </member>
        <member name="T:PXCMImage.ImageData">
            <summary> 
            ImageData
            Describes the image storage details.
            </summary>
        </member>
        <member name="T:PXCMImage.PixelFormat">
            <summary> 
            PixelFormat
            Describes the image sample pixel format
            </summary>
        </member>
        <member name="T:PXCMImage.Rotation">
            <summary>
            Rotation
            Image rotation options.
            </summary>
        </member>
        <member name="T:PXCMImage.ImageInfo">
            <summary> 
            ImageInfo
            Describes the image sample detailed information.
            </summary>
        </member>
        <member name="T:PXCMImage.Access">
            <summary> 
            Access
            Describes the image access mode.
            </summary>
        </member>
        <member name="T:PXCMImage.Option">
            <summary> 
            Option
            Describes the image options.
            </summary>
        </member>
        <member name="F:PXCMSession.METADATA_FEEDBACK_SAMPLE_INFO">
            <summary>
            Metadata types for feedback information attached to current session
            </summary>
        </member>
        <member name="M:PXCMSession.QueryVersion">
                        @brief Return the SDK version.
                        @return the SDK version.
        </member>
        <member name="M:PXCMSession.QueryImpl(PXCMSession.ImplDesc,System.Int32,PXCMSession.ImplDesc@)">
                        @brief Search a module implementation.
                        @param[in]	templat					The template for the module search. Zero field values match any.
                        @param[in]	idx						The zero-based index to retrieve multiple matches.
                        @param[out]	desc					The matched module descritpor, to be returned.
                        @return PXCM_STATUS_NO_ERROR			Successful execution.
                        @return PXCM_STATUS_ITEM_UNAVAILABLE	No matched module implementation.
        </member>
        <member name="M:PXCMSession.QueryModuleDesc(PXCMBase,PXCMSession.ImplDesc@)">
                        @brief Return the module descriptor
                        @param[in]  module  The module instance
                        @param[out] desc	The module descriptor, to be returned.
                        @return PXCM_STATUS_NO_ERROR         Successful execution.
                        @return PXCM_STATUS_ITEM_UNAVAILABLE Failed to identify the module instance.
        </member>
        <member name="M:PXCMSession.CreateImpl(PXCMSession.ImplDesc,System.Int32,System.Int32,PXCMBase@)">
            <summary> 
            Create an instance of the specified module.
            </summary>
            <param name="desc"> The module descriptor.</param>
            <param name="iuid"> Optional module implementation identifier.</param>
            <param name="cuid"> Optional interface identifier.</param>
            <param name="instance"> The created instance, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE	No matched module implementation.</returns>
        </member>
        <member name="M:PXCMSession.CreateImpl(PXCMSession.ImplDesc,System.Int32,PXCMBase@)">
            <summary> 
            Create an instance of the specified module.
            </summary>
            <param name="desc"> The module descriptor.</param>
            <param name="cuid"> Optional interface identifier.</param>
            <param name="instance"> The created instance, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE	No matched module implementation.</returns>
        </member>
        <member name="M:PXCMSession.CreateImpl(System.Int32,System.Int32,PXCMBase@)">
            <summary> 
            Create an instance of the specified module.
            </summary>
            <param name="iuid"> Optional module implementation identifier.</param>
            <param name="cuid"> Optional interface identifier.</param>
            <param name="instance"> The created instance, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE	No matched module implementation.</returns>
        </member>
        <member name="M:PXCMSession.CreateImpl(System.Int32,PXCMBase@)">
            <summary> 
            Create an instance of the specified module.
            </summary>
            <param name="cuid"> Optional interface identifier.</param>
            <param name="instance"> The created instance, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE	No matched module implementation.</returns>
        </member>
        <member name="M:PXCMSession.CreateImpl``1(PXCMSession.ImplDesc,System.Int32,``0@)">
            <summary> 
            Create an instance of the specified module.
            </summary>
            <param name="desc"> The module descriptor.</param>
            <param name="iuid"> Optional module implementation identifier.</param>
            <param name="tt"> The created instance, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE	No matched module implementation.</returns>
        </member>
        <member name="M:PXCMSession.CreateImpl``1(PXCMSession.ImplDesc,``0@)">
            <summary> 
            Create an instance of the specified module.
            </summary>
            <param name="desc"> The module descriptor.</param>
            <param name="tt"> The created instance, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE	No matched module implementation.</returns>
        </member>
        <member name="M:PXCMSession.CreateImpl``1(System.Int32,``0@)">
            <summary> 
            Create an instance of the specified module.
            </summary>
            <param name="iuid"> Optional module implementation identifier.</param>
            <param name="tt"> The created instance, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE	No matched module implementation.</returns>
        </member>
        <member name="M:PXCMSession.CreateImpl``1(``0@)">
            <summary> 
            Create an instance of the specified module.
            </summary>
            <param name="tt"> The created instance, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE	No matched module implementation.</returns>
        </member>
        <member name="M:PXCMSession.CreateSenseManager">
            <summary> 
            Create an instance of the PXCMSenseManager interface.
            </summary>
            <returns> The PXCMSenseManager instance.</returns>
        </member>
        <member name="M:PXCMSession.CreateCaptureManager">
            <summary> 
            Create an instance of the PXCMCaptureManager interface.
            </summary>
            <returns> The PXCMCaptureManager instance.</returns>
        </member>
        <member name="M:PXCMSession.CreateAudioSource">
            <summary> 
            Create an instance of the PXCMAudioSource interface.
            </summary>
            <returns> The PXCMAudioSource instance.</returns>
        </member>
        <member name="M:PXCMSession.CreateImage(PXCMImage.ImageInfo,PXCMImage.ImageData)">
            <summary> 
            Create an instance of the PXCMImage interface with data. The application must
            maintain the life cycle of the image data for the PXCMImage instance.
            </summary>
            <param name="info"> The format and resolution of the image.</param>
            <param name="data"> Optional image data.</param>
            <returns> The PXCMImage instance.</returns>
        </member>
        <member name="M:PXCMSession.CreateImage(PXCMImage.ImageInfo)">
            <summary> 
            Create an instance of the PXCMImage interface.
            </summary>
            <param name="info"> The format and resolution of the image.</param>
            <returns> The PXCMImage instance.</returns>
        </member>
        <member name="M:PXCMSession.CreatePhoto">
            <summary> 
            Create an instance of the PXCMPhoto interface.
            </summary>
            <returns> The PXCMImage instance.</returns>
        </member>
        <member name="M:PXCMSession.CreateAudio(PXCMAudio.AudioInfo,PXCMAudio.AudioData)">
            <summary> 
            Create an instance of the PXCMAudio interface with data. The application must
            maintain the life cycle of the audio data for the PXCMAudio instance.
            </summary>
            <param name="info"> The audio channel information.</param>
            <param name="data"> Optional audio data.</param>
            <returns> The PXCMAudio instance.</returns>
        </member>
        <member name="M:PXCMSession.CreateAudio(PXCMAudio.AudioInfo)">
            <summary> 
            Create an instance of the PXCAudio interface.
            </summary>
            <param name="info"> The audio channel information.</param>
            <returns> The PXCMAudio instance.</returns>
        </member>
        <member name="M:PXCMSession.CreatePowerManager">
            <summary> 
            Create an instance of the power manager.
            </summary>
            <returns> a PXCMPowerState instance.</returns>
        </member>
        <member name="M:PXCMSession.LoadImplFromFile(System.String)">
            <summary> 
            Load the module from a file.
            </summary>
            <param name="moduleName"> The module file name.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSession.UnloadImplFromFile(System.String)">
            <summary> 
            Unload the specified module.
            </summary>
            <param name="moduleName"> The module file name.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSession.SetCoordinateSystem(PXCMSession.CoordinateSystem)">
            <summary> 
            Set the camera coordinate system.
            </summary>
            <param name="cs"> The coordinate system.</param>
            <returns> PXC_STATUS_NO_ERROR    Successful execution.</returns>
        </member>
        <member name="M:PXCMSession.QueryCoordinateSystem">
            <summary> 
            Return current camera coordinate system (bit-mask of coordinate systems for front and rear cameras) 
            </summary>
            <param name="cs"> The coordinate system.</param>
            <returns> PXC_STATUS_NO_ERROR    Successful execution.</returns>
        </member>
        <member name="M:PXCMSession.CreateInstance">
            <summary> 
            Create an instance of the PXCSession interface.
            </summary>
            <param name="session"> The PXCSession instance, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSession.QueryMetadata">
            <summary> 
            A helper function to access PXCMMetadata instance
            </summary>
        </member>
        <member name="T:PXCMSession.ImplVersion">
            <summary> 
            ImplVersion
            Describe the video streams requested by a module implementation.
            </summary>
        </member>
        <member name="T:PXCMSession.ImplGroup">
            <summary> 
            ImplGroup
            The SDK group I/O and algorithm modules into groups and subgroups.
            This is the enumerator for algorithm groups.
            </summary>
        </member>
        <member name="T:PXCMSession.ImplSubgroup">
            <summary>
            ImplSubgroup
            The SDK group I/O and algorithm modules into groups and subgroups.
            This is the enumerator for algorithm subgroups.
            </summary>
        </member>
        <member name="T:PXCMSession.CoordinateSystem">
            <summary>
            CoordinateSystem
            SDK supports several 3D coordinate systems for front and rear facing cameras.
            </summary>
        </member>
        <member name="T:PXCMSession.ImplDesc">
            <summary> 
            ImplDesc
            The module descriptor lists details about the module implementation.
            </summary>
        </member>
        <member name="M:PXCMMetadata.QueryUID">
            <summary>
            The function returns a unique identifier for the meta data storage.
            </summary>
            <returns> the unique identifier.</returns>
        </member>
        <member name="M:PXCMMetadata.QueryMetadata(System.Int32)">
            <summary>
            The function retrieves the identifiers of all available meta data.
            </summary>
            <param name="idx"> The zero-based index to retrieve all identifiers.</param>
            <returns> the metadata identifier, or zero if not available.</returns>
        </member>
        <member name="M:PXCMMetadata.DetachMetadata(System.Int32)">
            <summary>
            The function detaches the specified metadata.
            </summary>
            <param name="id"> The metadata identifier.</param>
            <returns> PXCM_STATUS_NO_ERROR                Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE        The metadata is not found.</returns>
        </member>
        <member name="M:PXCMMetadata.AttachBuffer(System.Int32,System.Byte[])">
            <summary>
            The function attaches the specified metadata.
            </summary>
            <param name="id"> The metadata identifier.</param>
            <param name="buffer"> The metadata buffer.</param>
            <param name="size"> The metadata buffer size, in bytes.</param>
            <returns> PXC_STATUS_NO_ERROR                Successful execution.</returns>
        </member>
        <member name="M:PXCMMetadata.QueryBufferSize(System.Int32)">
            <summary>
            The function returns the specified metadata buffer size.
            </summary>
            <param name="id"> The metadata identifier.</param>
            <returns> the metadata buffer size, or zero if the metadata is not available.</returns>
        </member>
        <member name="M:PXCMMetadata.QueryBuffer(System.Int32,System.Byte[]@)">
            <summary>
            The function retrieves the specified metadata.
            </summary>
            <param name="id"> The metadata identifier.</param>
            <param name="buffer"> The buffer to retrieve the metadata.</param>
            <returns> PXCM_STATUS_NO_ERROR         Successful execution.</returns>
        </member>
        <member name="M:PXCMMetadata.AttachSerializable(System.Int32,PXCMBase)">
            <summary>
            The function attaches an instance of a serializeable interface to be metadata storage.
            </summary>
            <param name="id"> The metadata identifier.</param>
            <param name="instance"> The serializable instance.</param>
            <returns> PXCM_STATUS_NO_ERROR         Successful execution.</returns>
        </member>
        <member name="M:PXCMMetadata.CreateSerializable(System.Int32,System.Int32,PXCMBase@)">
            <summary>
            The function creates an instance of a serializeable interface from the metadata storage.
            </summary>
            <param name="id"> The metadata identifier.</param>
            <param name="cuid"> The interface identifier.</param>
            <param name="instance"> The serializable instance, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR         Successful execution.</returns>
        </member>
        <member name="M:PXCMMetadata.CreateSerializable``1(System.Int32,``0@)">
            <summary>
            The function creates an instance of a serializeable interface from the metadata storage.
            </summary>
            <param name="id"> The metadata identifier.</param>
            <param name="instance"> The serializable instance, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR         Successful execution.</returns>
        </member>
        <member name="T:PXCMObjectRecognitionConfiguration">
            @class PXCMObjectRecognitionConfiguration
            @brief Retrieve the current configuration of the ObjectRecognition module and set new configuration values.
            @note Changes to PXCMObjectRecognitionConfiguration are applied only when ApplyChanges() is called.
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.ApplyChanges">
                    @brief Apply the configuration changes to the module.
                    This method must be called in order for any configuration changes to apply.
                    @return PXCM_STATUS_NO_ERROR - successful operation.
                    @return PXCM_STATUS_DATA_NOT_INITIALIZED - the configuration was not initialized.                        
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.RestoreDefaults">
                    @brief Restore configuration settings to the default values.
                    @return PXCM_STATUS_NO_ERROR - successful operation.
                    @return PXCM_STATUS_DATA_NOT_INITIALIZED - the configuration was not initialized.                  
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.QueryRecognitionConfiguration">
                    @brief Return the current active recognition configuration.
                    @return RecognitionConfig - the current configuration.
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.QueryNumberOfClasses">
                    @brief Return the number of classes which supported by the recognition configuration.
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.SetRecognitionConfiguration(PXCMObjectRecognitionConfiguration.RecognitionConfiguration)">
                    @brief Set the active recognition configuration.
                    @param[in] rConfig - struct with the desired confidence and mode of recognition.
                    @return PXCM_STATUS_NO_ERROR - on operation succeeded.
                    @see PXCRecognitionConfig     
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.QueryActiveClassifier">
                    @brief Return the active classifier model.
                    @return the active classifier name
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.SetActiveClassifier(System.String)">
                    @brief Set the active classifier model.
                    @The number of outputs must be corresponds to the correct number of outputs supported by the specified model
                    @param[in] configFilePath - relative path to the classifier model file from RSSDK data path.
                    @return PXCM_STATUS_NO_ERROR - operation succeeded. 
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.EnableSegmentation(System.Boolean)">
                    @brief Enable or disable the segmented image feature.
                    @param[in] enable - boolean value to enable/disable the segmentation.
                    @return PXCM_STATUS_NO_ERROR - operation succeeded.
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.IsSegmentationEnabled">
                    @brief get the current state of segmented image feature.
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.IsAbsoluteRoiEnabled">
                    @brief get the current state of absolute roi feature.    
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.AddROI(PXCMRectF32)">
                    @brief Add ROI to the classification. This roi is absolute and the image will croped by this roi
                    @param[in] roi - ROI rectangle to be add.
                    @return PXCM_STATUS_NO_ERROR - operation succeeded.
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.AddAbsoluteROI(PXCMRectF32)">
                    @brief Add ROI to the classification. this roi is absolute and the image will croped by this roi
                    @param[in] roi - ROI rectangle to be add.  
                    @return PXCM_STATUS_NO_ERROR - operation succeeded.
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.QueryROI">
                    @brief Return the ROI.    
                    @return the current ROI.         
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.QueryAbsoluteROI">
                    @brief Return the absolute ROI.
                    @return the current absolute ROI.
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.QueryLocalizationMechanism">
                    @brief Query the current localization mechanism.
                    @return the current localization mechanism.
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.SetLocalizationMechanism(PXCMObjectRecognitionConfiguration.LocalizationMechanism)">
                    @brief Set the active localization mechanism.
                    @brief The localization mechanism is activated only if LOCALIZATION or LOCALIZATION_AND_TRACKING or PROPOSAL_ONLY  mode have been selected. 
                    @param[in] lm - the selected localization method.
                    @see LocalizationMechanism enum.
                    @return PXC_STATUS_NO_ERROR - operation succeeded.
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.ClearAllROIs">
                    @brief Remove all ROIs from the classification and set the ROI to the whole image.
                    @return PXCM_STATUS_NO_ERROR - operation succeeded.      
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.EnableAbsoluteROI(System.Boolean)">
                    @brief Set or unset the absolute ROI feature.
                    @param[in] enable - boolean value to enable/disable the absolute ROI.
        </member>
        <member name="M:PXCMObjectRecognitionConfiguration.SetTrackingROIs(PXCMRectF32[])">
                    @brief Set the initial rois to track by tracking module .
                    @brief Enables only when tracking bool is on and all other are off.
                    @brief The number of rectangles will be between 1 and 5.
                    @param[in] rois - pointer to the rectangles tracked by tracker module.
                    @param[in] nRois - number the rectangles tracked by tracker module.
                    @return the status of the operation.
        </member>
        <member name="T:PXCMObjectRecognitionData">
            <summary>
            @Class PXCMObjectRecognitionData 
            A class that defines a standard data interface for object recognition algorithms
            </summary>
        </member>
        <member name="M:PXCMObjectRecognitionData.Update">
            <summary>
            Updates object recognition data to the most current output.. 
            </summary>
            <returns> PXCM_STATUS_NO_ERROR - successful operation.</returns>
            <returns> PXCM_STATUS_DATA_NOT_INITIALIZED  - when the ObjectRecognitionData is not available. </returns>
        </member>
        <member name="M:PXCMObjectRecognitionData.QueryNumberOfRecognizedObjects">
            <summary> 
            Get the number of recognized objects in the current frame.
            @note the number of recognized objects is between 0 and number of classes 
            @multiplied by number of ROIs.
            @The function returns the sum of all objects at all ROIs up to the 
            @specified threshold (by configuration class)
            </summary>
            <returns> the number of successfully recognized objects.</returns>
        </member>
        <member name="M:PXCMObjectRecognitionData.QuerySegmentedImage(System.Int32,PXCMImage@)">
            <summary>            
            Return a PXCMImage instance of segmented image of the entire frame.
            </summary>
            <param name="roiIndex"> - the rectangle represents the ROI of the specified object index.</param>
            <param name="segmentedImage"> - the segmented image as output.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            @see PXCMImage      
        </member>
        <member name="M:PXCMObjectRecognitionData.QueryRecognizedObjectData(System.Int32,System.Int32,PXCMObjectRecognitionData.RecognizedObjectData@)">
            <summary>
            Return object data of the specified index.
            @note the index is between 0 and QueryNumberOfRecognizedObjects() in the current frame.
            @see PXCMObjectRecognitionData.QueryNumberOfRecognizedObjects()    
            </summary>
            <param name="index"> - the index of recognition.</param>
            <param name="probIndex"> - the index of probabilty per the recognized object.</param>
            <param name="objectData"> - data structure filled with the data of the recognized object.</param>
            <returns> PXCM_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXCM_STATUS_PARAM_UNSUPPORTED</returns>
        </member>
        <member name="M:PXCMObjectRecognitionData.QueryRecognizedObjectData(System.Int32,PXCMObjectRecognitionData.RecognizedObjectData@)">
            <summary> 
            Return object data of the specified index with the highest probability.
            @note the index is between 0 and QueryNumberOfRecognizedObjects() in the current frame.
            @see PXCObjectRecognitionData::QueryNumberOfRecognizedObjects() 
            </summary>
            <param name="index"> - the index of recognition.</param>
            <param name="objectData"> - data structure filled with the data of the recognized object.</param>
            <returns> PXC_STATUS_NO_ERROR - operation succeeded.</returns>
            <returns> PXC_STATUS_PARAM_UNSUPPORTED on error.            </returns>
        </member>
        <member name="M:PXCMObjectRecognitionData.QueryObjectNameByID(System.Int32)">
            <summary> 
            Return the name of the object by its recognized label.
            </summary>    
            <param name="objectLabel"> - the label of recognized object.</param>
            <returns> the corresponding name of the label.</returns>
        </member>
        <member name="T:PXCMObjectRecognitionModule">
            <summary>
            @class PXCMObjectRecognition
            @Defines the PXCMObjectRecognition interface, which programs may use to process  
            @snapshots of captured frames to recognize pre-trained objects.
            </summary>
        </member>
        <member name="M:PXCMObjectRecognitionModule.CreateActiveConfiguration">
            <summary> 
            Create a new instance of the OR module's active configuration.
            @Multiple configuration instances can be created in order to define different configurations for different stages of the application.
            @The configurations can be switched by calling the ApplyChanges method of the required configuration instance.
            </summary>
            <returns> an object to the configuration instance.</returns>
            @see PXCMObjectRecognitionConfiguaration
        </member>
        <member name="M:PXCMObjectRecognitionModule.CreateOutput">
            <summary> 
            Create a new instance of the hand module's current output data.
            @Multiple instances of the output can be created in order to store previous tracking states. 
            </summary>
            <returns> an object to the output data instance.</returns>
            @see PXCMObjectRecognitionData 
        </member>
        <member name="M:PXCMPersonTrackingConfiguration.SetTrackedAngles(PXCMPersonTrackingConfiguration.TrackingAngles)">
            		    @brief Sets the range of user angles to be tracked
        </member>
        <member name="M:PXCMPersonTrackingConfiguration.EnableAlert(PXCMPersonTrackingData.AlertType)">
                        @brief Enable alert messaging for a specific event
        </member>
        <member name="M:PXCMPersonTrackingConfiguration.EnableAllAlerts">
                        @brief Enable all alert messaging events.
        </member>
        <member name="M:PXCMPersonTrackingConfiguration.IsAlertEnabled(PXCMPersonTrackingData.AlertType)">
                        @brief Test the activation status of the given alert.
        </member>
        <member name="M:PXCMPersonTrackingConfiguration.DisableAlert(PXCMPersonTrackingData.AlertType)">
                        @brief Disable alert messaging for a specific event.
        </member>
        <member name="M:PXCMPersonTrackingConfiguration.DisableAllAlerts">
                        @brief Disable messaging for all alerts.
        </member>
        <member name="M:PXCMPersonTrackingConfiguration.SubscribeAlert(PXCMPersonTrackingConfiguration.OnFiredAlertDelegate)">
                        @brief Register an event handler object for the alerts.        
        </member>
        <member name="M:PXCMPersonTrackingConfiguration.UnsubscribeAlert(PXCMPersonTrackingConfiguration.OnFiredAlertDelegate)">
                        @brief Unsubscribe an alert handler object.
        </member>
        <member name="M:PXCMPersonTrackingData.QueryNumberOfPeople">
            <summary>
             Return the number of persons detected in the current frame.
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.QueryPersonData(PXCMPersonTrackingData.AccessOrderType,System.Int32)">
            <summary>
            Retrieve the person object data using a specific AccessOrder and related index.
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.QueryPersonDataById(System.Int32)">
            <summary>
            Retrieve the person object data by its unique Id.
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.StartTracking(System.Int32)">
            <summary>
            Enters the person to the list of tracked people starting from next frame
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.StopTracking(System.Int32)">
            <summary>
            Removes the person from tracking
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.GetTrackingState">
            <summary>
            Retrieve current tracking state of the Person Tracking module
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.QueryRecognitionModuleData">
            <summary>
            Returns the Person Recognition module interface
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.QueryFiredAlertsNumber">
            <summary>
            Return the number of fired alerts in the current frame.
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.QueryFiredAlertData(System.Int32,PXCMPersonTrackingData.AlertData)">
            <summary>
            @Get the details of the fired alert with the given index.
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.IsAlertFired(PXCMPersonTrackingData.AlertType,PXCMPersonTrackingData.AlertData)">
            <summary>
            Return whether the specified alert is fired in the current frame, 
            and retrieve its data if it is.		
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonPose.QueryPositionState(PXCMPersonTrackingData.PersonPose.PositionInfo)">
            <summary>
            Get the person's position data
            </summary>
            <param name="position"> describes the person's position</param>
            <param name="confidence"> is the algorithm's confidence in the determined position</param>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonPose.QueryLeanData(PXCMPersonTrackingData.PersonPose.LeanInfo)">
            <summary>
            Get the direction a person is leaning towards
            </summary>
            <param name="leanData"> describes where the person is leaning to in terms of yaw, pitch, and roll</param>
            <param name="confidence"> is the algorithm's confidence in the determined orientation</param>
        </member>
        <member name="T:PXCMPersonTrackingData.PersonPose.PositionState">
            <summary> 
            Position
            Describes the position of the person
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonRecognition.RegisterUser">
            <summary>
            Register a user in the Recognition database.
            </summary>
            <returns> The unique user ID assigned to the registered recognition by the Recognition module.</returns>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonRecognition.UnregisterUser">
            <summary>
            Removes a user from the Recognition database.
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonRecognition.IsRegistered">
            <summary>
            Checks if a user is registered in the Recognition database.
            </summary>
            <returns> true - if user is in the database, false otherwise.</returns>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonRecognition.QueryRecognitionID">
            <summary>
            Returns the ID assigned to the current recognition by the Recognition module
            </summary>
            <returns> The ID assigned by the Recognition module, or -1 if person was not recognized.</returns>
        </member>
        <member name="M:PXCMPersonTrackingData.RecognitionModuleData.QueryDatabaseSize">
            <summary>
            Retrieves the size of the recognition database for the user to be able to allocate the db buffer in the correct size
            </summary>
            <returns> The size of the database in bytes.</returns>
        </member>
        <member name="M:PXCMPersonTrackingData.RecognitionModuleData.QueryDatabaseBuffer(System.Byte[])">
            <summary>
            Copies the recognition database buffer to the user. Allows user to store it for later usage.
            </summary>
            <param name="buffer"> A user allocated buffer to copy the database into. The user must make sure the buffer is large enough (can be determined by calling QueryDatabaseSize()).</param>
            <returns> true if database has been successfully copied to db. false - otherwise.</returns>
        </member>
        <member name="M:PXCMPersonTrackingData.RecognitionModuleData.UnregisterUserByID(System.Int32)">
            <summary>
            Unregisters a user from the database by user ID
            <param name="the"> ID of the user to unregister</param>
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonJoints.QueryNumJoints">
            <summary>
            Returns the number of tracked joints
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonJoints.QueryJoints(PXCMPersonTrackingData.PersonJoints.SkeletonPoint[])">
            <summary>
            Retrieves all joints
            </summary>
            <param name="joints"> the joints' locations are copied into this array. The application is expected to allocate this array (size retrieved from QueryNumJoints())</param>
            Returns true if data and parameters exists, false otherwise.
        </member>
        <member name="M:PXCMPersonTrackingData.PersonJoints.QueryNumBones">
            <summary>
            Returns the number of tracked bones
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonJoints.QueryBones(PXCMPersonTrackingData.PersonJoints.Bone[])">
            <summary>
            Retrieves all bones
            </summary>
            <param name="bones"> the bones' locations are copied into this array. The application is expected to allocate this array (size retrieved from QueryNumBones())</param>
            Returns true if data and parameters exists, false otherwise.
        </member>
        <member name="T:PXCMPersonTrackingData.PersonJoints.JointType">
            <summary> 
            Position
            Describes the position of the person
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonTracking.QueryId">
            <summary>	
            Return the person's unique identifier.
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonTracking.Query2DBoundingBox">
            <summary>	
            Return the location and dimensions of the tracked person, represented by a 2D bounding box (defined in pixels).
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonTracking.QuerySegmentationImage">
            <summary>			
            Retrieve the 2D image mask of the tracked person. 	 			
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonTracking.QueryCenterMass">
            <summary> 
            Retrieves the center mass of the tracked person
            </summary>
            <param name="centerMass"> The center mass of the tracked person in world coordinates</param>
            <param name="confidence"> The confidence of the calculated center mass location</param>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonTracking.QueryHeadBoundingBox">
            <summary>	
            Return the location and dimensions of the tracked person's head, represented by a 2D bounding box (defined in pixels).
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonTracking.Query3DBoundingBox">
            <summary>
            Return the location and dimensions of the tracked person, represented by a 3D bounding box.
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonTracking.QuerySpeed(PXCMPersonTrackingData.PersonTracking.SpeedInfo)">
            <summary>
            Return the speed of person in 3D world coordinates
            </summary>
            <param name="direction"> the direction of the movement</param>
            <param name="magnitude"> the magnitude of the movement in meters/second</param>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonTracking.Query3DBlobPixelCount">
            <summary> 
            Get the number of pixels in the blob
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonTracking.Query3dBlob(PXCMPoint3DF32)">
            <summary>
            Retrieves the 3d blob of the tracked person
            </summary>
            <param name="blob"> The array of 3d points to which the blob will be copied. Must be allocated by the application</param>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonTracking.QueryContourSize">
            <summary> 
            Get the contour size (number of points in the contour)
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.PersonTracking.QueryContourPoints(PXCMPointI32)">
            <summary> 
            Get the data of the contour line
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.Person.QueryTracking">
            <summary>
            Returns the Person Detection interface
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.Person.QueryRecognition">
            <summary>
            Returns the Person Recognition interface
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.Person.QuerySkeletonJoints">
            <summary>
            Returns the Person Joints interface
            </summary>
        </member>
        <member name="M:PXCMPersonTrackingData.Person.QueryPose">
            <summary>
            Returns the Person Pose interface
            </summary>
        </member>
        <member name="T:PXCMPersonTrackingData.AlertType">
            <summary>  
            AlertType
            Identifiers for the events that can be detected and fired by the person module.
            </summary>
        </member>
        <member name="T:PXCMPersonTrackingData.AccessOrderType">
            <summary> 
            AccessOrderType
            Orders in which the person can be accessed.
            </summary>
        </member>
        <member name="F:PXCMPersonTrackingData.AccessOrderType.ACCESS_ORDER_BY_TIME">
            By unique ID of the person
        </member>
        <member name="F:PXCMPersonTrackingData.AccessOrderType.ACCESS_ORDER_NEAR_TO_FAR">
            From oldest to newest person in the scene           
        </member>
        <member name="F:PXCMPersonTrackingData.AccessOrderType.ACCESS_ORDER_LEFT_TO_RIGHT">
            From nearest to farthest person in scene
        </member>
        <member name="T:PXCMPersonTrackingData.TrackingState">
            <summary>
            TrackingState
            The current state of the module, either tracking specific people or performing full detection
            </summary>
        </member>
        <member name="F:PXCMPersonTrackingData.AlertData.personId">
            The type of alert
        </member>
        <member name="F:PXCMPersonTrackingData.AlertData.timeStamp">
            The ID of the person that triggered the alert, if relevant and known
        </member>
        <member name="F:PXCMPersonTrackingData.AlertData.frameNumber">
            The time-stamp in which the event occurred
        </member>
        <member name="M:PXCMPersonTrackingModule.QueryConfiguration">
            <summary>
            create a new copy of active configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:PXCMPersonTrackingModule.QueryOutput">
            <summary>
             create a placeholder for output
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PXCMPhoto" -->
        <member name="M:PXCMPhoto.ImportFromPreviewSample(PXCMCapture.Sample)">
            <summary> 
            Import the preview sample content into the photo instance.
            </summary>
            <param name="sample"> The PXCMCapture.Sample instance from the SenseManager QuerySample().</param>
            <returns> PXCM_STATUS_NO_ERROR     Successful execution.</returns>
        </member>
        <member name="M:PXCMPhoto.IsXDM(System.String)">
            <summary> 
            Check if a file in an XDM file or not.
            </summary> 
            <param name="filename"> The file name.</param>
            <returns> true if file is XDM and false otherwise.</returns>
        </member>
        <member name="M:PXCMPhoto.LoadXDM(System.String,PXCMPhoto.Subsample)">
            <summary> 
            Import the photo content from the XDM File Format v2.0.
            </summary> 
            <param name="filename"> The file name.</param>
            <param name="subsample"> subsampling rate.</param>
            <returns> PXCM_STATUS_NO_ERROR     Successful execution.</returns>
        </member>
        <member name="M:PXCMPhoto.SaveXDM(System.String,System.Boolean)">
            <summary> 
            Export the photo content to the XDM File Format v2.0.
            </summary>
            <param name="filename"> The file name.</param>
            <param name="removeOriginalImage">removeOriginalImage Flag to indicate whether to remove original image from XDM photo if container image is processed. This will reduce XDM photo size. True = Removes the original image from XDM photo. False (Default) = Keeps the original image if the container image is processed.</param>
            <returns> PXCM_STATUS_NO_ERROR     Successful execution.</returns>
        </member>
        <member name="M:PXCMPhoto.CopyPhoto(PXCMPhoto)">
            <summary>
            Copy the content from the source photo
            </summary>
            <param name="photo"> The source photo.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMPhoto.QueryContainerImage">
            <summary> 
            Get the reference image of the photo. The reference image is usually the processed color image.
            </summary>
            <returns> The PXCMImage instance.</returns>
        </member>
        <member name="M:PXCMPhoto.ResetContainerImage">
            <summary>
            copy the camera[0] color image to the container image of the photo.
            </summary>
        </member>
        <member name="M:PXCMPhoto.QueryImage(System.Int32)">
            <summary>
            Get the color image in camera[camIdx] of the photo. The unedited image is usually the unprocessed color image in camera[0].
            </summary>
            <returns> The PXCMImage instance.</returns>
        </member>
        <member name="M:PXCMPhoto.QueryImage">
            <summary>
            Get the original image of the photo. The original image is usually the unprocessed color image.
            </summary>
            <returns> The PXCMImage instance.</returns>
        </member>
        <member name="M:PXCMPhoto.QueryRawDepth">
            <summary>
            Get the raw depth image of the photo. This would be the unprocessed depth captured from the camera or loaded from a file if it existed.
            </summary>
            <returns> The PXCMImage instance.</returns>
        </member>
        <member name="M:PXCMPhoto.QueryDepth(System.Int32)">
            <summary>
            Get the depth map in camera[camIdx] of the photo. The depth map in camera[0] is the holefilled depth.
            <returns> The PXCMImage instance.</returns>
            </summary>
        </member>
        <member name="M:PXCMPhoto.QueryDepth">
            <summary>
            Get the depth image of the photo. This would be the processed depth if it undergoes processing.
            </summary>
            <returns> The PXCMImage instance.</returns>
        </member>
        <member name="M:PXCMPhoto.QueryXDMRevision">
            <summary>
            Get the device revision. The revision of the XDM spec, e.g. “1.0”. 
            Changes to a minor version number ("1.1", "1.2", etc.) do not break compatibility within
            that major version. See the section on Versioning, under Schema, for more on this. Note 
            that this field is informational; actual compatibility depends on namespace versions.
            nchars input size of the requested buffer for overrun safety 
            </summary>
            <returns> The Revision string.</returns>
        </member>
        <member name="M:PXCMPhoto.QueryDeviceVendorInfo(PXCMPhoto.VendorInfo@)">
            <summary>
            Get the device vendor info.
            </summary>
            <returns> The VendorInfo struct.</returns>
        </member>
        <member name="M:PXCMPhoto.QueryCameraVendorInfo(System.Int32,PXCMPhoto.VendorInfo@)">
            <summary>
            Get the camera[camIdx] vendor info.
            </summary>
            <returns> The VendorInfo struct.</returns>
        </member>
        <member name="M:PXCMPhoto.QueryNumberOfCameras">
            <summary>
            Get the number of cameras in the device.
            </summary>
            <returns> The number of cameras.</returns>
        </member>
        <member name="M:PXCMPhoto.QueryCameraPose(System.Int32,PXCMPoint3DF32@,PXCMPoint4DF32@)">
            <summary>
            Get the camera[camIdx] pose = Translation and rotation.
            <returns> The translation(x,y,z) For the first camera, this is 0. For additional cameras, </returns>
            this is relative to the first camera. For the rotation(x,y,z,w) writers of this format 
            should make an effort to normalize [x,y,z], but readers should not expect the rotation axis to be normalized..
            trans.x = x position in meters. 
            trans.y = y position in meters.
            trans.z = z position in meters.
            rot.x = x component of the rotation vector in the axis-angle representation.
            rot.y = y component of the rotation vector in the axis-angle representation.
            rot.z = z component of the rotation vector in the axis-angle representation.
            rot.w = w rotation angle in radians in the axis-angle representation.
            </summary>
        </member>
        <member name="M:PXCMPhoto.QueryCameraPerspectiveModel(System.Int32,PXCMPhoto.PerspectiveCameraModel@)">
            <summary>
            Get the PerspectiveCameraModel of camera[camIdx].
            </summary>
            <returns> The PerspectiveCameraModel</returns>
        </member>
        <member name="M:PXCMPhoto.CheckSignature">
            <summary> 
            This checks that the signature of the container image did not change. 
            Using Adler 32 for signature. 
            </summary>
            <returns>s false if signature changed and true otherwise</returns>
        </member>
        <member name="M:PXCMPhoto.#ctor(System.IntPtr,System.Boolean)">
            <summary> constructors and misc 
            </summary>
        </member>
        <member name="M:PXCMPhoto.AddRef">
            <summary> 
            Increase a reference count of the sample.
            </summary>
        </member>
        <member name="T:PXCMPhoto.Subsample">
            <summary> 
            SubSample: Subsampling rate to load High Res images faster 
            NO_SUBSAMPLING = 0
            SUBSAMPLE_2 = 2
            SUBSAMPLE_4 = 4
            SUBSAMPLE_8 = 8
            </summary>
        </member>
        <member name="T:PXCMPhoto.VendorInfo">
            <summary>
            VendorInfo
            </summary>
        </member>
        <member name="T:PXCMPhoto.PerspectiveCameraModel">
            <summary>
            PerspectiveModel.
            </summary>
        </member>
        <member name="T:PXCMPointConverter">
            <summary> @class PXCMPointConverter 
            A utility for converting 2D/3D data points from defined source to a defined target.
            The class provides with setters for both source and target rectangle/box
            The class provides with getters for 2D/3D converted points
            2D Rectangle - A data structure that represents a 2D rectangle
            3D Box - A data structure representing a "box" in 3D space (a 3D cube).
            Example: convert from hand-joint image coordinates to user defined screen area coordinates.
            Example: convert from face-landmark 3d position to a 3d game coordinate system.
            </summary>
        </member>
        <member name="M:PXCMPointConverter.Set2DSourceRectangle(PXCMRectF32)">
            <summary>			
            Set 2D image rectangle source
            </summary>
            <param name="rectangle2D"> containing desired source rectangle dimensions</param>
            <returns> PXCM_STATUS_VALUE_OUT_OF_RANGE if rectangle2D w, h params less than or equal to 0</returns>
            <returns> PXCM_STATUS_V_NO_ERROR if rectangle2D w,h params > 0</returns>
        </member>
        <member name="M:PXCMPointConverter.Set2DTargetRectangle(PXCMRectF32)">
            <summary>			
            Set 2D target rectangle
            </summary>
            <param name="rectangle2D"> containing desired target rectangle dimensions</param>
            <returns> PXCM_STATUS_VALUE_OUT_OF_RANGE if rectangle2D w,h params less than or equal to 0</returns>
            <returns> PXCM_STATUS_NO_ERROR if rectangle2D w,h params > 0</returns>
        </member>
        <member name="M:PXCMPointConverter.Set2DPoint(PXCMPointF32)">
            <summary>			
            Get converted 2D point from source to target
            </summary>
            <param name="point2D"> converted 2D point</param>
            @note Call handData.Update() before calling this function in order to get converted point based on updated frame data.
            <returns> Converted 2D Point</returns>
        </member>
        <member name="M:PXCMPointConverter.GetConverted2DPoint">
            <summary>			
            Set 3D point to be converted
            @note only relevant when using CreateCustomPointConverter 
            </summary>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE if not using CustomPointConverter</returns>
        </member>
        <member name="M:PXCMPointConverter.Invert2DAxis(System.Boolean,System.Boolean)">
            <summary>	
            inverting x,y axis
            Use if you wish to invert converted point axis.
            @example Use Invert2DAxis(false, true) if user app y axis is facing up
            </summary>
            <param name="x"> invert x axis</param>
            <param name="y"> invert y axis</param>
            <returns> PXCM_STATUS_NO_ERROR</returns>
        </member>
        <member name="M:PXCMPointConverter.Set3DSourceBox(PXCMBox3DF32)">
            <summary>			
            Set 3D world box source
            </summary>
            <param name="box3D"> containing desired source world box dimensions</param>
            <returns> PXCM_STATUS_VALUE_OUT_OF_RANGE if any of box3D dimension params less than or equal to 0</returns>
            <returns> PXCM_STATUS_NO_ERROR if box3D dimension params > 0</returns>
        </member>
        <member name="M:PXCMPointConverter.Set3DTargetBox(PXCMBox3DF32)">
            <summary>			
            Set 3D target box
            </summary>
            <param name="box3D"> containing desired target box dimensions</param>
            <returns> PXCM_STATMUS_VALUE_OUT_OF_RANGE if any of box3D dimension params less than or equal to 0</returns>
            <returns> PXCM_STAUS_NO_ERROR if box3D dimension params > 0</returns>
        </member>
        <member name="M:PXCMPointConverter.Set3DPoint(PXCMPoint3DF32)">
            <summary>			
            Set 2D point to be converted
            @note only relevant when using CreateCustomPointConverter 
            </summary>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE if not using CustomPointConverter</returns>
        </member>
        <member name="M:PXCMPointConverter.GetConverted3DPoint">
            <summary>			
            Get converted 3D point from source to target
            @note Call handData.Update() before calling this function in order to get converted point based on updated frame data.
            </summary>
            <returns> Converted 3D Point</returns>
        </member>
        <member name="M:PXCMPointConverter.Invert3DAxis(System.Boolean,System.Boolean,System.Boolean)">
            <summary>			
            inverting x,y,z axis
            Use if you wish to invert converted point axis.
            @example Use Invert3DAxis(false,true,false ) if user app y axis is facing down
            </summary>
            <param name="x"> invert x axis</param>
            <param name="y"> invert y axis</param>
            <param name="z"> invert z axis</param>
            <returns> PXCM_STATUS_NO_ERROR</returns>
        </member>
        <member name="T:PXCMPointConverterFactory">
            <summary> @class PXCMPointConverterFactory
            Factory class for creating module based point converter
            </summary>
        </member>
        <member name="M:PXCMPointConverterFactory.CreateHandJointConverter(PXCMHandData,PXCMHandData.AccessOrderType,System.Int32,PXCMHandData.JointType)">
            <summary>  Create hand joint data PointConverter for PXCMHandModule
            The converter will convert joint position to target rectangle/3dbox based on requested hand.
            @note Make sure the handData is constantly updated throughtout the session.
            @example pointConverter.CreateHandJointConverter(handData,PXCMHandData.ACCESS_ORDER_BY_TIME,0,PXCMHandData.JOINT_WRIST);
            </summary>
            <param name="handData"> a pointer to PXCHandData</param>
            <param name="accessOrder"> The desired hand access order</param>
            <param name="index"> hand index</param>
            <param name="jointType"> desired joint type to be converted</param>
            <returns> an object of the created PointConverter, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMPointConverterFactory.CreateHandExtremityConverter(PXCMHandData,PXCMHandData.AccessOrderType,System.Int32,PXCMHandData.ExtremityType)">
            <summary>  Create hand Extremity data PointConverter for PXCMHandModule
            The converter will convert extremity data to target rectangle/3dbox based on requested hand.
            @note Make sure the handData is constantly updated throughtout the session.
            @example pointConverter.CreateHandExtremityConverter(handData,PXCMHandData.ACCESS_ORDER_BY_TIME,0,PXCMHandData.EXTREMITY_CENTER);
            </summary>
            <param name="handData"> a pointer to PXCMHandData</param>
            <param name="accessOrder"> The desired hand access order</param>
            <param name="index"> hand index</param>
            <param name="extremityType"> desired extremity type to be converted</param>
            <returns> an object of the created PointConverter, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMPointConverterFactory.CreateBlobPointConverter(PXCMBlobData,PXCMBlobData.AccessOrderType,System.Int32,PXCMBlobData.ExtremityType)">
            <summary>  Create blob data PointConverter for PXCMBlobModule
            The converter will convert exrtemity data to target rectangle/3dbox based on requested access order and index.
            @note Make sure the blobData is constantly updated throughtout the session.
            @example pointConverter.CreateBlobPointConverter(blobData,PXCMBlobData.ACCESS_ORDER_BY_TIME,0,PXCMBlobData.EXTREMITY_CENTER);
            </summary>
            <param name="blobData"> a pointer to PXCBlobData</param>
            <param name="accessOrder"> The desired blob access order</param>
            <param name="index"> blob index</param>
            <param name="extremityType"> desired exrtemity point to be converted</param>
            <returns> an object to the created PointConverter, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMPointConverterFactory.CreateCustomPointConverter">
            <summary>  Create custom PointConverter
            The converter will convert any data point to target rectangle/3dbox
            @note make sure to call Set2DPoint or Set3DPoint
            @example pointConverter.CreateCustomPointConverter();
            PXCMPointF32 point = {22.f,40.f};
            pointConverter.Set2DPoint(point);
            pointConveter.GetConverted2DPoint();
            </summary>
            <returns> pointer to the created PointConverter</returns>
        </member>
        <member name="M:PXCMPowerState.QueryState">
            <summary>
            Query current power state of the device, returns maximal used state
            </summary>
            <returns></returns>
        </member>
        <member name="M:PXCMPowerState.SetState(PXCMPowerState.State)">
            <summary>
            Try to set power state of all used devices, all streams, application should call 
            QueryStream to check if the desired state was set 
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PXCMPowerState.SetInactivityInterval(System.Int32)">
            <summary>
            Sets inactivity interval
            </summary>
            <param name="timeInSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:PXCMPowerState.QueryInactivityInterval">
            <summary>
            Returns inactivity interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:PXCMPowerState.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            constructors and misc
            </summary>
            <param name="instance"></param>
            <param name="delete"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PXCMProjection" -->
        <member name="M:PXCMProjection.MapDepthToColor(PXCMPoint3DF32[],PXCMPointF32[])">
            <summary> 
            Map depth coordinates to color coordinates for a few pixels.
            </summary>
            <param name="pos_uvz"> The array of depth coordinates + depth value in the PXCMPoint3DF32 structure.</param>
            <param name="pos_ij"> The array of color coordinates, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR Successful execution.</returns>
        </member>
        <member name="M:PXCMProjection.MapColorToDepth(PXCMImage,PXCMPointF32[],PXCMPointF32[])">
            <summary> 
            Map color coordinates to depth coordiantes for a few pixels.
            </summary>
            <param name="depth"> The depthmap image.</param>
            <param name="pos_ij"> The array of color coordinates.</param>
            <param name="pos_uv"> The array of depth coordinates, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR Successful execution.</returns>
        </member>
        <member name="M:PXCMProjection.ProjectDepthToCamera(PXCMPoint3DF32[],PXCMPoint3DF32[])">
            <summary> 
            Map depth coordinates to world coordinates for a few pixels.
            </summary>
            <param name="pos_uvz"> The array of depth coordinates + depth value in the PXCMPoint3DF32 structure.</param>
            <param name="pos3d"> The array of world coordinates, in mm, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR Successful execution.</returns>
        </member>
        <member name="M:PXCMProjection.ProjectColorToCamera(PXCMPoint3DF32[],PXCMPoint3DF32[])">
            <summary> 
            Map color pixel coordinates to camera coordinates for a few pixels.
            </summary>
            <param name="pos_ijz"> The array of color coordinates + depth value in the PXCMPoint3DF32 structure.</param>
            <param name="pos3d"> The array of camera coordinates, in mm, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR Successful execution.</returns>
        </member>
        <member name="M:PXCMProjection.ProjectCameraToDepth(PXCMPoint3DF32[],PXCMPointF32[])">
            <summary> 
            Map camera coordinates to depth coordinates for a few pixels.
            </summary>
            <param name="pos3d"> The array of world coordinates, in mm.</param>
            <param name="pos_uv"> The array of depth coordinates, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR Successful execution.</returns>
        </member>
        <member name="M:PXCMProjection.ProjectCameraToColor(PXCMPoint3DF32[],PXCMPointF32[])">
            <summary> 
            Map camera coordinates to color coordinates for a few pixels.
            <param name="pos3d"> The array of world coordinates, in mm.</param>
            <param name="pos_ij"> The array of color coordinates, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR Successful execution.</returns>
            </summary>
        </member>
        <member name="M:PXCMProjection.QueryUVMap(PXCMImage,PXCMPointF32[])">
            <summary> 
            Retrieve the UV map for the specific depth image. The UVMap is a PXCMPointF32 array of depth size width*height.
            </summary>
            <param name="depth"> The depth image instance.</param>
            <param name="uvmap"> The UV map, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR Successful execution.</returns>
        </member>
        <member name="M:PXCMProjection.QueryInvUVMap(PXCMImage,PXCMPointF32[])">
            <summary> 
            Retrieve the inverse UV map for the specific depth image. The inverse UV map maps color coordinates
            back to the depth coordinates. The inverse UVMap is a PXCMPointF32 array of color size width*height.
            </summary>
            <param name="depth"> The depth image instance.</param>
            <param name="inv_uvmap"> The inverse UV map, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR Successful execution.</returns>
        </member>
        <member name="M:PXCMProjection.QueryVertices(PXCMImage,PXCMPoint3DF32[])">
            <summary> 
            Retrieve the vertices for the specific depth image. The vertices is a PXCMPoint3DF32 array of depth 
            size width*height. The world coordiantes units are in mm.
            </summary>
            <param name="depth"> The depth image instance.</param>
            <param name="inv_uvmap"> The inverse UV map, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR Successful execution.</returns>
        </member>
        <member name="M:PXCMProjection.CreateColorImageMappedToDepth(PXCMImage,PXCMImage)">
            <summary> 
            Get the color pixel for every depth pixel using the UV map, and output a color image, aligned in space 
            and resolution to the depth image.
            </summary>
            <param name="depth"> The depth image instance.</param>
            <param name="color"> The color image instance.</param>
            <returns> The output image in the depth image resolution.</returns>
        </member>
        <member name="M:PXCMProjection.CreateDepthImageMappedToColor(PXCMImage,PXCMImage)">
            <summary> 
            Map every depth pixel to the color image resolution using the UV map, and output an incomplete 
            depth image (with holes), aligned in space and resolution to the color image. 
            </summary>
            <param name="depth"> The depth image instance.</param>
            <param name="color"> The color image instance.</param>
            <returns> The output image in the color image resolution.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PXCMRotation" -->
        <member name="M:PXCMRotation.QueryEulerAngles(PXCMRotation.EulerOrder)">
            <summary>			
            get rotation in Euler angles representation.
            Euler angles are a 3D point that represents rotation in 3D. Each variable is the angle 
            of rotation around a certain axis (x/y/z). 
            </summary>		 
            <param name="order"> the order in which we get the Euler angles (ROLL_PITCH_YAW as default)</param>
            <returns> 3D point containing Euler angles (RADIANS) in the given order.</returns>
        </member>
        <member name="M:PXCMRotation.QueryQuaternion">
            <summary>			
            get rotation in quaternion representation.
            Quaternion is a 4D point that represents rotation in 3D.
            </summary>	
            <returns> 4D point containing a quaternion representation (w,x,y,z)</returns>
        </member>
        <member name="M:PXCMRotation.QueryRotationMatrix(System.Single[0:,0:])">
            <summary>			.
            get rotation matrix representation.
            @param rotation matrix - 3x3 float array, containing the rotation matrix
            </summary>	
        </member>
        <member name="M:PXCMRotation.QueryAngleAxis">
            <summary>			
            get rotation in angle-axis representation.
            angle-axis represents rotation (angle in RADIANS) around an axis
            </summary>	
            <returns> AngleAxis struct containing an axis and angle of rotation around this axis.</returns>
        </member>
        <member name="M:PXCMRotation.QueryRoll">
            <summary>			
            get roll - angle of rotation around z axis using ROLL_PITCH_YAW eulerOrder. 
            </summary>		
            <returns> roll - angle of rotation around the z axis 		</returns>
        </member>
        <member name="M:PXCMRotation.QueryPitch">
            <summary>			
            get pitch - angle of rotation around x axis using ROLL_PITCH_YAW eulerOrder. 
            <returns> pitch - angle of rotation around the x axis 		</returns>
            </summary>		
        </member>
        <member name="M:PXCMRotation.QueryYaw">
            <summary>			
            get yaw - angle of rotation around y axis using ROLL_PITCH_YAW eulerOrder. 
            </summary>	
            <returns> pitch - angle of rotation around the y axis 		</returns>
        </member>
        <member name="M:PXCMRotation.Rotate(PXCMRotation)">
            <summary>			
            Set rotation as a concatenation of current rotation and the given Rotation.
            </summary>	
            <param name="rotation"> - the given rotation</param>
        </member>
        <member name="M:PXCMRotation.RotateVector(PXCMPoint3DF32)">
            <summary>			
            Get rotated vector according to current rotation.
            <param name="vec"> - the vector we want to rotate</param>
            <returns> rotated vector according to current rotation.</returns>
            </summary>	
        </member>
        <member name="M:PXCMRotation.SetFromQuaternion(PXCMPoint4DF32)">
            <summary>			
            Set rotation based on a quaternion.
            Quaternion is a 4D point that represents rotation in 3D.
            </summary>	
            <param name="quaternion"> rotation in quaternion representation.</param>
        </member>
        <member name="M:PXCMRotation.SetFromEulerAngles(PXCMPoint3DF32,PXCMRotation.EulerOrder)">
            <summary>			
            Set rotation based on Euler angles representation.
            Euler angles are a 3D point that represents rotation in 3D. Each variable is the angle 
            of rotation around a certain axis (x/y/z). 
            </summary>
            <param name="eulerAngles"> the rotation in Euler angles representation.</param>
            <param name="order"> the order in which we set the rotation (ROLL_PITCH_YAW as default).</param>
        </member>
        <member name="M:PXCMRotation.SetFromRotationMatrix(System.Single[0:,0:])">
            <summary>			
            Set rotation based on a 3x3 rotation matrix.
            Note that only rotation (not scale or translation) is taken into acount from the rotation matrix.
            That is, two matrices with the same rotation will yield the same Rotation instance regardless of their inequality.
            </summary>		
            <param name="rotationMatrix"> rotation in rotation matrix representation.</param>
        </member>
        <member name="M:PXCMRotation.SetFromAngleAxis(System.Single,PXCMPoint3DF32)">
            <summary>			
            Set rotation based on a rotation angle(RADIANS) around an axis.
            angle-axis represents rotation (angle in RADIANS) around an axis
            <param name="angle"> rotation angle (RADIANS).</param>
            <param name="axis"> rotation around this axis.</param>
            </summary>		
        </member>
        <member name="M:PXCMRotation.SetFromSlerp(System.Single,PXCMRotation,PXCMRotation)">
            <summary>			
            Set rotation from Spherical linear interpolation between two rotations.
            </summary>	
            <param name="startRotation"> - start rotation</param>
            <param name="endRotation"> - end rotation</param>
            <param name="factor"> - interpolation factor</param>
        </member>
        <member name="M:PXCMRotation.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            constructors and misc
            </summary>
            <param name="instance"></param>
            <param name="delete"></param>
        </member>
        <member name="T:PXCMRotation.AngleAxis">
            <summary> 
            @class AngleAxis
            Rotation in Angle-Axis representation. Based on a rotation angle (RADIANS) around an axis
            </summary>
        </member>
        <member name="T:PXCMRotation.EulerOrder">
            <summary> 
            EulerOrder
            EulerOrder indicates the order in which to get the Euler angles.
            This order matters. (ROLL_PITCH_YAW !=  ROLL_YAW_PITCH)
            Roll, Pitch and Yaw are the angles of rotation around the x, y and z axis accordingly.
            </summary>
        </member>
        <member name="T:PXCMSurfaceVoxelsData">
            <summary>
            Instance of this interface class can be created using 
            PXCMScenePerception.CreatePXCSurfaceVoxelsData(...). ExportSurfaceVoxels
            function fills the data buffer. It's client's responsibility to 
            explicitly release the memory by calling Dispose() on PXCMSurfaceVoxelsData.
            </summary>
        </member>
        <member name="M:PXCMSurfaceVoxelsData.QueryNumberOfSurfaceVoxels">
            <summary>
            Returns number of surface voxels present in the buffer. 
            This function is expected to be used after successful
            call to ExportSurfaceVoxels().
            </summary>
        </member>
        <member name="M:PXCMSurfaceVoxelsData.QueryCenterOfSurfaceVoxels">
            <summary>
            Returns an array to center of surface voxels extracted by 
            ExportSurfaceVoxels. This function is expected to be used after successful
            call to ExportSurfaceVoxels(). Valid range is [0, 3*QueryNumberOfSurfaceVoxels()).
            </summary>
        </member>
        <member name="M:PXCMSurfaceVoxelsData.QuerySurfaceVoxelsColor">
            <summary>
            Returns an array of colors with length 3*QueryNumberOfSurfaceVoxels(). Three
            color channels (RGB) per voxel. This function will return null, if 
            PXCMSurfaceVoxelsData was created using PXCMScenePerception.CreatePXCMSurfaceVoxelsData with bUseColor set to false.
            </summary>
        </member>
        <member name="M:PXCMSurfaceVoxelsData.Reset">
            <summary>
            Sets number of surface voxels to 0. However it doesn't release memory. 
            It should be used when you reset scene perception using 
            PXCMScenePerception.Reset() client should Reset PXCMSurfaceVoxelsData 
            when scene perception is Reset to stay in sync with the scene perception.
            </summary>
        </member>
        <member name="T:PXCMBlockMeshingData">
            <summary>
            An instance of this interface can be created using 
            PXCMScenePerception.CreatePXCMBlockMeshingData method DoMeshingUpdate
            function fills all the buffer with the data. It's client's responsibility to 
            explicitly release the memory by calling Dispose() on PXCMBlockMeshingData.
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryNumberOfBlockMeshes">
            <summary>
            Returns number of PXCMBlockMesh present inside the buffer
            returned by QueryBlockMeshes(). This function is expected to be used 
            after successful call to DoMeshingUpdate(...).
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryNumberOfVertices">
            <summary>
            Returns number of vertices present in the buffer returned by 
            QueryVertices(). This function is expected to be used after successful
            call to DoMeshingUpdate(...).
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryNumberOfFaces">
            <summary>
            Returns number of faces in the buffer returned by 
            QueryFaces(). This function is expected to be used after successful
            call to DoMeshingUpdate(...).
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryMaxNumberOfBlockMeshes">
            <summary>
            Returns maximum number of PXCMBlockMesh that can be returned by 
            DoMeshingUpdate. This value remains same throughout the lifetime of the
            instance.
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryMaxNumberOfVertices">
            <summary>
            Returns maximum number of vertices that can be returned by 
            PXCMBlockMeshingData. This value remains same throughout the lifetime of
            the instance.
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryMaxNumberOfFaces">
            <summary>
            Returns maximum number of faces that can be returned by 
            PXCMBlockMeshingData. This value remains same throughout the lifetime of 
            the instance.
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryBlockMeshes(PXCMBlockMeshingData.PXCMBlockMesh[])">
            <summary>
            Returns an array of PXCMBlockMesh objects with length same as 
            QueryNumberOfBlockMeshes().
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryBlockMeshes">
            <summary>
            Returns an array of PXCMBlockMesh objects with length same as 
            QueryNumberOfBlockMeshes().
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryVertices(System.Single[])">
            <summary>
            Returns an array of float points with length 4*QueryNumberOfVertices()
            Each vertex consists of 4 float points: (x, y, z) coordinates in meter
            unit + a confidence value. The confidence value is in the range [0, 1] 
            indicating how confident scene perception is about the presence of 
            the vertex. 
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryVertices">
            <summary>
            Returns an array of float points with length 4*QueryNumberOfVertices()
            Each vertex is consist of 4 float points: (x, y, z) coordinates in meter
            unit + a confidence value. The confidence value is in the range [0, 1] 
            indicating how confident scene perception is about the presence of 
            the vertex. 
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryVerticesColor(System.Byte[])">
            <summary>
            Returns an array of colors with length 3*QueryNumberOfVertices(). Three
            color channels (RGB) per vertex. This function will return null, if 
            PXCMBlockMeshingData was created using 
            PXCMScenePerception.CreatePXCMBlockMeshingData(...) with bUseColor set to false.
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryVerticesColor">
            <summary>
            Returns an array of colors with length 3*QueryNumberOfVertices(). Three
            color channels (RGB) per vertex. This function will return NULL, if 
            PXCMBlockMeshingData was created using 
            PXCMScenePerception.CreatePXCMBlockMeshingData(...) with bUseColor set to false.
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryFaces(System.Int32[])">
            <summary>
            Returns an array of faces forming the mesh (3 Int32 indices 
            per triangle) valid range is from [0, 3*QueryNumberOfFaces()].
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.QueryFaces">
            <summary>
            Returns an array of faces forming the mesh (3 Int32 indices 
            per triangle) valid range is from [0, 3*QueryNumberOfFaces()].
            </summary>
        </member>
        <member name="M:PXCMBlockMeshingData.Reset">
            <summary>
            Sets number of BlockMeshes, number of vertices and number of faces to
            0. However it doesn't release memory. It should be used when you reset 
            scene perception using PXCMScenePerception.Reset(). Client should Reset 
            PXCMBlockMeshingData when scene perception is reset to stay in sync with
            the scene perception.
            </summary>
        </member>
        <member name="T:PXCMBlockMeshingData.PXCMBlockMesh">
            <summary>
            Describes each BlockMesh present inside list returned by 
            QueryBlockMeshes().
            </summary>
        </member>
        <member name="M:PXCMScenePerception.SetVoxelResolution(PXCMScenePerception.VoxelResolution)">
            <summary>
            SetVoxelResolution sets volume resolution for the scene 
            perception. The VoxelResolution is locked when 
            PXCMSenseManager.Init() is called.
            Afterwards value for VoxelResolution remains same throughout the 
            lifetime of PXCMSenseManager. The default value of voxel 
            resolution is LOW_RESOLUTION.
            </summary>
            <param name="voxelResolution"> Resolution of the three dimensional
            reconstruction. 
            Possible values are:
            LOW_RESOLUTION:  For room-sized scenario (4/256m)
            MED_RESOLUTION:  For table-top-sized scenario (2/256m)
            HIGH_RESOLUTION: For object-sized scenario (1/256m)
            Choosing HIGH_RESOLUTION in a room-size environment may degrade the
            tracking robustness and quality. Choosing LOW_RESOLUTION in an 
            object-sized scenario may result in a reconstructed model missing 
            the fine details. </param>
            
            <returns>PXCM_STATUS_NO_ERROR if it succeeds, returns 
            PXCM_STATUS_ITEM_UNAVAILABLE if called after making call to 
            PXCMSenseManager.Init().</returns>
        </member>
        <member name="M:PXCMScenePerception.QueryVoxelResolution">
            <summary>
            To get voxel resolution used by the scene 
            perception module. Please refer to SetVoxelResolution(...) for more details.
            </summary> 
            <returns>Returns current value of VoxelResolution used by the 
            scene perception module.</returns>
        </member>
        <member name="M:PXCMScenePerception.EnableSceneReconstruction(System.Boolean)">
            <summary>
            Allows user to enable/disable integration of upcoming 
            camera stream into 3D volume. If disabled the volume will not be 
            updated. However scene perception will still keep tracking the 
            camera. This is a control parameter which can be updated before 
            passing every frame to the module.
            </summary> 
            <param name="enableFlag"> Enable/Disable flag for integrating depth
            data into the 3D volumetric representation.</param>
            
            <returns>  PXCM_STATUS_NO_ERROR if it succeeds, otherwise returns 
            the error code.</returns>
        </member>
        <member name="M:PXCMScenePerception.IsSceneReconstructionEnabled">
            <summary>
            Allows user to to check Whether integration of upcoming 
            camera stream into 3D volume is enabled or disabled. 
            </summary>
            <returns>  True, if integrating depth data into the 3D volumetric</returns>
            representation is enabled.
        </member>
        <member name="M:PXCMScenePerception.SetInitialPose(System.Single[])">
            <summary>
            Allows user to set the initial camera pose.
            This function is only available before first frame is passed to the
            module. Once the first frame is passed the initial camera pose is 
            locked and this function will be unavailable. If this function is 
            not used then the module default pose as the 
            initial pose for tracking for the device with no platform IMU and 
            for device with platform IMU the tracking pose will be computed 
            using gravity vector to align 3D volume with gravity when the 
            first frame is passed to the module.
            </summary>
            <param name="pose"> Array of 12 pxcF32 that stores initial camera pose
            user wishes to set in row-major order. Camera pose is specified in a 
            3 by 4 matrix [R | T] = [Rotation Matrix | Translation Vector]
            where R = [ r11 r12 r13 ]
            [ r21 r22 r23 ] 
            [ r31 r32 r33 ]
            T = [ tx  ty  tz  ]
            Pose Array Layout = [r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz]
            Translation vector is in meters.</param>
            
            <returns>  If successful it returns PXCM_STATUS_NO_ERROR,
            otherwise returns error code if invalid pose is passed or the 
            function is called after passing the first frame.</returns>
        </member>
        <member name="M:PXCMScenePerception.QueryTrackingAccuracy">
            <summary>
            Allows user to get tracking accuracy of the last frame 
            processed by the module. We expect users to call this function 
            after successful PXCMSenseManager.AcquireFrame(...) call and before 
            calling PXCMSenesManager.ReleaseFrame(). If tracking accuracy is FAILED 
            the volume data and camera pose are not updated.
            </summary>
            <returns>  TrackingAccuracy which can be HIGH, LOW, MED or FAILED.</returns>
        </member>
        <member name="M:PXCMScenePerception.GetCameraPose(System.Single[])">
            <summary>
            Allows user to access camera's latest pose. The 
            correctness of the pose depends on value obtained from 
            QueryTrackingAccuracy().
            </summary>
            <param name="pose"> Array of 12 Single to store camera pose in
            row-major order. Camera pose is specified in a 3 by 4 matrix 
            [R | T] = [Rotation Matrix | Translation Vector]
            where R = [ r11 r12 r13 ]
            [ r21 r22 r23 ] 
            [ r31 r32 r33 ]
            T = [ tx  ty  tz  ]
            Pose Array Layout = [r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz]
            Translation vector is in meters.</param>
            <returns>  PXCM_STATUS_NO_ERROR, If the function succeeds.
            Otherwise error code will be returned.</returns>
        </member>
        <member name="M:PXCMScenePerception.IsReconstructionUpdated">
            <summary>
            Allows user to check whether the 3D volume was updated 
            since last call to DoMeshingUpdate(...).
            This function is useful for determining when to call 
            DoMeshingUpdate. 
            </summary> 
            <returns>  flag indicating that reconstruction was updated.</returns>
        </member>
        <member name="M:PXCMScenePerception.QueryVolumePreview(System.Single[])">
            <summary>
            Allows user to access 2D projection image of reconstructed 
            volume from a given camera pose by ray-casting. This function is 
            optimized for real time performance. It is also useful for 
            visualizing progress of the scene reconstruction. User should 
            explicitly call Dispose() on PXCMImage after copying the data.
            or before making subsequent call to QueryVolumePreview(...).
            </summary>
            <param name="pose"> Array of 12 Singles that stores camera pose
            in row-major order. Camera pose is specified in a 
            3 by 4 matrix [R | T] = [Rotation Matrix | Translation Vector]
            where R = [ r11 r12 r13 ]
            [ r21 r22 r23 ] 
            [ r31 r32 r33 ]
            T = [ tx  ty  tz  ]
            Pose Array Layout = [r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz]
            Translation vector is in meters.</param>
            <returns>  Instance of PXCMImage whose content can be used for volume
            rendering. Returns null if there is an internal state error	or when
            the rendering is failed or when an invalid pose matrix is passed.</returns>
        </member>
        <member name="M:PXCMScenePerception.Reset(System.Single[])">
            <summary>
            Reset removes all reconstructed model (volume) information 
            and the module will reinitialize the model when next stream is 
            passed to the module. It also resets the camera pose to the one 
            provided. If the pose is not provided then the module will use 
            default pose if	there is no platform IMU on the device and in case 
            of device with platform IMU the pose will be computed using gravity
            vector to align 3D volume with gravity when the next frame is 
            passed to the module.
            
            However it doesn't Reset instance of PXCMBlockMeshingData created using 
            PXCMScenePerception.CreatePXCMBlockMeshingData(...). User should 
            explicitly call PXCMBlockMeshingData.Reset() to stay in sync with the 
            reconstruction model inside scene perception.
            </summary>
            <param name="pose"> Array of 12 Singles that stores initial camera pose
            user wishes to set in row-major order. Camera pose is specified in a 
            3 by 4 matrix [R | T] = [Rotation Matrix | Translation Vector]
            where R = [ r11 r12 r13 ]
            [ r21 r22 r23 ] 
            [ r31 r32 r33 ]
            T = [ tx  ty  tz  ]
            Pose Array Layout = [r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz]
            Translation vector is in meters.</param>
            <returns>  On success returns PXCM_STATUS_NO_ERROR. Otherwise returns
            error code like when an invalid pose argument is passed.</returns>
        </member>
        <member name="M:PXCMScenePerception.Reset">
            <summary>
            Reset removes all reconstructed model (volume) information 
            and the module will reinitializes the model when next Stream is 
            passed to the module. It also resets the camera pose to the one 
            provided or otherwise uses default initial pose. However If the 
            platform IMU is detected then the rotation matrix set by Reset will 
            be modified using gravity vector to align 3D volume with gravity
            when the next frame frame is passed to the module And the 
            translation vector will be retained. If the reset is called without Pose
            Platform with IMU then the module will use default translation and 
            rotation will be obtained based on value of gravity vector when the 
            next frame is passed.
            
            However it doesn't Reset instance of PXCMBlockMeshingData created using 
            PXCMScenePerception.CreatePXCMBlockMeshingData. User should 
            explicitly call PXCMBlockMeshingData.Reset to stay in sync with the 
            reconstruction model inside scene perception.
            </summary> 
            <param name="pose"> Array of 12 Singles that stores initial camera pose
            user wishes to set in row-major order. Camera pose is specified in a 
            3 by 4 matrix [R | T] = [Rotation Matrix | Translation Vector]
            where R = [ r11 r12 r13 ]
            [ r21 r22 r23 ] 
            [ r31 r32 r33 ]
            T = [ tx  ty  tz  ]
            Pose Array Layout = [r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz]
            Translation vector is in meters.</param>
            
            <returns>  On success returns PXCM_STATUS_NO_ERROR. Otherwise returns
            error code like when an invalid pose is argument passed.</returns>
        </member>
        <member name="M:PXCMScenePerception.SetMeshingThresholds(System.Single,System.Single)">
            <summary>
            Is an optional function meant for expert users. It allows 
            users to set meshing thresholds for DoMeshingUpdate(...)
            The values set by this function will be used by succeeding calls to
            DoMeshingUpdate(...). Sets the thresholds indicating the magnitude of 
            changes occurring in any block that would be considered significant
            for re-meshing.
            </summary>
            <param name="maxDistanceChangeThreshold"> If the maximum change in a
            block exceeds this value, then the block will be re-meshed. Setting
            the value to zero will retrieve all blocks.</param>
            
            <param name="avgDistanceChange"> If the average change in a block
            exceeds this value, then the block will be re-meshed. 
            Setting the value to zero will retrieve all blocks.</param>
            
            <returns>  PXCM_STATUS_NO_ERROR, on success otherwise returns error code.</returns>
        </member>
        <member name="M:PXCMScenePerception.CreatePXCMBlockMeshingData(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Allows user to allocate PXCMBlockMeshingData which can be 
            passed to DoMeshingUpdate. It's user's responsibility to explicitly 
            release the memory by calling Dispose().
            </summary>
            <param name="maxBlockMesh"> Maximum number of mesh blocks client can
            handle in one update from DoMeshingUpdate(...), If non-positive value is
            passed then it uses the default value. Use 
            PXCMBlockMeshingData::QueryMaxNumberOfBlockMeshes() to check the value.</param>
            
            <param name="maxFaces"> Maximum number of faces that client can handle
            in one update from DoMeshingUpdate(...), If non-positive value is passed 
            then it uses the default value. Use 
            PXCMBlockMeshingData::QueryMaxNumberOfFaces() to check the value.</param>
            
            <param name="maxVertices"> Maximum number of vertices that client can
            handle in one update from DoMeshingUpdate(...). If non-positive value is
            passed then it uses the default value. Use 
            PXCMBlockMeshingData::QueryMaxNumberOfVertices() to check the value.</param>
            
            <param name="bUseColor"> Flag indicating whether user wants
            scene perception to return color per vertex in the mesh update. If 
            set the color buffer will be created in PXCMBlockMeshingData 
            otherwise color buffer will not be created and any calls made to 
            PXCMBlockMeshingData::QueryVerticesColor() will return null.</param>
            
            <returns>  on success returns valid handle to the instance otherwise returns null.</returns>
        </member>
        <member name="M:PXCMScenePerception.CreatePXCMBlockMeshingData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allows user to allocate PXCMBlockMeshingData with color enabled
            which can be passed to DoMeshingUpdate. It's user's responsibility to 
            explicitly release the memory by calling Dispose().
            </summary>
            <param name="maxBlockMesh"> Maximum number of mesh blocks client can
            handle in one update from DoMeshingUpdate(...), If non-positive value is
            passed then it uses the default value. Use 
            PXCMBlockMeshingData::QueryMaxNumberOfBlockMeshes() to check the value.</param>
            
            <param name="maxFaces"> Maximum number of faces that client can handle
            in one update from DoMeshingUpdate(...), If non-positive value is passed 
            then it uses the default value. Use 
            PXCMBlockMeshingData::QueryMaxNumberOfFaces() to check the value.</param>
            
            <param name="maxVertices"> Maximum number of vertices that client can
            handle in one update from DoMeshingUpdate(...). If non-positive value is
            passed then it uses the default value. Use 
            PXCMBlockMeshingData::QueryMaxNumberOfVertices() to check the value.</param>
            
            <returns>  on success returns valid handle to the instance otherwise returns null.</returns>
        </member>
        <member name="M:PXCMScenePerception.CreatePXCMBlockMeshingData">
            <summary>
            Allows user to allocate PXCMBlockMeshingData with default number 
            of mesh blocks, vertices, face and color enabled which can be passed to 
            DoMeshingUpdate(...). It's user's responsibility to explicitly 
            release the memory by calling Dispose().
            </summary>
            <returns>  on success returns valid handle to the instance otherwise returns null.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PXCMScenePerception.DoMeshingUpdate(PXCMBlockMeshingData,System.Boolean,PXCMScenePerception.MeshingUpdateInfo)" -->
        <member name="M:PXCMScenePerception.DoMeshingUpdate(PXCMBlockMeshingData,System.Boolean)">
            <summary>
            Performs meshing and hole filling if requested. This 
            function can be slow if there is a lot of data to be meshed. For
            Efficiency reason we recommend running this function on a separate
            thread. This call is designed to be thread safe if called in 
            parallel with ProcessImageAsync. 
            </summary>
            <param name="blockMeshingData"> Instance of pre-allocated
            PXCMBlockMeshingData. Refer to
            PXCMScenePerception::CreatePXCMBlockMeshingData(...) for how 
            to allocate PXCMBlockMeshingData.</param>
            
            <param name="fillHoles"> Argument to indicate whether to fill holes in
            mesh blocks. If set, it will fill missing details in each mesh block 
            that is visible from scene perception's camera current pose and 
            completely surrounded by closed surface(holes) by smooth linear 
            interpolation of adjacent mesh data.</param>
            
            <param name="meshingUpdateInfo"> Argument to indicate which mesh
            data you wish to use
            -countOfBlockMeshesRequired: If set, on successful call 
            this function will set number of block meshes available for 
            meshing which can be retrieved using QueryNumberOfBlockMeshes()
            
            -blockMeshesRequired: Can only be set to true if 
            countOfBlockMeshesRequired is set to true otherwise the value is 
            ignored, If set, on successful call to this function it 
            will update block meshes array in pBlockMeshingUpdateInfo which can
            be retrieved using QueryBlockMeshes()
            
            -countOfVeticesRequired: If set, on successful call this 
            function it will set number of vertices available for meshing 
            which can be retrieved using QueryNumberOfVertices()
            
            -verticesRequired: Can only be set if 
            countOfVeticesRequired is set to true otherwise the value is ignored, 
            If set, on successful call to this function it will update vertices
            array in pBlockMeshingUpdateInfo which can be retrieved using 
            QueryVertices()
            
            -countOfFacesRequired: If set, on successful call this 
            function it will set number of faces available for meshing which 
            can be retrieved using QueryNumberOfFaces()
            
            -facesRequired: Can only be set, If countOfFacesRequired 
            is set to true otherwise the value is ignored, If set, on 
            successful call to this function it will update faces array in 
            pBlockMeshingUpdateInfo which can be retrieved using QueryFaces()
            
            -colorsRequired: If set and PXCMBlockMeshingData was created with color, on 
            success function will fill in colors array which can be accessed using 
            QueryVerticesColor()
            
            +NOTE: set meshing threshold to (0, 0) prior to calling DoMeshingUpdate
            with hole filling enabled to fill mesh regions that are not changed.</param>
            
            <returns>  On success PXCM_STATUS_NO_ERROR otherwise error code will 
            be returned</returns>
        </member>
        <member name="M:PXCMScenePerception.DoMeshingUpdate(PXCMBlockMeshingData)">
            <summary>
            Performs DoMeshingUpdate(...) with hole filling disabled
            and requests all mesh data (vertices, faces, block meshes and color). 
            </summary>
            <param name="blockMeshingData"> Instance of pre-allocated
            PXCMBlockMeshingData. Refer to 
            PXCMScenePerception::CreatePXCMBlockMeshingData For how to allocate 
            PXCMBlockMeshingData.</param>
            
            <returns>  On success PXCM_STATUS_NO_ERROR otherwise error code will 
            be returned.</returns>
        </member>
        <member name="M:PXCMScenePerception.SaveMesh(System.String,System.Boolean)">
            <summary>
            Allows users to save mesh in an ASCII obj file in 
            MeshResolution::HIGH_RESOLUTION_MESH.
            </summary> 
            <param name="pFile"> the path of the file to use for saving the mesh.</param>
            
            <param name="bFillHoles"> Indicates whether to fill holes in mesh
            before saving the mesh.</param>
            
            <returns>  On success PXCM_STATUS_NO_ ERROR, Otherwise error code is 
            returned on failure.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PXCMScenePerception.SaveMesh(System.String)" -->
        <member name="M:PXCMScenePerception.CheckSceneQuality(PXCMCapture.Sample)">
            <summary> 
            Allows user to check whether the input stream is suitable 
            for starting, resetting/restarting or tracking scene perception.
            </summary> 
            <param name="PXCMCapture.Sample"> Input stream sample required by
            scene perception module.</param>
            
            <returns>  Returns positive values between 0.0 and 1.0 to indicate how good is scene for 
            starting, tracking or resetting scene perception.
            1.0 -> represents ideal scene for starting scene perception.
            0.0 -> represents unsuitable scene for starting scene perception.
            
            Returns negative values to indicate potential reason for tracking failure
            -1.0 -> represents a scene without enough structure/geomtery
            -2.0 -> represents a scene without enough depth pixels 
            (Too far or too close to the target scene or 
            outside the range of depth camera)
            Also, value 0.0 is returned when an invalid argument is passed or 
            if the function is called before calling PXCSenseManager::Init().</returns>
        </member>
        <member name="M:PXCMScenePerception.FillDepthImage(PXCMImage)">
            <summary> 
            Fills holes in the supplied depth image.
            </summary>
            <param name="depthImage"> Instance of depth image to be filled.
            Pixels with depth value equal to zero will be linearly interpolated 
            with adjacent depth pixels. The image resolution should be 320X240.</param>
            
            
            <returns>  On success PXCM_STATUS_NO_ERROR,
            Otherwise error code will be returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.GetNormals(PXCMPoint3DF32[])">
            <summary>
            Allows user to access normals of surface that are within
            view from the camera's current pose.
            </summary> 
            <param name="normals"> Array of pre-allocated PXCMPoint3DF32 to store
            normal vectors. Each normal vector has three components namely x, y 
            and z. The size in pixels must be QVGA and hence the array size in 
            bytes should be: (PXCMPoint3DF32's byte size) x (320 x 240). </param>
            
            <returns>  On success PXCM_STATUS_NO_ERROR,			
            Otherwise error code will be returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.GetVertices(PXCMPoint3DF32[])">
            <summary>
            Allows user to access the surface's vertices
            that are within view from camera's current pose.
            </summary> 
            <param name="vertices"> Array of pre-allocated PXCMPoint3DF32 to store
            vertices. Each element is a vector of x, y and z components. The 
            image size in pixels must be QVGA and hence the array
            size in bytes should be: (PXCMPoint3DF32's byte size) x (320 x 240).</param>
            
            <returns>  On success PXCM_STATUS_NO_ERROR,			
            Otherwise error code will be returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.SaveCurrentState(System.String)">
            <summary>
            Allows user to save the current scene perception's state to
            a file and later supply the file to LoadState() to restore scene 
            perception to the saved state.
            </summary> 
            <param name="fileName"> The path of the file to use for saving the
            scene perception state.</param>
            
            <returns>  On success PXCM_STATUS_NO_ERROR,			
            Otherwise error code will be returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.LoadState(System.String)">
            <summary>
            Allows user to load the current scene perception's state 
            from the file that has been created using SaveCurrentState. 
            This function is only available before calling 
            PXCMSenseManager::Init().
            </summary>
            <param name="fileName"> The path of the file to load scene perception
            state from.</param>
            
            <returns>  On success PXCM_STATUS_NO_ERROR,			
            Otherwise error code will be returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.CreatePXCMSurfaceVoxelsData(System.Int32,System.Boolean)">
            <summary>
            Allows user to allocate CreatePXCMSurfaceVoxelsData which can be 
            passed to ExportSurfaceVoxels. It's user's responsibility to explicitly 
            release the instance by calling Dispose().
            </summary>
            <param name="voxelCount"> Maximum number of voxels
            client is expecting in each call to ExportSurfaceVoxels(...).  </param>
            
            <param name="bUseColor"> Flag indicating whether user wants
            scene perception to return voxel when ExportSurfaceVoxels(...) is 
            called. If set, the color buffer will be allocated in PXCMSurfaceVoxelsData 
            otherwise color buffer will not be created and any calls made to 
            PXCMSurfaceVoxelsData.QuerySurfaceVoxelsColor() will return null.</param>
            
            <returns>  on success returns valid handle to the instance otherwise returns null.</returns>
        </member>
        <member name="M:PXCMScenePerception.CreatePXCMSurfaceVoxelsData">
            <summary>
            Allows user to allocate CreatePXCMSurfaceVoxelsData without color,
            which can be passed to ExportSurfaceVoxels with default estimate of number of voxels. 
            It's user's responsibility to explicitly release the instance by calling Dispose().
            </summary>
        </member>
        <member name="M:PXCMScenePerception.ExportSurfaceVoxels(PXCMSurfaceVoxelsData,PXCMPoint3DF32,PXCMPoint3DF32)">
            <summary>
            Allows user to export the voxels intersected by the surface
            scanned. Optionally allows to specify region of interest for 
            surface voxels to be exported. voxels will be exported in parts over 
            multiple calls to this function. Client is expected to check return code to 
            determine if all voxels are exported successfully or not.
            </summary>
            <param name="surfaceVoxelsData"> Pre-allocated instance of PXCMSurfaceVoxelsData
            using CreatePXCMSurfaceVoxelsData(...). On success the function will fill 
            in center of each surface voxel in an array which can be obtained using QueryCenterOfSurfaceVoxels
            and number of voxels which can be retrieved using QueryNumberOfSurfaceVoxels().</param>
            
            <param name="lowerLeftFrontPoint"> Optional, PXCMPoint3DF32 represents lower
            left corner of the front face of the bounding box which specifies region of interest for exporting 
            surface voxels.</param>
            
            <param name="upperRightRearPoint"> Optional, PXCMPoint3DF32 represents upper
            right corner of the rear face of the bounding box which specifies region of interest for exporting 
            surface voxels.</param>
            
            <returns>  If scene perception module is able to export all the surface 
            voxels it has acquired it will return PXCM_STATUS_NO_ERROR and after that 
            any calls made to ExportSurfaceVoxels(...) will restart exporting all the
            voxels again.
            If all voxels cannot be fit into specified surfaceVoxelsData, it will 
            return warning code PXCM_STATUS_DATA_PENDING indicating that client 
            should make additional calls to ExportSurfaceVoxels to get remaining 
            voxels until PXCM_STATUS_NO_ERROR is returned.</returns>
        </member>
        <member name="M:PXCMScenePerception.ExportSurfaceVoxels(PXCMSurfaceVoxelsData)">
            <summary>
            Allows to Export Surface Voxels present in the entire volume.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PXCMScenePerception.ExtractPlanes(PXCMCapture.Sample,System.Single,System.Int32,System.Single[0:,0:]@,System.Byte[]@)" -->
        <member name="M:PXCMScenePerception.SetMeshingResolution(PXCMScenePerception.MeshResolution)">
            <summary>
            Allows user to set meshing resolution for DoMeshingUpdate(...).
            </summary>
            <param name="meshResolution:"> Mesh Resolution user wishes to set.</param>
            
            <returns>  On success PXCM_STATUS_NO_ERROR,			
            Otherwise error code will be returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.QueryMeshingResolution">
            <summary>
            Allows user to get meshing resolution used by DoMeshingUpdate(...).
            </summary>
            <returns>  MeshResolution used by DoMeshingUpdate(...).</returns>
        </member>
        <member name="M:PXCMScenePerception.QueryMeshingThresholds(System.Single@,System.Single@)">
            <summary>
            Allows user to get meshing thresholds used by scene 
            perception.
            </summary>
            <param name="maxDistanceChangeThreshold:"> retrieve max distance change threshold.</param>
            
            <param name="avgDistanceChange:"> retrieve average distance change threshold.</param>
            
            <returns>  On success PXCM_STATUS_NO_ERROR,			
            Otherwise error code will be returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.SetMeshingRegion(PXCMPoint3DF32,PXCMPoint3DF32)">
            <summary> 
            Allows user to set region of interest for Meshing. If used,
            The DoMeshingUpdate(...) function will only 
            mesh these specified regions. Use ClearMeshingRegion() to clear the 
            meshing region set by this function.
            </summary>
            <param name="lowerLeftFrontPoint:"> Pre-allocated PXCMPoint3DF32 which
            specifies lower left corner of the front face of the bounding box.</param>
            
            <param name="upperRightRearPoint:"> Pre-allocated PXCMPoint3DF32 which specifies
            upper right corner of the rear face of the bounding box.</param>
            
            <returns>  On success PXCM_STATUS_NO_ERROR,			
            Otherwise error code will be returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.ClearMeshingRegion">
            <summary>
            Allows user to clear meshing region set by SetMeshingRegion(...).
            </summary>
            <returns>  On success PXCM_STATUS_NO_ERROR,			
            Otherwise error code will be returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.SetCameraPose(System.Single[])">
            <summary>
            Allows user to enforce the supplied pose as the camera pose 
            .The module will track the camera from this pose when the next 
            frame is passed. This function can be called any time after module finishes 
            processing first frame or any time after module successfully processes the 
            first frame post a call to Reset scene perception.
            </summary>
            <param name="pose:"> Array of 12 pxcF32 that stores the camera pose
            user wishes to set in row-major order. Camera pose is specified in a 
            3 by 4 matrix [R | T] = [Rotation Matrix | Translation Vector]
            where R = [ r11 r12 r13 ]
            [ r21 r22 r23 ] 
            [ r31 r32 r33 ]
            T = [ tx  ty  tz  ]
            Pose Array Layout = [r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz]
            Translation vector is in meters.
            </param>
            <returns>  PXCM_STATUS_NO_ERROR, if the function succeeds.
            Otherwise error code will be returned.</returns>
        </member>
        <member name="M:PXCMScenePerception.QueryVoxelSize">
            <summary>
            Allows user to get length of side of voxel cube in meters.
            </summary>
            <returns>  Returns length of side of voxel cube in meters.</returns>
        </member>
        <member name="M:PXCMScenePerception.GetInternalCameraIntrinsics(PXCMScenePerception.ScenePerceptionIntrinsics@)">
            <summary>
            Allows user to get the intrinsics of internal scene perception 
            camera.	These intrinsics should be used with output images obtained from 
            the module. Such as QueryVolumePreview(...), GetVertices(...) and 
            GetNormals(..). This function should only be used after calling 
            PXCMSenseManager.Init() otherwise it would return an error code.
            </summary>
            <param name="spIntrinsic "> Handle to pre-allocated instance of
            ScenePerceptionIntrinsics. On success this instance will be filled with 
            appropriate values.</param>
            
            <returns>  PXCM_STATUS_NO_ERROR, if the function succeeds.
            Otherwise error code will be returned.</returns>
        </member>
        <member name="M:PXCMScenePerception.DoReconstruction(PXCMCapture.Sample,System.Single[])">
            <summary>
            Allows user to integrate specified stream from supplied pose in to 
            the reconstructed volume.
            </summary>
            <param name="sample:"> Input stream sample required by scene perception module.
            Obtained using PXCMSenseManager.QueryScenePerceptionSample().</param>
            
            <param name="pose:"> Estimated pose for the supplied input stream.
            Array of 12 pxcF32 that stores the camera pose
            user wishes to set in row-major order. Camera pose is specified in a 
            3 by 4 matrix [R | T] = [Rotation Matrix | Translation Vector]
            where R = [ r11 r12 r13 ]
            [ r21 r22 r23 ] 
            [ r31 r32 r33 ]
            T = [ tx  ty  tz  ]
            Pose Array Layout = [r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz]
            Translation vector is in meters.</param>
            
            <returns>  PXCM_STATUS_NO_ERROR, if the function succeeds.
            Otherwise error code will be returned.</returns>
        </member>
        <member name="M:PXCMScenePerception.EnableRelocalization(System.Boolean)">
            <summary>
            Allows user to enable/disable re-localization feature of scene 
            perception's camera tracking. By default re-localization is enabled. This 
            functionality is only available after PXCMSenseManager.Init() is called.
            </summary>
            <param name="enableRelocalization:"> Flag specifying whether to enable or
            disable re-localization.</param>
            
            <returns>  PXCM_STATUS_NO_ERROR, if the function succeeds.
            Otherwise error code will be returned.</returns>
        </member>
        <member name="M:PXCMScenePerception.TransformPlaneEquationToWorld(System.Int32,System.Single[0:,0:],System.Single[])">
            <summary>
            Allows user to transform plane equations obtained from
            ExtractPlanes(...) to world co-ordinate system using the provided 
            pose and returns number of planes found in supplied plane equation.
            </summary>
            <param name="maxPlaneNumber"> Number of rows of the equation 
            array pPlaneEq.</param>
            
            <param name="pPlaneEq"> Pre-allocated float array plane equations
            obtained from  ExtractPlanes(...). On success the plane equations will 
            be transformed in to world coordinate system using supplied camera pose.</param>
            
            <param name="pose:"> Array of 12 pxcF32 that stores camera pose
            of the capture sample that was supplied to the ExtractPlanes(...).
            stored in row-major order. Camera pose is specified in a 
            3 by 4 matrix [R | T] = [Rotation Matrix | Translation Vector]
            where R = [ r11 r12 r13 ]
            [ r21 r22 r23 ] 
            [ r31 r32 r33 ]
            T = [ tx  ty  tz  ]
            Pose Array Layout = [r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz]
            Translation vector is in meters.
            
            +NOTE: Use the pose obtained from GetCameraPose(...) 
            to transform plane equations.
             </param>
            <returns>  On success, returns positive number indicating 
            number of planes found in pPlaneEq. Negative number indicates errors like 
            invalid argument.</returns>
        </member>
        <member name="M:PXCMScenePerception.SaveMeshExtended(System.String,PXCMScenePerception.SaveMeshInfo)">
            <summary>
            Allows users to save different configuration of mesh in an 
            ASCII obj file.
            </summary>
            <param name="fileName:"> the path of the file to use for saving the mesh.</param>
            
            <param name="saveMeshInfo"> Argument to indicate mesh configuration
            you wish to save.
            
            -fillMeshHoles: Flag indicates whether to fill holes in saved mesh. 
            
            saveMeshColor: Flag indicates whether to save mesh with color.
            
            meshResolution: Indicates resolution for mesh to be saved.
            </param>
            <returns> On success PXCM_STATUS_NO_ERROR, Otherwise error code is
            returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.EnableInertialSensorSupport(System.Boolean)">
            <summary>
            Allows user to enable or disable inertial sensor support for scene perception,
            by default it is disabled. This function is only available before calling 
            PXCSenseManager::Init().
            </summary>
            <returns> On success PXCM_STATUS_NO_ ERROR, Otherwise error code is 
            returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.EnableGravitySensorSupport(System.Boolean)">
            <summary>
            Allows user to enable or disable gravity sensor support for scene perception,
            by default it is enabled. This function is only available before calling 
            PXCSenseManager::Init().
            </summary>
            <returns>  On success PXCM_STATUS_NO_ ERROR, Otherwise error code is 
            returned on failure.</returns>
        </member>
        <member name="M:PXCMScenePerception.IsGravitySensorSupportEnabled">
            <summary>
            Allows user to get status(enabled/disabled) of gravity sensor support 
            for scene perception.
            </summary>
            <returns>  On success PXCM_STATUS_NO_ ERROR, Otherwise error code is </returns>
            returned on failure.
        </member>
        <member name="M:PXCMScenePerception.IsInertialSensorSupportEnabled">
            <summary>
            Allows user to get status(enabled/disabled) of inertial sensor support
            for scene perception.
            </summary>
            <returns>  On success PXCM_STATUS_NO_ ERROR, Otherwise error code is 
            returned on failure.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PXCMScenePerception.GetVolumePreview(System.Single[],System.Byte[],System.Single[],System.Single[])" -->
        <member name="M:PXCMSenseManager.Close">
                        @brief	This function closes the execution pipeline.
        </member>
        <member name="M:PXCMSenseManager.Init(PXCMSenseManager.Handler)">
            <summary>
            Initialize the SenseManager pipeline for streaming with callbacks. The application must 
            enable raw streams or algorithm modules before this function.
            </summary>
            <param name="handler">Optional callback instance. </param>
            <returns>PXC_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.StreamFrames(System.Boolean)">
            <summary>
            Stream frames from the capture module to the algorithm modules. The application must 
            initialize the pipeline before calling this function. AcquireFrame/ReleaseFrame are not compatible with StreamFrames. Run the SenseManager in the pulling
            mode with AcquireFrame/ReleaseFrame, or the callback mode with StreamFrames.
            </summary>
            <param name="blocking">True: the function blocks until the streaming stops (upon any capture device error or any callback function returns any error. 
            False: the function returns immediately while running streaming in a thread.</param>
            <returns>PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.QuerySample(System.Int32)">
            <summary>
            Return the captured sample for the specified module or explicitly/impl requested streams. 
            For modules, use mid=module interface identifier. 
            For explictly requested streams via multiple calls to EnableStream(s), use mid=PXCCapture::CUID+0,1,2... 
            The captured sample is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <param name="mid">The module identifier. Usually this is the interface identifier, or PXCCapture::CUID+n for raw video streams.</param>
            <returns>The sample instance, or null if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.QuerySession">
            <summary>
            	Return the PXCSession instance. Internally managed. Do not release the instance.
            The session instance is managed internally by the SenseManager. Do not release the session instance.
            </summary>
            <returns> The PXCMSession instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryCaptureManager">
            <summary>
            	Return the PXCMCaptureManager instance. Internally managed. Do not release the instance.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The PXCMCaptureManager instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QuerySample">
            <summary>
            	Return the captured sample for the specified module or explicitly requested streams. 
            For modules, use mid=module interface identifier. 
            For explictly requested streams via multiple calls to EnableStream(s), use mid=PXCMCapture.CUID+0,1,2... 
            The captured sample is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <param name="mid"> The module identifier. Usually this is the interface identifier, or PXCMCapture.CUID+n for raw video streams.</param>
            <returns> The sample instance, or null if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.Query3DSegSample">
            <summary>
            	Return the captured sample for the user segmentation module.
            The captured sample is managed internally by the SenseManager. Do not release the sample.
            </summary>
            <returns> The sample instance, or NULL if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryScenePerceptionSample">
            <summary>
            	Return the captured sample for the scene perception module.
            The captured sample is managed internally by the SenseManager. Do not release the sample.
            </summary>
            <returns> The sample instance, or NULL if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryEnhancedVideoSample">
            <summary>
            	  Return the captured sample for the enhanced Videography module.
            The captured sample is managed internally by the SenseManager. Do not release the sample.
            </summary>
            <returns> The sample instance, or NULL if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryTrackerSample">
            <summary>
            	Return the captured sample for the object tracking module.
            The captured sample is managed internally by the SenseManager. Do not release the sample.
            </summary>
            <returns> The sample instance, or NULL if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryFaceSample">
            <summary>
            	Return the captured sample for the face module.
            The captured sample is managed internally by the SenseManager. Do not release the sample.
            </summary>
            <returns> The sample instance, or NULL if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryPersonTrackingSample">
            <summary>
            	Return the captured sample for the PersonTracking module.
            The captured sample is managed internally by the SenseManager. Do not release the sample.
            </summary>
            <returns> The sample instance, or NULL if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryHandSample">
            <summary>
            	Return the captured sample for the hand module.
            The captured sample is managed internally by the SenseManager. Do not release the sample.
            </summary>
            <returns> The sample instance, or NULL if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryHandCursorSample">
            <summary>
            	Return the captured sample for the hand module.
            The captured sample is managed internally by the SenseManager. Do not release the sample.
            </summary>
            <returns> The sample instance, or NULL if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryBlobSample">
            <summary>
            	Return the captured sample for the blob module.
            The captured sample is managed internally by the SenseManager. Do not release the sample.
            </summary>
            <returns> The sample instance, or NULL if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryObjectRecognitionSample">
            <summary>
            	Return the captured sample for the ObjectRecognition module.
            The captured sample is managed internally by the SenseManager. Do not release the sample.
            </summary>
            <returns> The sample instance, or null if the captured sample is not available.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryModule(System.Int32)">
            <summary>
            	Return the module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <param name="mid"> The module identifier. Usually this is the interface identifier.</param>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.Query3DSeg">
            <summary>
            	Return the user segmentation module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.Query3DScan">
            <summary>
            	Return the 3D scanning module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryScenePerception">
            <summary>
             Return the Scene Perception module instance. Between AcquireFrame/ReleaseFrame, 
            the function returns null if the specified module hasn't completed processing the current 
            frame of image data. The instance is managed internally by the SenseManager. 
            Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryTracker">
            <summary>
            	Return the object tracking module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryFace">
            <summary>
            	Return the Face module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryTouchlessController">
            <summary>
            	Return the Touchless module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryHand">
            <summary>
            	Return the hand module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryHandCursor">
            <summary>
            	Return the hand module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryObjectRecognition">
            <summary>
            	Return the ObjectRecognition module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryBlob">
            <summary>
            	Return the Blob module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryEnhancedVideo">
            <summary>
            	Return the Enhanced Videography module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.QueryPersonTracking">
            <summary>
            	Return the Enhanced Videography module instance. Between AcquireFrame/ReleaseFrame, the function returns
            NULL if the specified module hasn't completed processing the current frame of image data.
            The instance is managed internally by the SenseManager. Do not release the instance.
            </summary>
            <returns> The module instance.</returns>
        </member>
        <member name="M:PXCMSenseManager.Init">
            <summary>
            	Initialize the SenseManager pipeline for streaming. The application must enable raw 
            streams or algorithm modules before this function.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.IsConnected">
            <summary>
            	Stream frames from the capture module to the algorithm modules. The application must 
            initialize the pipeline before calling this function. If blocking, the function blocks until
            the streaming stops (upon any capture device error or any callback function returns any error.
            If non-blocking, the function returns immediately while running streaming in a thread.
            </summary>
            <param name="blocking"> The blocking status.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.AcquireFrame(System.Boolean,System.Int32)">
            <summary>
            	This function starts streaming and waits until certain events occur. If ifall=true, 
            the function blocks until all samples are ready and the modules completed processing the samples.
            If ifall=false, the function blocks until any of the mentioned is ready. The SenseManager 
            pipeline pauses at this point for the application to retrieve the processed module data, until 
            the application calls ReleaseFrame.
            AcquireFrame/ReleaseFrame are not compatible with StreamFrames. Run the SenseManager in the pulling
            mode with AcquireFrame/ReleaseFrame, or the callback mode with StreamFrames.
            </summary>
            <param name="ifall"> If true, wait for all modules to complete processing the data.</param>
            <param name="timeout"> The time out value in milliseconds.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.AcquireFrame(System.Boolean)">
            <summary>
            	This function starts streaming and waits until certain events occur. If ifall=true, 
            the function blocks until all samples are ready and the modules completed processing the samples.
            If ifall=false, the function blocks until any of the mentioned is ready. The SenseManager 
            pipeline pauses at this point for the application to retrieve the processed module data, until 
            the application calls ReleaseFrame.
            AcquireFrame/ReleaseFrame are not compatible with StreamFrames. Run the SenseManager in the pulling
            mode with AcquireFrame/ReleaseFrame, or the callback mode with StreamFrames.
            </summary>
            <param name="ifall"> If true, wait for all modules to complete processing the data.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.AcquireFrame">
            <summary>
            	This function starts streaming and waits until certain events occur. If ifall=true, 
            the function blocks until all samples are ready and the modules completed processing the samples.
            If ifall=false, the function blocks until any of the mentioned is ready. The SenseManager 
            pipeline pauses at this point for the application to retrieve the processed module data, until 
            the application calls ReleaseFrame.
            AcquireFrame/ReleaseFrame are not compatible with StreamFrames. Run the SenseManager in the pulling
            mode with AcquireFrame/ReleaseFrame, or the callback mode with StreamFrames..
            </summary>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.ReleaseFrame">
            <summary>
            	This function resumes streaming after AcquireFrame.
            AcquireFrame/ReleaseFrame are not compatible with StreamFrames. Run the SenseManager in the pulling
            mode with AcquireFrame/ReleaseFrame, or the callback mode with StreamFrames.
            </summary>
        </member>
        <member name="M:PXCMSenseManager.EnableStream(PXCMCapture.StreamType,System.Int32,System.Int32)">
            <summary>
            	Explicitly request to stream the specified raw stream. If specified more than one stream, 
            SenseManager will synchronize these streams. If called multiple times, the function treats each
            stream request as independent (unaligned). The stream identifier is PXCCapture.CUID+n.
            </summary>
            <param name="type"> The stream type.</param>
            <param name="width"> stream width.</param>
            <param name="height"> stream height.</param>
            <returns> PXC_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableStream(PXCMCapture.StreamType,System.Int32,System.Int32,System.Single)">
            <summary>
            	Explicitly request to stream the specified raw stream. If specified more than one stream, 
            SenseManager will synchronize these streams. If called multiple times, the function treats each
            stream request as independent (unaligned). The stream identifier is PXCMCapture.CUID+n.
            </summary>
            <param name="type"> The stream type.</param>
            <param name="width"> stream width.</param>
            <param name="height"> stream height.</param>
            <param name="fps"> stream frame rate.</param>
            <returns> PXC_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableStream(PXCMCapture.StreamType,System.Int32,System.Int32,System.Single,PXCMCapture.Device.StreamOption)">
            <summary>
            	Explicitly request to stream the specified raw stream. If specified more than one stream, 
            SenseManager will synchronize these streams. If called multiple times, the function treats each
            stream request as independent (unaligned). The stream identifier is PXCMCapture.CUID+n.
            </summary>
            <param name="type"> The stream type.</param>
            <param name="width"> stream width.</param>
            <param name="height"> stream height.</param>
            <param name="fps"> stream frame rate.</param>
            <param name="options"> stream flags.</param>
            <returns> PXC_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableModule(System.Int32,PXCMSession.ImplDesc)">
            <summary>
            	Enable a module in the pipeline.
            </summary>
            <param name="mid"> The module identifier. This is usually the interface identifier.</param>
            <param name="mdesc"> The module descriptor.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableModule(System.Int32,System.String)">
            <summary>
            	Enable the face module in the pipeline.
            </summary>
            <param name="name"> The optional module name.</param>
            <param name="mid"> The module identifier. This is usually the interface identifier.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.Enable3DSeg(System.String)">
            <summary>
            	Enable the user segmentation module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.Enable3DSeg">
            <summary>
            	Enable the user segmentation module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.Enable3DScan(System.String)">
            <summary>
            	Enable the 3D scanning module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableScenePerception(System.String)">
            <summary>
             Enable the Scene Perception module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR        Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableScenePerception">
            <summary>
             Enable the Scene Perception module in the pipeline.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR        Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableEnhancedVideo(System.String)">
            <summary>
             Enable the Enhanced Video module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR        Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableEnhancedVideo">
            <summary>
            	Enable the Enhanced Videogrphy module in the pipeline.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.Enable3DScan">
            <summary>
            	Enable the 3D scanning module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableTracker(System.String)">
            <summary>
            	Enable the object tracking module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableTracker">
            <summary>
            	Enable the object tracking module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableFace(System.String)">
            <summary>
            	Enable the face module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableFace">
            <summary>
            	Enable the face module in the pipeline.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableTouchlessController(System.String)">
            <summary>
            	Enable the touchless controller module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableTouchlessController">
            <summary>
            	Enable the touchless controller module in the pipeline.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableHand(System.String)">
            <summary>
            	Enable the hand module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableHand">
            <summary>
            	Enable the hand module in the pipeline.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableHandCursor(System.String)">
            <summary>
            	Enable the hand module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableHandCursor">
            <summary>
            	Enable the hand module in the pipeline.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableBlob(System.String)">
            <summary>
            	Enable the Blob module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableBlob">
            <summary>
            	Enable the Blob module in the pipeline.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableObjectRecognition(System.String)">
            <summary>
            	Enable the ObjectRecognition module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnableObjectRecognition">
            <summary>
            	Enable the ObjectRecognition module in the pipeline.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnablePersonTracking(System.String)">
            <summary>
            	Enable the PersonTracking module in the pipeline.
            </summary>
            <param name="name"> The module name.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.EnablePersonTracking">
            <summary>
            	Enable the PersonTracking module in the pipeline.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMSenseManager.PauseModule(System.Int32,System.Boolean)">
            <summary>
            	Pause/Resume the execution of the specified module.
            </summary>
            <param name="cuid"> The module identifier. This is usually the interface identifier.</param>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.Pause3DSeg(System.Boolean)">
            <summary>
            	Pause/Resume the execution of the user segmentation module.
            </summary>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.PauseScenePerception(System.Boolean)">
            <summary>
               Pause/Resume the execution of the Scene Perception module.
            </summary>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.PauseTracker(System.Boolean)">
            <summary>
            	Pause/Resume the execution of the object tracking module.
            </summary>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.PauseFace(System.Boolean)">
            <summary>
            	Pause/Resume the execution of the face module.
            </summary>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.PauseEnhancedVideo(System.Boolean)">
            <summary>
            	Pause/Resume the execution of the Enhanced Videography module.
            </summary>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.PauseTouchlessController(System.Boolean)">
            <summary>
            	Pause/Resume the execution of the touchless controller module.
            </summary>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.PauseHand(System.Boolean)">
            <summary>
            	Pause/Resume the execution of the hand module.
            </summary>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.PauseHandCursor(System.Boolean)">
            <summary>
            	Pause/Resume the execution of the hand module.
            </summary>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.PauseBlob(System.Boolean)">
            <summary>
            	Pause/Resume the execution of the Blob module.
            </summary>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.PauseObjectRecognition(System.Boolean)">
            <summary>
            	Pause/Resume the execution of the ObjectRecognition module.
            </summary>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.PausePersonTracking(System.Boolean)">
            <summary>
            	Pause/Resume the execution of the PersonTracking module.
            </summary>
            <param name="pause"> If true, pause the module. Otherwise, resume the module.</param>
        </member>
        <member name="M:PXCMSenseManager.CreateInstance">
            <summary>
            	Create an instance of the PXCSenseManager instance.
            </summary>
            <returns> The PXCMSenseManager instance.</returns>
        </member>
        <member name="T:PXCMSenseManager.Handler.OnConnectDelegate">
            <summary>
            The SenseManager calls back this function when there is a device connection or
            disconnection. During initialization, the SenseManager callbacks this function when 
            openning or closing any capture devices.
            </summary>
            <param name="device"> The video device instance.</param>
            <param name="connected"> The device connection status.</param>
            <returns> The return status is ignored during the PXCSenseManager initialization. During
            streaming, the SenseManager aborts the execution pipeline if the status is an error.</returns>
        </member>
        <member name="T:PXCMSenseManager.Handler.OnModuleSetProfileDelegate">
            <summary>
            The SenseManager calls back this function during initialization after each device 
            configuration is set.
            </summary>
            <param name="mid"> The module identifier. Usually this is the interface identifier, or PXCMCapture.CUID+n for raw video streams.</param>
            <param name="module"> The module instance, or NULL for raw video streams.</param>
            <returns> The SenseManager aborts the execution pipeline if the status is an error.</returns>
        </member>
        <member name="T:PXCMSenseManager.Handler.OnModuleProcessedFrameDelegate">
            <summary>
            The SenseManager calls back this function after a module completed processing the frame data.
            </summary>
            <param name="mid"> The module identifier. Usually this is the interface identifier.</param>
            <param name="module"> The module instance.</param>
            <returns> The SenseManager aborts the execution pipeline if the status is an error.</returns>
        </member>
        <member name="T:PXCMSenseManager.Handler.OnNewSampleDelegate">
            <summary>
            The SenseManager calls back this function when raw video streams (explicitly requested) are available.
            </summary>
            <param name="mid"> The module identifier. Usually this is the interface identifier.</param>
            <param name="sample"> The sample from capture device</param>
            <returns> The SenseManager aborts the execution pipeline if the status is an error.</returns>
        </member>
        <member name="T:PXCMSenseManager.Handler.OnStatusDelegate">
            <summary>
            The SenseManager calls back this function when streaming loop in StreamFrames() function terminated.
            </summary>
            <param name="sts"> The error code</param>
        </member>
        <member name="T:PXCMSmoother">
            <summary> @class PXCMSmoother 
            A utility that allows smoothing data of different types, using a variety of algorithms
            Stabilizer Smoother – The stabilizer smoother keeps the smoothed data point stable as long as it has not moved more than a given threshold. 
            Weighted Smoother – The weighted smoother applies a (possibly) different weight to each of the previous data samples. 
            Quadratic Smoother – The quadratic smoother is a time based smoother ideal for UI (User Interface) purposes. 
            Spring Smoother – The spring smoother is a time based smoother ideal for gaming purposes. 
            </summary>
        </member>
        <member name="M:PXCMSmoother.Create1DStabilizer(System.Single,System.Single)">
            <summary>  Create Stabilizer smoother instance for single floats
            The stabilizer keeps the smoothed data point stable as long as it has not moved more than a given threshold
            </summary>
            <param name="stabilizeStrength"> The stabilizer smoother strength, default value is 0.5f</param>
            <param name="stabilizeRadius"> The stabilizer smoother radius in correlation to the input unit value</param>
            <returns> an object of the created Smoother, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create1DWeighted(System.Single[])">
            <summary>  Create the Weighted algorithm for single floats
            The Weighted algorithm applies a (possibly) different weight to each of the previous data samples
            If the weights vector is not assigned (NULL) all the weights will be equal (1/numWeights)
            </summary>
            <param name="weights"> The Weighted smoother weight values</param>
            <returns> an object of the created Smoother, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create1DQuadratic(System.Single)">
            <summary>  Create the Quadratic algorithm for single floats
            </summary>
            <param name="smoothStrength"> The Quadratic smoother smooth strength, default value is 0.5f</param>
            <returns> an object of the created Smoother, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create1DSpring(System.Single)">
            <summary>  Create the Spring algorithm for single floats
            </summary>
            <param name="smoothStrength"> The Spring smoother smooth strength, default value is 0.5f</param>
            <returns> an object of the created Smoother, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create2DStabilizer(System.Single,System.Single)">
            <summary>  Create Stabilizer smoother instance for 2-dimensional points
            The stabilizer keeps the smoothed data point stable as long as it has not moved more than a given threshold
            </summary>
            <param name="stabilizeStrength"> The stabilizer smoother strength, default value is 0.5f</param>
            <param name="stabilizeRadius"> The stabilizer smoother radius in correlation to the input unit value</param>
            <returns> an object of the created Smoother, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create2DWeighted(System.Single[])">
            <summary>  Create the Weighted algorithm for 2-dimensional points
            The Weighted algorithm applies a (possibly) different weight to each of the previous data samples
            If the weights vector is not assigned (null) all the weights will be equal (1/numWeights)
            </summary>
            <param name="weights"> The Weighted smoother weight values</param>
            <returns> an object of the created Smoother, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create2DQuadratic(System.Single)">
            <summary>  Create the Quadratic algorithm for 2-dimensional points
            </summary>
            <param name="smoothStrength"> The Quadratic smoother smooth strength, default value is 0.5f</param>
            <returns> an object of the created Smoother, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create2DQuadratic">
            <summary>  Create the Quadratic algorithm for 2-dimensional points      
            </summary>
            <returns> an object of the created Smoother</returns>
        </member>
        <member name="M:PXCMSmoother.Create2DSpring(System.Single)">
            <summary>  Create the Spring algorithm for 2-dimensional points
            <param name="smoothStrength"> The Spring smoother smooth strength</param>
            <returns> a an object of pointer to the created Smoother, or null in case of illegal arguments</returns>
            </summary>
        </member>
        <member name="M:PXCMSmoother.Create2DSpring">
            <summary>  Create the Spring algorithm for 2-dimensional points        
            </summary>
            <returns> an object of the created Smoother</returns>
        </member>
        <member name="M:PXCMSmoother.Create3DStabilizer(System.Single,System.Single)">
            <summary>  Create Stabilizer smoother instance for 3-dimensional points
            The stabilizer keeps the smoothed data point stable as long as it has not moved more than a given threshold
            </summary>
            <param name="stabilizeStrength"> The stabilizer smoother strength, default value is 0.5f</param>
            <param name="stabilizeRadius"> The stabilizer smoother radius in correlation to the input unit value</param>
            <returns> an object of the created Smoother, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create3DStabilizer(System.Single)">
            <summary>  Create Stabilizer smoother instance for 3-dimensional points
            The stabilizer keeps the smoothed data point stable as long as it has not moved more than a given threshold
            </summary>
            <param name="stabilizeRadius"> The stabilizer smoother radius in correlation to the input unit value</param>
            <returns> an object of the created Smoother</returns>
        </member>
        <member name="M:PXCMSmoother.Create3DWeighted(System.Single[])">
            <summary>  Create the Weighted algorithm for 3-dimensional points
            The Weighted algorithm applies a (possibly) different weight to each of the previous data samples
            If the weights vector is not assigned (null) all the weights will be equal (1/numWeights)
            </summary>
            <param name="weights"> The Weighted smoother weight values</param>
            <returns> an object of the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create3DWeighted(System.Int32)">
            <summary>  Create the Weighted algorithm for 3-dimensional points
            The Weighted algorithm applies a (possibly) different weight to each of the previous data samples
            If the weights vector is not assigned (NULL) all the weights will be equal (1/numWeights)
            </summary>
            <param name="numWeights"> The Weighted smoother number of weights</param>
            <returns> a pointer to thean object of the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create3DQuadratic(System.Single)">
            <summary>  Create the Quadratic algorithm for 3-dimensional points
            </summary>
            <param name="smoothStrength"> The Quadratic smoother smooth strength, default value is 0.5f</param>
            <returns> an object of the created Smoother, or null in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create3DQuadratic">
            <summary>  Create the Quadratic algorithm for 3-dimensional points   
            </summary>
            <returns> an object of the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create3DSpring(System.Single)">
            <summary>  Create the Spring algorithm for 3-dimensional points
            </summary>
            <param name="smoothStrength"> The Spring smoother smooth strength, default value is 0.5f</param>
            <returns> an object of the created Smoother, or NULL in case of illegal arguments</returns>
        </member>
        <member name="M:PXCMSmoother.Create3DSpring">
            <summary>  Create the Spring algorithm for 3-dimensional points       
            </summary>
            <returns> an object of the created Smoother</returns>
        </member>
        <member name="T:PXCMSmoother.Smoother1D">
            <summary> @class Smoother1D
            Handles the smoothing of a stream of floats, using a specific smoothing algorithm
            </summary>
        </member>
        <member name="M:PXCMSmoother.Smoother1D.SmoothValue(System.Single)">
            <summary>			
            Add a new data sample to the smoothing algorithm
            </summary>
            <param name="value"> the latest data sample</param>
            <returns> smoothed value of Single type 		</returns>
        </member>
        <member name="M:PXCMSmoother.Smoother1D.Reset">
            <summary>			
            Reset smoother algorithm data
            </summary>	
        </member>
        <member name="M:PXCMSmoother.Smoother2D.SmoothValue(PXCMPointF32)">
            <summary>			
            Add a new data sample to the smoothing algorithm
            </summary>
            <param name="value"> the latest data sample</param>
            <returns> smoothed value in PXCMPointF32 format		</returns>
        </member>
        <member name="M:PXCMSmoother.Smoother2D.Reset">
            <summary>			
            Reset smoother algorithm data
            </summary>	
        </member>
        <member name="M:PXCMSmoother.Smoother3D.SmoothValue(PXCMPoint3DF32)">
            <summary>			
            Add a new data sample to the smoothing algorithm
            </summary>
            <param name="value"> the latest data sample</param>
            <returns> smoothed value in PXCMPoint3DF32 format		</returns>
        </member>
        <member name="M:PXCMSmoother.Smoother3D.Reset">
            <summary>			
            Reset smoother algorithm data
            </summary>	
        </member>
        <member name="M:PXCMSpeechRecognition.QueryProfile(System.Int32,PXCMSpeechRecognition.ProfileInfo@)">
            <summary>
            The function returns the available algorithm configurations.
            </summary>
            <param name="idx"> The zero-based index to retrieve all algorithm configurations.</param>
            <param name="pinfo"> The algorithm configuration, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE	There is no more configuration.</returns>
        </member>
        <member name="M:PXCMSpeechRecognition.QueryProfile(PXCMSpeechRecognition.ProfileInfo@)">
            <summary>
            The function returns the working algorithm configurations.
            </summary>
            <param name="pinfo"> The algorithm configuration, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
        </member>
        <member name="M:PXCMSpeechRecognition.SetProfile(PXCMSpeechRecognition.ProfileInfo)">
            <summary>
            The function sets the working algorithm configurations. 
            </summary>
            <param name="config"> The algorithm configuration.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
        </member>
        <member name="M:PXCMSpeechRecognition.BuildGrammarFromStringList(System.Int32,System.String[],System.Int32[])">
            <summary> 
            The function builds the recognition grammar from the list of strings. 
            </summary>
            <param name="gid"> The grammar identifier. Can be any non-zero number.</param>
            <param name="cmds"> The string list.</param>
            <param name="labels"> Optional list of labels. If not provided, the labels are 1...ncmds.</param>
            <param name="ncmds"> The number of strings in the string list.</param>
            <returns> PXCM_STATUS_NO_ERROR			Successful execution.</returns>
        </member>
        <member name="M:PXCMSpeechRecognition.ReleaseGrammar(System.Int32)">
            <summary> 
            The function deletes the specified grammar and releases any resources allocated.
            </summary>
            <param name="gid"> The grammar identifier.</param>
            <returns> PXCM_STATUS_NO_ERROR				Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE		The grammar is not found.</returns>
        </member>
        <member name="M:PXCMSpeechRecognition.SetGrammar(System.Int32)">
            <summary> 
            The function sets the active grammar for recognition.
            </summary>
            <param name="gid"> The grammar identifier.</param>
            <returns> PXCM_STATUS_NO_ERROR				Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE		The grammar is not found.</returns>
        </member>
        <member name="M:PXCMSpeechRecognition.SetDictation">
            <summary> 
            The function sets the dictation recognition mode. 
            The function may take some time to initialize.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR				Successful execution.</returns>
        </member>
        <member name="M:PXCMSpeechRecognition.StartRec(PXCMAudioSource,PXCMSpeechRecognition.Handler)">
            <summary> 
            The function starts voice recognition.
            </summary>
            <param name="source"> The audio source.</param>
            <param name="handler"> The callback handler instance.</param>
            <returns> PXCM_STATUS_NO_ERROR				Successful execution.</returns>
        </member>
        <member name="M:PXCMSpeechRecognition.StopRec">
            <summary> 
            The function stops voice recognition.
            </summary>
        </member>
        <member name="M:PXCMSpeechRecognition.BuildGrammarFromFile(System.Int32,PXCMSpeechRecognition.GrammarFileType,System.String)">
            <summary> 
            The function create grammar from file
            </summary>
            <param name="gid"> The grammar identifier. Can be any non-zero number.</param>
            <param name="fileType"> The file type from GrammarFileType structure.</param>
            <param name="grammarFilename"> The full path to file.</param>
            <returns> PXC_STATUS_NO_ERROR                Successful execution.</returns>
            <returns> PXC_STATUS_EXEC_ABORTED            Incorrect file extension.</returns>
        </member>
        <member name="M:PXCMSpeechRecognition.BuildGrammarFromMemory(System.Int32,PXCMSpeechRecognition.GrammarFileType,System.Byte[])">
            <summary> 
            The function create grammar from memory
            </summary>
            <param name="gid"> The grammar identifier. Can be any non-zero number.</param>
            <param name="fileType"> The file type from GrammarFileType structure.</param>
            <param name="grammarMemory"> The grammar specification.</param>
            <param name="memSize"> The size of grammar specification.</param>
            <returns> PXC_STATUS_NO_ERROR                Successful execution.</returns>
            <returns> PXC_STATUS_EXEC_ABORTED            Incorrect file type.</returns>
            <returns> PXC_STATUS_HANDLE_INVALID          Incorect memSize or grammarMemory equal NULL.</returns>
        </member>
        <member name="M:PXCMSpeechRecognition.GetGrammarCompileErrors(System.Int32)">
            <summary> 
            The function get array with error
            </summary>
            <param name="gid"> The grammar identifier. Can be any non-zero number.</param>
            <returns> pxcCHAR *                NULL terminated array with error or NULL in case of internal error.</returns>
        </member>
        <member name="M:PXCMSpeechRecognition.AddVocabToDictation(PXCMSpeechRecognition.VocabFileType,System.String)">
            <summary>
            The function add file with vocabulary
            </summary>
            <param name="fileType"> The vocabulary file type</param>
            <param name="vocabFileName"> The full path to file.</param>
            <returns> PXC_STATUS_NO_ERROR     Successful execution.</returns>
        </member>
        <member name="T:PXCMSpeechRecognition.NBest">
            <summary>
            NBest
            The NBest data structure describes the NBest data returned from the recognition engine.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.NBest.label">
            <summary>
            The label that refers to the recognized speech (command list grammars only)
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.NBest.confidence">
            <summary>
            The confidence score of the recognition: 0-100.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.NBest.sentence">
            <summary>
            The recognized sentence text data.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.NBest.tags">
            <summary>
            The (grammar) tags of the recognized utterance.
            </summary>
        </member>
        <member name="T:PXCMSpeechRecognition.RecognitionData">
            <summary>
            RecognitionData
            The data structure describes the recgonized speech data.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.RecognitionData.timeStamp">
            <summary>
            The time stamp of the recognition, in 100ns. 
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.RecognitionData.grammar">
            <summary>
            The grammar identifier for command and control, or zero for dictation. 
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.RecognitionData.duration">
            <summary>
            The duration of the speech, in ms.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.RecognitionData.scores">
            <summary>
            The top-N recognition results.
            </summary>
        </member>
        <member name="T:PXCMSpeechRecognition.AlertType">
            <summary>
            AlertType
            Enumeratea all supported alert events.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.AlertType.ALERT_VOLUME_HIGH">
            <summary>
            The volume is too high.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.AlertType.ALERT_VOLUME_LOW">
            <summary>
            The volume is too low. 
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.AlertType.ALERT_SNR_LOW">
            <summary>
            Too much noise. 
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.AlertType.ALERT_SPEECH_UNRECOGNIZABLE">
            <summary>
            There is some speech available but not recognizeable.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.AlertType.ALERT_SPEECH_BEGIN">
            <summary>
            The begining of a speech.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.AlertType.ALERT_SPEECH_END">
            <summary>
            The end of a speech.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.AlertType.ALERT_RECOGNITION_ABORTED">
            <summary>
            The recognition is aborted due to device lost, engine error, etc
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.AlertType.ALERT_RECOGNITION_END">
            <summary>
            The recognition is completed. The audio source no longer provides data.
            </summary>
        </member>
        <member name="T:PXCMSpeechRecognition.AlertData">
            <summary>
            AlertData
            Describe the alert parameters.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.AlertData.timeStamp">
            <summary>
            The time stamp of when the alert occurs, in 100ns.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.AlertData.label">
            <summary>
            The alert event label
            </summary>
        </member>
        <member name="T:PXCMSpeechRecognition.LanguageType">
            <summary> 
            LanguageType
            Enumerate all supported languages.
            </summary>
        </member>
        <member name="T:PXCMSpeechRecognition.ProfileInfo">
            <summary>
            Describe the algorithm configuration parameters.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.ProfileInfo.speaker">
            <summary>
            The optional speaker name for adaptation 
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.ProfileInfo.language">
            <summary>
            The supported language 
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.ProfileInfo.endOfSentence">
            <summary>
            The length of end of sentence silence in ms
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.ProfileInfo.threshold">
            <summary>
            The recognition confidence threshold: 0-100
            </summary>
        </member>
        <member name="T:PXCMSpeechRecognition.GrammarFileType">
            <summary> 
            GrammarFileType
            Enumerate all supported grammar file types.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.GrammarFileType.GFT_NONE">
            <summary>
             unspecified type, use filename extension
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.GrammarFileType.GFT_LIST">
            <summary>
            text file, list of commands
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.GrammarFileType.GFT_JSGF">
            <summary>
            Java Speech Grammar Format
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.GrammarFileType.GFT_COMPILED_CONTEXT">
            <summary>
            Previously compiled format (vendor specific)
            </summary>
        </member>
        <member name="T:PXCMSpeechRecognition.VocabFileType">
            <summary> 
            VocabFileType
            Enumerate all supported vocabulary file types.
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.VocabFileType.VFT_NONE">
            <summary>
            unspecified type, use filename extension
            </summary>
        </member>
        <member name="F:PXCMSpeechRecognition.VocabFileType.VFT_LIST">
            <summary>
            text file
            </summary>
        </member>
        <member name="T:PXCMSpeechRecognition.Handler.OnRecognitionDelegate">
            <summary>
            The function is invoked when there is some speech recognized.
            </summary>
            <param name="data"> The data structure to describe the recognized speech.</param>
        </member>
        <member name="T:PXCMSpeechRecognition.Handler.OnAlertDelegate">
            <summary>
            The function is triggered by any alert event.
            </summary>
            <param name="data"> The data structure to describe the alert.</param>
        </member>
        <member name="M:PXCMSpeechSynthesis.QueryAudioClip(System.String,System.Int32)">
            <summary>
            The function retrieves the synthesized speech as an Unity AudioClip object.
            </summary>
            <param name="name">The audio clip name</param>
            <param name="sid">The sentence identifier</param>
            <returns>the AudioClip instance, or null if there is any error.</returns>
        </member>
        <member name="M:PXCMSpeechSynthesis.QueryProfile(System.Int32,PXCMSpeechSynthesis.ProfileInfo@)">
            <summary>
            The function returns the available algorithm configuration parameters.
            </summary>
            <param name="pidx"> The zero-based index to retrieve all configuration parameters.</param>
            <param name="pinfo"> The configuration parameters, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR				Successful execution.</returns>
            <returns> PXCM_STATUS_ITEM_UNAVAILABLE		No more configurations.</returns>
        </member>
        <member name="M:PXCMSpeechSynthesis.QueryProfile(PXCMSpeechSynthesis.ProfileInfo@)">
            <summary>
            The function returns the current working algorithm configuration parameters.
            </summary>
            <param name="pinfo"> The configuration parameters, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR				Successful execution.</returns>
        </member>
        <member name="M:PXCMSpeechSynthesis.SetProfile(PXCMSpeechSynthesis.ProfileInfo)">
            <summary>
            The function sets the current working algorithm configuration parameters.
            </summary>
            <param name="pinfo"> The configuration parameters.</param>
            <returns> PXCM_STATUS_NO_ERROR				Successful execution.</returns>
        </member>
        <member name="M:PXCMSpeechSynthesis.BuildSentence(System.Int32,System.String)">
            <summary>
            The function synthesizes the sentence for later use. The function may take some time
            to generate the fully synthesized speech.
            </summary>
            <param name="sid"> The sentence identifier. Can be any non-zero unique number.</param>
            <param name="sentence"> The sentence string.</param>
            <returns> PXC_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMSpeechSynthesis.QueryBuffer(System.Int32,System.Int32)">
            <summary>
            The function retrieves the PXCAudio buffer for the specified sentence. There could be more
            than one PXCAudio buffer. The application should keep retrieving with increased index, until the 
            function returns NULL. The audio buffer is internally managed. Do not release the instance.
            </summary>
            <param name="sid"> The sentence identifier.</param>
            <param name="idx"> The zero-based index to retrieve multiple samples.</param>
            <returns> the Audio buffer, or NULL if there is no more.</returns>
        </member>
        <member name="M:PXCMSpeechSynthesis.QueryBufferNum(System.Int32)">
            <summary>
            The function returns the number of PXCAudio buffers used for the specified 
            synthesized sentence.
            </summary>
            <param name="sid"> The sentence identifier.</param>
            <returns> the number of PXCAudio buffers, or 0 if the sentence is not found.</returns>
        </member>
        <member name="M:PXCMSpeechSynthesis.QuerySampleNum(System.Int32)">
            <summary>
            The function returns the number of audio samples for the specified synthesized sentence. 
            Each audio sample consists of multiple channels according to the format definition.
            </summary>
            <param name="sid"> The sentence identifier.</param>
            <returns> the sample number, or 0 if the sentence is not found.</returns>
        </member>
        <member name="M:PXCMSpeechSynthesis.ReleaseSentence(System.Int32)">
            <summary>
            The function releases any resources allocated for the sentence identifier.
            </summary>
            <param name="sid"> The sentence identifier.</param>
        </member>
        <member name="T:PXCMSpeechSynthesis.LanguageType">
            <summary>
            LanguageType
            Enumerate all supported languages.
            </summary>
        </member>
        <member name="T:PXCMSpeechSynthesis.VoiceType">
            <summary> 
            VoiceType
            Enumerate all supported voices.
            </summary>
        </member>
        <member name="T:PXCMSpeechSynthesis.ProfileInfo">
            <summary>
            ProfileInfo
            Describe the algorithm configuration parameters.
            </summary>
        </member>
        <member name="F:PXCMSpeechSynthesis.ProfileInfo.outputs">
            <summary>
            The synthesized audio format. Adjust bufferSize for the required latency.
            </summary>
        </member>
        <member name="F:PXCMSpeechSynthesis.ProfileInfo.language">
            <summary>
            The supported language
            </summary>
        </member>
        <member name="F:PXCMSpeechSynthesis.ProfileInfo.voice">
            <summary>
            The voice
            </summary>
        </member>
        <member name="F:PXCMSpeechSynthesis.ProfileInfo.rate">
            <summary>
            The speaking speed. The default is 100. Smaller is slower and bigger is faster.
            </summary>
        </member>
        <member name="F:PXCMSpeechSynthesis.ProfileInfo.volume">
            <summary>
            The speaking volume from 0 to 100 (loudest).
            </summary>
        </member>
        <member name="F:PXCMSpeechSynthesis.ProfileInfo.pitch">
            <summary>
            default pitch is 100. range [50 to 200]
            </summary>
        </member>
        <member name="F:PXCMSpeechSynthesis.ProfileInfo.eosPauseDuration">
            <summary>
            End of sentence wait duration. range [0 to 9 multiplied by 200msec]
            </summary>
        </member>
        <member name="M:PXCMSyncPoint.Synchronize(System.Int32)">
            <summary>
               The function synchronizes a single SP with timeout.
            </summary>
            <param name="timeout"> The timeout value in ms.</param>
            <returns> PXCM_STATUS_NO_ERROR        Successful execution.</returns>
            <returns> PXCM_STATUS_EXEC_TIMEOUT    The timeout value is reached.</returns>
        </member>
        <member name="M:PXCMSyncPoint.Synchronize">
            <summary>
             The function synchronizes a single SP infinitely.
            </summary>
            <returns> PXCM_STATUS_NO_ERROR        Successful execution.</returns>
        </member>
        <member name="M:PXCMSyncPoint.SynchronizeEx(PXCMSyncPoint[],System.Int32@,System.Int32)">
            <summary>
               The function synchronizes multiple SPs as well as OS events. Zero SPs or OS events are skipped automatically.
            If the idx argument is NULL, the function waits until all events are signaled.
            If the idx argument is not NULL, the function waits until any of the events is signaled and returns the index of the signalled events.
            </summary>
            <param name="n"> The number of SPs to be synchronized.</param>
            <param name="sps"> The SP array.</param>
            <param name="idx"> The event index, to be returned.</param>
            <param name="timeout"> The timeout value in ms.</param>
            <returns> PXCM_STATUS_NO_ERROR        Successful execution.</returns>
            <returns> PXCM_STATUS_EXEC_TIMEOUT    The timeout value is reached.</returns>
        </member>
        <member name="M:PXCMSyncPoint.SynchronizeEx(PXCMSyncPoint[],System.Int32)">
            <summary>
               The function synchronizes multiple SPs. Zero SPs are skipped automatically.
            If the idx argument is NULL, the function waits until all events are signaled.
            If the idx argument is not NULL, the function waits until any of the events is signaled and returns the index of the signalled events.
            </summary>
            <param name="sps"> The SP array.</param>
            <returns> PXCM_STATUS_NO_ERROR        Successful execution.</returns>
            <returns> PXCM_STATUS_EXEC_TIMEOUT    The timeout value is reached.</returns>
        </member>
        <member name="M:PXCMSyncPoint.SynchronizeEx(PXCMSyncPoint[],System.Int32@)">
            <summary>
               The function synchronizes multiple SPs. Zero SPs are skipped automatically.
            If the idx argument is NULL, the function waits until all events are signaled.
            If the idx argument is not NULL, the function waits until any of the events is signaled and returns the index of the signalled events.
            </summary>
            <param name="sps"> The SP array.</param>
            <param name="idx"> The event index, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR        Successful execution.</returns>
            <returns> PXCM_STATUS_EXEC_TIMEOUT    The timeout value is reached.</returns>
        </member>
        <member name="M:PXCMSyncPoint.SynchronizeEx(PXCMSyncPoint[])">
            <summary>
               The function synchronizes multiple SPs. Zero SPs are skipped automatically.
            If the idx argument is NULL, the function waits until all events are signaled.
            If the idx argument is not NULL, the function waits until any of the events is signaled and returns the index of the signalled events.
            </summary>
            <param name="sps"> The SP array.</param>
            <returns> PXCM_STATUS_NO_ERROR        Successful execution.</returns>
            <returns> PXCM_STATUS_EXEC_TIMEOUT    The timeout value is reached.</returns>
        </member>
        <member name="M:PXCMSyncPoint.ReleaseSP(PXCMSyncPoint[],System.Int32,System.Int32)">
            <summary>
            A convenient function to release an array of objects
            </summary>
            <param name="sps"></param>
            <param name="startIndex"></param>
            <param name="nsps"></param>
        </member>
        <member name="M:PXCMTouchlessController.QueryProfile(PXCMTouchlessController.ProfileInfo@)">
                        @brief Return the configuration parameters of the SDK's TouchlessController application.
                        @param[out] pinfo the profile info structure of the configuration parameters.
                        @return PXC_STATUS_NO_ERROR if the parameters were returned successfully; otherwise, return one of the following errors:
                        PXC_STATUS_ITEM_UNAVAILABLE - Item not found/not available.\n
                        PXC_STATUS_DATA_NOT_INITIALIZED - Data failed to initialize.\n                        
        </member>
        <member name="M:PXCMTouchlessController.SetProfile(PXCMTouchlessController.ProfileInfo)">
            <summary> 
            Set configuration parameters of the SDK TouchlessController application.
            </summary>
            <param name=" pinfo"> the profile info structure of the configuration parameters.</param>
            <returns> PXC_STATUS_NO_ERROR if the parameters were set correctly; otherwise, return one of the following errors:</returns>
            PXC_STATUS_INIT_FAILED - Module failure during initialization.\n
            PXC_STATUS_DATA_NOT_INITIALIZED - Data failed to initialize.\n                        
        </member>
        <member name="M:PXCMTouchlessController.AddGestureActionMapping(System.String,PXCMTouchlessController.Action)">
            <summary>
            	Adds a gesture action mapping.
            </summary>
            <param name=" gestureName">name of the gesture.</param>
            <param name=" action">The action to perform when gesture is recognized.</param>
            <returns>	The pxcmStatus.</returns>
        </member>
        <member name="M:PXCMTouchlessController.SubscribeEvent(PXCMTouchlessController.OnFiredUXEventDelegate)">
            <summary> 
            Register an event handler for UX Event. The event handler's will be called each time a UX event is identified.
            </summary>
            <param name=" uxEventHandler"> a delegete event handle.</param>
            <returns> PXC_STATUS_NO_ERROR if the registering an event handler was successful; otherwise, return the following error:
            PXC_STATUS_DATA_NOT_INITIALIZED - Data failed to initialize.</returns>
        </member>
        <member name="M:PXCMTouchlessController.UnsubscribeEvent(PXCMTouchlessController.OnFiredUXEventDelegate)">
            <summary> 
            Unsubscribe an event handler for UX events.
            </summary>
            <param name=" uxEventHandler"> a delegete event handle. that should be removed.</param>
            <returns> PXC_STATUS_NO_ERROR if the unregistering the event handler was successful, an error otherwise.</returns>
        </member>
        <member name="M:PXCMTouchlessController.SubscribeAlert(PXCMTouchlessController.OnFiredAlertDelegate)">
            <summary> 
            Register an event handler for alerts. The event handler's will be called each time an alert is identified.
            </summary>
            <param name=" alertHandler"> a delegate event handler.</param>
            <returns> PXC_STATUS_NO_ERROR if the registering an event handler was successful; otherwise, return the following error:
            PXC_STATUS_DATA_NOT_INITIALIZED - Data failed to initialize.</returns>
        </member>
        <member name="M:PXCMTouchlessController.UnsubscribeAlert(PXCMTouchlessController.OnFiredAlertDelegate)">
            <summary> 
            Unsubscribe an event handler for alerts.
            </summary>
            <param name=" alertHandler"> a delegate event handler that should be removed.</param>
            <returns> PXC_STATUS_NO_ERROR if the unregistering the event handler was successful, an error otherwise.</returns>
        </member>
        <member name="M:PXCMTouchlessController.AddGestureActionMapping(System.String,PXCMTouchlessController.Action,PXCMTouchlessController.OnFiredActionDelegate)">
            <summary>
            Adds a gesture action mapping.
            </summary>
            <param name="gestureName">name of the gesture.</param>
            <param name="action">The action to perform when gesture is recognized .</param>
            <param name="actionHandler">actionHandler will be called when the action is performed</param>
            <returns>The pxcmStatus.</returns>
        </member>
        <member name="M:PXCMTouchlessController.ClearAllGestureActionMappings">
            <summary>
            Clear all previous Gesture to Action mappings
            </summary>
        </member>
        <member name="T:PXCMTouchlessController.ProfileInfo">
            <summary> 
            ProfileInfo
            Containing the parameters that define a TouchlessController session     
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.config">
            <summary>
            An or value of configuration options 
            </summary>
        </member>
        <member name="T:PXCMTouchlessController.ProfileInfo.Configuration">
            <summary>
             Configuration
            an or value of UX options relevant to specific application
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_None">
            <summary>
            No option is selected - use default behavior 
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_Allow_Zoom">
            <summary>
            Should zoom be allowed
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_Use_Draw_Mode">
            <summary>
            Use draw mode - should be used for applications the need continues interaction (touch + movement) like drawing
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_Scroll_Horizontally">
            <summary>
            Enable horizontal scrolling
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_Scroll_Vertically">
            <summary>
            Enable vertical scrolling
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_Meta_Context_Menu">
            <summary>
            On a "V" gesture enables the *meta* UXEvents
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_Enable_Injection">
            <summary>
            Causes the OS to simulate the gesture with the appropriate injection
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_Edge_Scroll_Horizontally">
            <summary>
            Enable horizontal scrolling 
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_Edge_Scroll_Vertically">
            <summary>
            Enable vertical scrolling
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_Allow_Back">
            <summary>
            Enable Back Gesture
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_Allow_Selection">
            <summary>
            Enable Selection Gesture
            </summary>
        </member>
        <member name="F:PXCMTouchlessController.ProfileInfo.Configuration.Configuration_Disable_On_Mouse_Move">
            <summary>
            if enabled TouchlessController will stop tracking the hand while the mouse moves
            </summary>
        </member>
        <member name="T:PXCMTouchlessController.UXEventData">
             <summary>
            Describe a UXEvent,
             </summary>
        </member>
        <member name="T:PXCMTouchlessController.UXEventData.UXEventType">
            <summary>
            	UXEventType
            	Values that represent UXEventType.
            </summary>
        </member>
        <member name="T:PXCMTouchlessController.AlertData">
            <summary>
            	An alert data, contain data describing an alert.    
            </summary>
        </member>
        <member name="T:PXCMTouchlessController.AlertData.AlertType">
            <summary>
            	Values that represent AlertType.
            </summary>
        </member>
        <member name="T:PXCMTouchlessController.Action">
            <summary>
            	Values that represent Action. Those are actions the module will inject to the OS
            </summary>
        </member>
        <member name="T:PXCMTouchlessController.PointerSensitivity">
            <summary>
            	Values that represent Sensitivity level for the pointer movement
            </summary>
        </member>
        <member name="M:PXCMTracker.IsTracking(PXCMTracker.ETrackingState)">
            <summary>
             Returns TRUE if the current state is actively tracking (valid pose information is available)
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PXCMTracker.SetCameraParameters(System.String)">
            <summary>
             Set the camera parameters, which can be the result of camera calibration from the toolbox
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:PXCMTracker.Set2DTrackFromFile(System.String,System.Int32@,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Add a 2D reference image for tracking an object
            </summary>
            <param name="filename">path to image file</param>
            <param name="cosID">coordinate system ID of added target</param>
            <param name="widthMM">image width in mm (optional)</param>
            <param name="heightMM">image height in mm (optional)</param>
            <param name="qualityThreshold">minimal similarity measure [0..1] that has to be fulfilled for the image or one of its sub-patches.</param>
            <param name="extensible">Use features from the environment to improve tracking</param>
            <returns></returns>
        </member>
        <member name="M:PXCMTracker.Set2DTrackFromImage(PXCMImage,System.Int32@,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Add a 2D reference image for tracking an object
            </summary>
            <param name="image">Target image data</param>
            <param name="cosID">coordinate system ID of added target</param>
            <param name="widthMM">image width in mm (optional)</param>
            <param name="heightMM">image height in mm (optional)</param>
            <param name="qualityThreshold">minimal similarity measure [0..1] that has to be fulfilled for the image or one of its sub-patches.</param>
            <param name="extensible">Use features from the environment to improve tracking</param>
            <returns></returns>
        </member>
        <member name="M:PXCMTracker.Set3DTrack(System.String,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Add a 3D tracking configuration for a target
            This file can be generated with the Toolbox
            </summary>
            <param name="filename">The full path to the configuration file (*.slam, *.xml)</param>
            <param name="firstCosID">coordinate system ID of the first added target</param>
            <param name="lastCosID">coordinate system ID of the last added target (may be the same as firstCosID)</param>
            <param name="extensible">Use features from the environment to improve tracking</param>
            <returns></returns>
        </member>
        <member name="M:PXCMTracker.RemoveTrackingID(System.Int32)">
            <summary>
            Remove a previously returned cosID from tracking.
            </summary>
            <param name="cosID"></param>
            <returns></returns>
        </member>
        <member name="M:PXCMTracker.RemoveAllTrackingIDs">
            <summary>
            Remove all previous created cosIDs from tracking
            </summary>
            <returns></returns>
        </member>
        <member name="M:PXCMTracker.Set3DInstantTrack(System.Boolean,System.Int32)">
            <summary>
            Enable instant 3D tracking (SLAM).  This form of tracking does not require an object model to be previously created and loaded.
            </summary>
            <param name="egoMotion">Specify the coordinate system origin and orientation of the tracked object. 
            true uses the first image captured from the camera
            false (default) uses the "main plane" of the scene which is determined heuristically</param>
            <param name="framesToSkip">Instant tracking may fail to initialize correctly if the camera image has not stabilized
            or is not pointing at the desired object when the first frames are processed.  This parameter
            skips the initial frames which may have automatic adjustments such as contrast occuring.
            This parameter may be 0 if instant 3D tracking should initialize from the next frame.</param>
            <returns></returns>
        </member>
        <member name="M:PXCMTracker.QueryNumberTrackingValues">
            <summary>
            Get the number of targets currently tracking
            see QueryTrackingValues, QueryAllTrackingValues
            </summary>
            <returns>The number of active tracking targets</returns>
        </member>
        <member name="M:PXCMTracker.QueryAllTrackingValues(PXCMTracker.TrackingValues[]@)">
            <summary>
            Get information for all of the active tracking targets
            </summary>
            <param name="trackingValues"> Pointer to store the tracking results at.  The passed in block must be at least QueryNumberTrackingValues() elements long</param>
            <returns></returns>
        </member>
        <member name="M:PXCMTracker.QueryTrackingValues(System.Int32,PXCMTracker.TrackingValues@)">
            <summary>
            Return information for a particular coordinate system ID.  This value can be returned from Set2DTrackFromFile(),
            Set2DTrackFromImage(), or Set3DTrack().  coordinate system IDs for Set3DInstantTrack() are generated dynamically as
            targets that are determined in the scene.
            </summary>
            <param name="cosID">The coordinate system ID to return the status for</param>
            <param name="trackingValues">The returned tracking values. the user needs to manage the mapping between the cosIDs and targets in loaded.</param>
            <returns></returns>
        </member>
        <member name="T:PXCMTracker.ETrackingState">
             <summary>
             The tracking states of a target.
            
             The state of a target usually starts with ETS_NOT_TRACKING.
             When it is found in the current camera image, the state change to
             ETS_FOUND for one image, the following images where the location of the
             target is successfully determined will have the state ETS_TRACKING.
            
             Once the tracking is lost, there will be one single frame ETS_LOST, then
             the state will be ETS_NOT_TRACKING again. In case there is extrapolation 
             of the pose requested, the transition may be from ETS_TRACKING to ETS_EXTRAPOLATED.
            
             To sum up, these are the state transitions to be expected:
              ETS_NOT_TRACKING -> ETS_FOUND 
              ETS_FOUND        -> ETS_TRACKING
              ETS_TRACKING     -> ETS_LOST
              ETS_LOST         -> ETS_NOT_TRACKING
            
             With additional extrapolation, these transitions can occur as well:
              ETS_TRACKING     -> ETS_EXTRAPOLATED
              ETS_EXTRAPOLATED -> ETS_LOST
            
             "Event-States" do not necessarily correspond to a complete frame but can be used to 
             flag individual tracking events or replace tracking states to clarify their context:
              ETS_NOT_TRACKING -> ETS_REGISTERED -> ETS_FOUND for edge based initialization
             </summary>
        </member>
        <member name="F:PXCMTracker.TrackingValues.quality">
             <summary>
             Quality of the tracking values.
             Value between 0 and 1 defining the tracking quality.
             A higher value means better tracking results. More specifically:
            - 1 means the system is tracking perfectly.
            - 0 means that we are not tracking at all.
             </summary>
        </member>
        <member name="F:PXCMTracker.TrackingValues.timeElapsed">
            <summary>
            Time elapsed (in ms) since last state change of the tracking system
            </summary>
        </member>
        <member name="F:PXCMTracker.TrackingValues.trackingTimeMs">
            <summary>
            Time (in milliseconds) used for tracking the respective frame
            </summary>
        </member>
        <member name="F:PXCMTracker.TrackingValues.cosID">
            <summary>
            The ID of the target object
            </summary>
        </member>
        <member name="F:PXCMTracker.TrackingValues.targetName">
            <summary>
            The name of the target object
            </summary>
        </member>
        <member name="F:PXCMTracker.TrackingValues.additionalValues">
            <summary>
            Extra space for information provided by a sensor that cannot be expressed with translation and rotation properly.
            </summary>
        </member>
        <member name="F:PXCMTracker.TrackingValues.sensor">
            <summary>
            The sensor that provided the values
            </summary>
        </member>
        <member name="F:PXCMTracker.TrackingValues.translationImage">
            <summary>
            The translation component of the pose projected onto the color image, in pixels 
            </summary>
        </member>
        <member name="M:PXCMTrackerUtils.Start3DMapCreation(PXCMTrackerUtils.ObjectSize)">
             <summary>
            	Interactive version of map creation, similar to the toolbox functionality. Depth is automatically
               used if supported in the current camera profile.  Map creation is stopped either explicitly with \c Cancel3DMapCreation
            	or by pausing the tracking module using pSenseManager->PauseTracker(TRUE).
            
            	The map file may be saved at any time with Save3DMap.
            	see also Cancel3DMapCreation, Save3DMap, QueryNumberFeaturePoints, QueryFeaturePoints
             </summary>	
             <param name="objSize">Relative size of the object to create a map for, an accurate value helps improve the initialization time.</param>
        </member>
        <member name="M:PXCMTrackerUtils.Cancel3DMapCreation">
             <summary> Cancel map creation without saving a file, resetting the internal state.
            
            	see also Start3DMapCreation
             </summary>
        </member>
        <member name="M:PXCMTrackerUtils.Start3DMapExtension">
             <summary>
            	Begins extending a previously created 3D Map with additional feature points. Map extension is an interactive process only.
            	The extended map may be saved using \c Save3DMap at any time.
            
            	see also Load3DMap	
             </summary>
        </member>
        <member name="M:PXCMTrackerUtils.Cancel3DMapExtension">
             <summary>
            	Cancel map extension without saving a file, and reset the internal state.
            
            	see also Cancel3DMapExtension
             </summary>
        </member>
        <member name="M:PXCMTrackerUtils.Load3DMap(System.String)">
            <summary>
            Load a 3D Map from disk in preparation for map extension or alignment operations.
            </summary>
            <param name="filename">Name of the filename to be loaded</param>
        </member>
        <member name="M:PXCMTrackerUtils.Save3DMap(System.String)">
            <summary>
            Save a 3D Map.  Maps must be saved to disk for further usage, it is not possible to generate a map in memory
            and use it for tracking or extension later.
            </summary>
            <param name="filename">Name of the filename to be saved</param>
        </member>
        <member name="M:PXCMTrackerUtils.QueryNumberFeaturePoints">
             <summary>
            	Returns the number of detected feature points during map creation.
            
            	see also QueryFeaturePoints
             </summary>	
        </member>
        <member name="M:PXCMTrackerUtils.QueryFeaturePoints(PXCMPoint3DF32[],System.Boolean,System.Boolean)">
             <summary>
            	Retrieve the detected feature points for map creation.  Active points are ones which have been detected
            	in the current frame, inactive points were detected previously but are not detected in the current frame.
            
            	see also QueryNumberFeaturePoints, Start3DMapCreation, Start3DMapExtension
             </summary>
             <param name="points">Array where the feature points will be stored</param>
             <param name="returnActive">Return the active (currently tracked) features in the array</param>
             <param name="returnInactive">Return the inactive (not currently tracked) features in the array</param>
             <returns>The number of feature points copied into points</returns>
        </member>
        <member name="M:PXCMTrackerUtils.Start3DMapAlignment(System.Int32,System.Int32)">
             <summary>
            	Aligns a loaded 3D map to the specified marker. Alignment defines the initial pose of the model relative to the axes
            	printed on the marker (+Z points up out of the page).  By default, the coordinate system pose (origin and rotation)
            	is in an undefined position with respect to the object. The placement of the marker specifies the (0,0,0) origin as
            	well as the alignment of the coordinate axes (initial rotation).
            
            	Alignment also enhances the returned pose coordinates to be in units of millimeters, instead of an undefined unit.
            	see also Stop3DMapAlignment, Is3dMapAlignmentComplete
             </summary>	
             <param name="markerID">Integer identifier for the marker (from the marker PDF)</param>
             <param name="markerSize">Size of the marker in millimeters</param>
        </member>
        <member name="M:PXCMTrackerUtils.Cancel3DMapAlignment">
             <summary>
            	Cancel the current 3D Map alignment operation before it is complete.  Any in-progress state will be lost.
            
            	see also Start3DMapAlignment, Is3DMapAlignmentComplete
             </summary>	
        </member>
        <member name="M:PXCMTrackerUtils.Is3DMapAlignmentComplete">
             <summary>
            	Returns TRUE if alignment is complete.  At that point the file may be saved with the new alignment values.
            
            	see also Start3DMapAlignment
             </summary>	
        </member>
        <member name="M:PXCMTrackerUtils.StartCameraCalibration(System.Int32,System.Int32)">
            <summary>
            Start the camera calibration process. Calibration can improve the tracking results by compensating for
            camera distortion and other intrinsic camera values.  A successful calibration requires several frames,
            with the marker in different orientations and rotations relative to the camera.
            
            see also QueryCalibrationProgress, SaveCameraParameters
            </summary>
            <param name="markerID">Integer identifier for the marker (from the marker PDF file)</param>
            <param name="markerSize">Size of the printed marker in millimeters</param>
        </member>
        <member name="M:PXCMTrackerUtils.CancelCameraCalibration">
             <summary>
            	Stop the camera calibration process before it is complete.  No new calibration parameters may be saved.	
            
            	see also StartCameraCalibration, QueryCalibrationProgress
             </summary>	
        </member>
        <member name="M:PXCMTrackerUtils.QueryCalibrationProgress">
             <summary>
            	Return the calibration progress as a percentage (0 - 100%). Calibration requires several different views of the
            	marker to produce an accurate result, this function returns the relative progress.  A calibration file may be saved
            	before this function returns 100% but the quality will be degraded.
            
            	If calibration has not been started this function returns a negative value
            
            	see also StartCameraCalibration
             </summary>
        </member>
        <member name="M:PXCMTrackerUtils.SaveCameraParametersToFile(System.String)">
            <summary>
            Save the current camera intrinsic parameters to an XML file.
            see also SetCameraParameters, StartCameraCalibration	
            </summary>
            <param name="filename">Filename to save the XML camera parameters in</param>
        </member>
        <member name="T:PXCMTrackerUtils.ObjectSize">
            <summary>
            The relative size of a target object.  
            Specifying the appropriate size helps improve the training initialization process.
            </summary>
        </member>
        <member name="F:PXCMTrackerUtils.ObjectSize.SMALL">
            Cup sized
        </member>
        <member name="F:PXCMTrackerUtils.ObjectSize.MEDIUM">
            Desktop sized
        </member>
        <member name="F:PXCMTrackerUtils.ObjectSize.LARGE">
            Room sized
        </member>
        <member name="T:PXCMTrackerUtils.UtilityCosID">
             <summary>
             Special purpose cosIDs which may be passed in to QueryTrackingValues. These values may be used to get the
             current tracking position of the map creation operations.
            
             see also PXCMTracker.QueryTrackingValues
             </summary>
        </member>
        <member name="F:PXCMTrackerUtils.UtilityCosID.ALIGNMENT_MARKER">
            Pose of the detected calibration marker
        </member>
        <member name="F:PXCMTrackerUtils.UtilityCosID.IN_PROGRESS_MAP">
            New pose of the tracked object based on the alignment marker
        </member>
        <member name="M:PXCMVideoModule.QueryCaptureProfile(System.Int32,PXCMVideoModule.DataDesc@)">
                        @brief Return the available module input descriptors.
                        @param[in]  pidx					The zero-based index used to retrieve all configurations.
                        @param[out] inputs					The module input descriptor, to be returned.
                        @return PXCM_STATUS_NO_ERROR		Successful execution.
                        @return PXCM_STATUS_ITEM_UNAVAILABLE	No specified input descriptor is not available.
        </member>
        <member name="M:PXCMVideoModule.PXCMVideoModule_SetProjection(System.IntPtr,System.IntPtr)">
                        @brief Pass projection object for mappings between color and depth coordinate systems
                        @param[in] projection       The projection object.
        </member>
        <member name="M:PXCMVideoModule.PXCMVideoModule_SetGPUExec(System.IntPtr,System.Boolean,System.Int32)">
                        @brief enables GPU processing controls
                        @param[in] enable is a bool that enables a specific taskId on GPU.
            		    @param[in] taskId provides more fine-grained controls on which task would be enbled on GPU.
            		    default is -1, meaning that all tasks are enabled on GPU. 
        </member>
        <member name="M:PXCMVideoModule.QueryCaptureProfile(PXCMVideoModule.DataDesc@)">
            <summary> 
            Return the active input descriptor that the module works on.
            </summary>
            <param name="inputs"> The module input descriptor, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR		Successful execution.</returns>
        </member>
        <member name="M:PXCMVideoModule.SetCaptureProfile(PXCMVideoModule.DataDesc)">
            <summary> 
            Set the active input descriptor with the device information from the capture device.
            </summary>
            <param name="inputs"> The input descriptor with the device information.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMVideoModule.ProcessImageAsync(PXCMCapture.Sample,PXCMSyncPoint@)">
            <summary> 
            Feed captured samples to module for processing. If the samples are not available 
            immediately, the function will register to run the module processing when the samples 
            are ready. This is an asynchronous function. The application must synchronize the 
            returned SP before retrieving any module data, which is not available during processing.
            </summary>
            <param name="images"> The samples from the capture device.</param>
            <param name="sp"> The SP, to be returned.</param>
            <returns> PXCM_STATUS_NO_ERROR	Successful execution.</returns>
        </member>
        <member name="M:PXCMVideoModule.SetProjection(PXCMProjection)">
                        @brief Pass projection object for mappings between color and depth coordinate systems
                        @param[in] projection       The projection object.
        </member>
        <member name="M:PXCMVideoModule.SetGPUExec(System.Boolean,System.Int32)">
                            @brief enables GPU processing controls
                            @param[in] enable is a bool that enables a specific taskId on GPU.
            		        @param[in] taskId provides more fine-grained controls on which task would be enbled on GPU.
            		        default is -1, meaning that all tasks are enabled on GPU. 
        </member>
        <member name="T:PXCMVideoModule.DeviceCap">
            <summary> 
            struct
            Describes a pair value of device property and its value.
            Use the inline functions to access specific device properties.
            </summary>
        </member>
        <member name="T:PXCMVideoModule.StreamDesc">
            <summary> 
            struct
            Describes the streams requested by a module implementation.
            </summary>
        </member>
        <member name="T:PXCMVideoModule.StreamDescSet">
            <summary> 
            StreamDescSet
            A set of stream descriptors accessed by StreamType.
            </summary>
        </member>
        <member name="P:PXCMVideoModule.StreamDescSet.Item(PXCMCapture.StreamType)">
            <summary>
            Access the stream descriptor by the stream type.
            </summary>
            <param name="type"> The stream type.</param>
            <returns> The stream descriptor instance.</returns>
        </member>
        <member name="T:PXCMVideoModule.DataDesc">
            <summary> 
            struct
            Data descriptor to describe the module input needs.
            </summary>
        </member>
        <member name="T:PXCMBox3DF32">
            A type representing a 3d box with pxcF32 values 
        </member>
        <member name="T:pxcmStatus">
            <summary>
              This enumeration defines various return codes that SDK interfaces
              use.  Negative values indicate errors, a zero value indicates success,
              and positive values indicate warnings.
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_FEATURE_UNSUPPORTED">
            <summary>
            Unsupported feature
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_PARAM_UNSUPPORTED">
            <summary>
            Unsupported parameter(s)
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_ITEM_UNAVAILABLE">
            <summary>
            Item not found/not available
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_HANDLE_INVALID">
            <summary>
            Invalid session, algorithm instance, or pointer
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_ALLOC_FAILED">
            <summary>
            Memory allocation failure 
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_DEVICE_FAILED">
            <summary>
            Acceleration device failed/lost
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_DEVICE_LOST">
            <summary>
            Acceleration device lost
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_DEVICE_BUSY">
            <summary>
            Acceleration device busy
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_EXEC_ABORTED">
            <summary>
            Execution aborted due to errors in upstream components
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_EXEC_INPROGRESS">
            <summary>
            Asynchronous operation is in execution
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_EXEC_TIMEOUT">
            <summary>
            Operation time out 
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_FILE_WRITE_FAILED">
            <summary>
            Failure in open file in WRITE mode
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_FILE_READ_FAILED">
            <summary>
            Failure in open file in READ mode
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_FILE_CLOSE_FAILED">
            <summary>
            Failure in close a file handle
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_DATA_UNAVAILABLE">
            <summary>
            Data not available for MW model or processing 
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_DATA_NOT_INITIALIZED">
            <summary>
            Data failed to initialize
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_INIT_FAILED">
            <summary>
            Module failure during initialization
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_STREAM_CONFIG_CHANGED">
            <summary>
            Configuration for the stream has changed 
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_CAPTURE_CONFIG_ALREADY_SET">
            <summary>
            parameter cannot be changed since configuration for capturing has been already set
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_COORDINATE_SYSTEM_CONFLICT">
            <summary>
            Mismatched coordinate system between modules
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_NOT_MATCHING_CALIBRATION">
            <summary>
            calibration values not matching
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_ACCELERATION_UNAVAILABLE">
            <summary>
            Acceleration unsupported or unavailable
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_TIME_GAP">
            <summary>
            time gap in time stamps
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_PARAM_INPLACE">
            <summary>
            the same parameters already defined
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_DATA_NOT_CHANGED">
            <summary>
            Data not changed (no new data available)
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_PROCESS_FAILED">
            <summary>
            Module failure during processing
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_VALUE_OUT_OF_RANGE">
            <summary>
            Data value(s) out of range
            </summary>
        </member>
        <member name="F:pxcmStatus.PXCM_STATUS_DATA_PENDING">
            <summary>
            Not all data was copied, more data is available for fetching
            </summary>
        </member>
    </members>
</doc>
